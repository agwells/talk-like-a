{"version":3,"sources":["../../src/lib.js","../../index.js","../../src/b1ff.js","../../src/censor.js","../../src/chef.js","../../src/cockney.js","../../src/eleet.js","../../src/jethro.js","../../src/upsidedown.js","../../src/klaus.js","../../src/pirate.js","../../src/nyc.js","../../src/ken.js","../../src/ky00te.js","../../src/rasterman.js","../../src/newspeak.js","../../src/studly.js","../../src/spammer.js","../../src/fudd.js","../../src/jibberish.js","../../src/kenny.js","../../src/LOLCAT.js","../../src/nethackify.js","../../src/scottish.js","../../src/scramble.js","../../src/uniencode.js","App.js","index.js"],"names":["getRandFn","initialSeed","curSeed","PSEUDO_RAND_MAX","STARTS_WITH_UPPER","RegExp","simuLex","originalString","rules","extraUtils","remaining","out","rand","bestMatch","bestMatchLength","forEach","regex","replacer","matches","match","length","slice","preprocessRules","rawRules","map","module","exports","isUpperCase","letter","test","sameCap","replacement","toUpperCase","toLowerCase","sameCapReplacer","lowercaseReplacement","uppercaseReplacement","tr","initialString","searchList","replacementList","split","c","k","indexOf","charAt","join","b1ff","require","censor","chef","cockney","eleet","fudd","jethro","jibberish","ken","kenny","klaus","ky00te","LOLCAT","nethackify","newspeak","nyc","pirate","rasterman","scottish","scramble","spammer","studly","uniencode","upsidedown","line","replace","ret","prevWasMangled","i","censorCombined","word","censorRE","additionalWords","censoredString","whole","p1","p2","I_rand","b_count","b_which","dintI_rand","pooped_rand","bloody","pooped","offset","fulltext","fullstring","sentence","substr","sentenceStr","trim","iOrWe","indexOfI","search","indexOfWe","dintI","from","to","before","all","keep","reverse","avast","fakeRand","stub","chance","shouts","repeat","roll","BW","SP","EW","simpleSameCapReplacer","r","expletive","count","which","SMILE","PURR","ATTA","YNNA","YSSA","ONNA","WYFFA","NA","MEOW","SPACE","$row","rng","swap","$aref","$n","$m","$tmp","insert_adjacent","$pos","$let","$newlet","$i","$before","$after","get_adjacent","splice","originalLine","$lets","$strlen","$x","CAP","WCAP","COMP","str1","str2","WCOMP","expansions","source","fullMatch","firstParen","expandedRE","find","lastFn","originalText","prng","max","seed","randPct","oneOf","strings","line_of_yelling","str","$lines","for_free","$hits","$spam","replacers","results","lineSoFar","changedLine","filter","x","spam_phrases","end","n","was","mutators","reduce","newLine","fn","kennyTranslationTable","$a","$b","$c","$kenny","$char","$foo","generateKenny","erasures","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","d","e","f","g","h","j","l","m","o","p","q","s","t","u","v","w","y","z","_","modStr","Math","floor","options","repl","acc","origRegex","replaceWith","variants","regexText","initialUpper","boundary","firstLetter","push","allUpper","modString","all_one_letter","toScramble","scrambled","tmpstr","scramble_string","Δ","ם","String","fromCharCode","filters","Object","keys","talkLike","App","React","useState","filterName","setFilterName","plainText","setPlainText","className","style","margin","href","autoFocus","value","onChange","target","filterOption","rows","cols","console","log","ReactDOM","render","document","getElementById"],"mappings":"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ACA,SACA,MACA,SACA,SACA,OACA,QACA,QACA,OACA,QACA,OACA,QACA,SACA,QACA,OACA,SACA,YACA,SACA,QACA,OACA,WACA,OACA,QACA,OACA,UACA,QACA,QACA,SACA,MACA,OACA,OACA,OACA,SACA,UACA,OACA,QACA,UACA,WACA,OACA,OACA,UACA,QACA,OACA,SACA,OACA,QACA,MACA,MACA,SACA,OACA,WACA,SACA,QACA,OACA,QACA,OACA,OACA,MACA,WACA,QACA,UACA,QACA,OACA,SACA,OACA,YACA,QACA,SACA,SACA,QACA,aACA,OACA,MACA,UACA,OACA,QACA,WACA,UACA,WACA,UACA,QACA,OACA,OACA,OACA,OACA,SACA,cACA,SACA,QACA,YACA,UACA,OACA,OACA,SACA,aACA,OACA,WACA,UACA,WACA,eACA,UACA,OACA,OACA,UACA,UACA,MACA,SACA,QACA,OACA,YACA,MACA,OACA,OACA,UAMCrD,KAAI,SAACsD,GAAD,OACHzC,EAAGyC,EAAM,6BAA8B,iCAExChC,KAAK,KAGFiC,EAAW,IAAI1E,OAAJ,cAAkBwE,EAAlB,UAA0C,MAoB3DpD,EAAOC,QAAU,CAAEuB,OAZnB,SAAgB1C,EAAgByE,GAC9B,IAAMC,EAAiB1E,EAAekE,QAAQM,EAAU,YACxD,OAAIC,EACKC,EAAeR,QACpB,IAAIpE,OAAJ,cAAkB2E,EAAgBlC,KAAK,KAAvC,WAAsD,MACtD,YAGKmC,K,cC/EXxD,EAAOC,QAAU,CAAEwB,KA9EnB,SAAcZ,GAGZ,OACEA,EAIGmC,QAAQ,eAAe,SAAUS,EAAOC,EAAIC,GAC3C,MAAyB,OAArBD,EAAGlD,cACEiD,EAEP,UAAUC,EAAV,cAAkBC,MAKrBX,QAAQ,UAAW,QACnBA,QAAQ,UAAW,OAGnBA,QAAQ,SAAU,QAIlBA,QAAQ,SAAS,SAACtD,GAAD,MAAsB,MAAVA,EAAgB,IAAM,OACnDsD,QAAQ,eAAe,SAACS,EAAOC,EAAIC,GAAZ,OAAoBD,EAAKC,IAAO,IAAM,IAAM,OAEnEX,QAAQ,KAAM,MAEdA,QAAQ,aAAc,UAItBA,QAAQ,iBAAkB,SAG1BA,QAAQ,OAAQ,KAChBA,QAAQ,OAAQ,KAGhBA,QAAQ,QAAS,QACjBA,QAAQ,OAAQ,OAChBA,QAAQ,OAAQ,OAChBA,QAAQ,WAAW,SAACtD,GACnB,OAAQA,GACN,IAAK,IACH,MAAO,IACT,IAAK,IACH,MAAO,IACT,IAAK,IACH,MAAO,IACT,IAAK,IACH,MAAO,QAKZsD,QAAQ,WAAY,KACpBA,QAAQ,WAAY,KAEpBA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,MAGhBA,QAAQ,MAAO,MAIfA,QAAQ,0BAA2B,QAGnCA,QAAQ,aAAc,0B,gBC7E7B,IAAQzE,EAAcgD,EAAQ,GAAtBhD,UAqMRyB,EAAOC,QAAU,CAAEyB,QA7LnB,SAAiBb,GACf,IAAM+C,EAASrF,IASXsF,EAAU,EACVC,EAAU,EAiBRC,EAAaxF,IAgDbyF,EAAczF,IAYpB,OACEsC,EAEGmC,QAAQ,eAAe,SAACtD,GAAD,gBAAcA,GAAd,OA/E5B,WACE,GAAImE,IAAY,IAAM,EACpB,OAAQC,IAAY,GAClB,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,WAGb,MAAO,GAkEyCG,OAE7CjB,QAAQ,aAAc,QACtBA,QAAQ,aAAc,QAEtBA,QAAQ,aAAc,UACtBA,QAAQ,aAAc,UAEtBA,QAAQ,cAAc,kBAtB3B,WACE,OAAQgB,IAAgB,GACtB,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,cACT,QACE,MAAO,WAeoBE,MAE5BlB,QAAQ,4BAA6B,OAErCA,QAAQ,WAAY,OAEpBA,QAAQ,oBAAqB,OAE7BA,QAAQ,SAAU,SAClBA,QAAQ,SAAU,SAElBA,QAAQ,UAAW,KAEnBA,QAAQ,iBAAkB,QAE1BA,QAAQ,UAAW,MAEnBA,QAAQ,UAAW,OAEnBA,QAAQ,UAAW,MAEnBA,QAAQ,qBAAsB,MAE9BA,QAAQ,4BAA4B,iBAAM,WAE1CA,QAAQ,UAAU,kBAzHjBY,IAAW,IAAM,EACZ,KAEA,OAwHNZ,QAAQ,qBAAsB,UAE9BA,QAAQ,sBAAuB,WAE/BA,QAAQ,gBAAiB,SAEzBA,QAAQ,cAAe,SAEvBA,QAAQ,aAAc,OAEtBA,QAAQ,uBAAwB,KAEhCA,QAAQ,0BAA2B,OAEnCA,QAAQ,SAAU,QAElBA,QAAQ,YAAa,QAErBA,QAAQ,aAAc,OAEtBA,QAAQ,cAAe,SAEvBA,QAAQ,4BAA6B,KAErCA,QAAQ,SAAU,QAElBA,QAAQ,cAAe,QAEvBA,QAAQ,gBAAiB,SAEzBA,QAAQ,2BAA4B,SAEpCA,QAAQ,SAAU,OAElBA,QAAQ,oBAAqB,SAE7BA,QAAQ,OAAQ,OAEhBA,QAAQ,OAAQ,QAEhBA,QAAQ,eAAgB,SAExBA,QAAQ,OAAQ,OAEhBA,QAAQ,gBAAiB,QAEzBA,QAAQ,SAAU,OAElBA,QAAQ,kBAAmB,UAE3BA,QAAQ,cAAe,SAEvBA,QAAQ,aAAa,SAACtD,EAAOgE,GAC5B,OAAOA,EAAK,aAGbV,QACC,aACA,SAACtD,EAAOgE,EAAIS,EAAQC,GAApB,OAAiCV,EAlJvC,SAAeS,EAAQE,GACrB,IAAIC,EAAWD,EACZE,OAAO,EAAGJ,EAAS,GACnBzE,MAAM,+BAET,GAAI4E,GAAYA,EAAS3E,QAAU2E,EAAS,GAAI,CAC9C,IAAIE,EAAcF,EAAS,GAAGG,OAI1BC,GAAQ,EACNC,EAAWH,EAAYI,OAAO,mBAClB,IAAdD,IACFD,EAAQ,KAOV,IAAMG,EAAYL,EAAYI,OAAO,+BAIrC,IAHmB,IAAfC,KAAsBH,GAASG,EAAYF,KAC7CD,EAAQ,MAENA,GAASX,IAAe,IAAM,EAGhC,OAAQW,GACN,IAAK,IACH,MAAO,YACT,IAAK,KACH,MAAO,eAIf,MAAO,IA+GmCI,CAAMX,EAAQC,S,gBClM5D,MAAgC7C,EAAQ,GAAhCd,EAAR,EAAQA,gBAAiBG,EAAzB,EAAyBA,GAErBmE,EAAO,6BACXA,GAAcA,EAAKxE,cACnB,IAAIyE,EAAK,6BACTA,GAAUA,EAAGzE,cAqBbP,EAAOC,QAAU,CAAE0B,MAnBnB,SAAed,GACb,OAAOD,EACLC,EACGmC,QAAQ,QAASvC,EAAgB,SACjCuC,QAAQ,SAAUvC,EAAgB,SACrCsE,EACAC,M,gBCdJ,IAAMvE,EAAkBc,EAAQ,GAASd,gBAkazCT,EAAOC,QAAU,CAAE4B,OA5ZnB,SAAgB/C,GACd,OACEA,EAIGkE,QAAQ,uCAAwCvC,EAAgB,UAGhEuC,QACC,6BACAvC,EAAgB,+BAGjBuC,QAAQ,eAAgBvC,EAAgB,SAIxCuC,QACC,wCACAvC,EAAgB,oBAGjBuC,QACC,gBACAvC,EAAgB,oCAGjBuC,QAAQ,wBAAyBvC,EAAgB,gBAEjDuC,QAAQ,qBAAsBvC,EAAgB,uBAG9CuC,QACC,sCACAvC,EAAgB,qBAOjBuC,QACC,uDACAvC,EAAgB,aAOjBuC,QACC,sEACAvC,EAAgB,gBAOjBuC,QACC,wDACAvC,EAAgB,oBAOjBuC,QACC,mEACAvC,EAAgB,cAIjBuC,QAAQ,gCAAiCvC,EAAgB,YAEzDuC,QAAQ,YAAavC,EAAgB,SAErCuC,QAAQ,gBAAiBvC,EAAgB,UAEzCuC,QAAQ,aAAcvC,EAAgB,UAEtCuC,QAAQ,eAAgBvC,EAAgB,aAExCuC,QAAQ,kBAAmBvC,EAAgB,cAS3CuC,QACC,wFACAvC,EAAgB,qBAGjBuC,QAAQ,gBAAiBvC,EAAgB,gBAGzCuC,QACC,wCACAvC,EAAgB,yBAGjBuC,QAAQ,cAAevC,EAAgB,eAEvCuC,QAAQ,eAAgBvC,EAAgB,gBAGxCuC,QACC,wCACAvC,EAAgB,eAKjBuC,QACC,wCACAvC,EAAgB,oBAKjBuC,QACC,wCACAvC,EAAgB,sBAGjBuC,QAAQ,eAAgBvC,EAAgB,WAExCuC,QAAQ,gBAAiBvC,EAAgB,aAIzCuC,QACC,0CACAvC,EAAgB,cAGjBuC,QAAQ,aAAcvC,EAAgB,qBAEtCuC,QAAQ,eAAgBvC,EAAgB,SAExCuC,QAAQ,gBAAiBvC,EAAgB,iBAGzCuC,QAAQ,0BAA2BvC,EAAgB,kBAEnDuC,QAAQ,cAAevC,EAAgB,oBAEvCuC,QAAQ,mBAAoBvC,EAAgB,YAE5CuC,QAAQ,WAAYvC,EAAgB,UAEpCuC,QAAQ,aAAcvC,EAAgB,WAItCuC,QACC,yCACAvC,EAAgB,YAGjBuC,QAAQ,eAAgBvC,EAAgB,YAcxCuC,QACC,2IACAvC,EAAgB,eAYjBuC,QACC,wIACAvC,EAAgB,cAMjBuC,QACC,iDACAvC,EAAgB,QAGjBuC,QAAQ,aAAcvC,EAAgB,QAEtCuC,QAAQ,0BAA2BvC,EAAgB,QAMnDuC,QACC,0DACAvC,EAAgB,QAIjBuC,QAAQ,6BAA8BvC,EAAgB,WAKtDuC,QACC,qEACAvC,EAAgB,WAGjBuC,QAAQ,aAAcvC,EAAgB,QAEtCuC,QAAQ,YAAa,MAErBA,QAAQ,UAAWvC,EAAgB,SAMnCuC,QACC,2FACA,gBAGDA,QAAQ,eAAgBvC,EAAgB,SAExCuC,QAAQ,sBAAuBvC,EAAgB,SAK/CuC,QACC,4CACAvC,EAAgB,UAKjBuC,QAAQ,uCAAwCvC,EAAgB,SAGhEuC,QAAQ,yBAA0BvC,EAAgB,QAElDuC,QAAQ,cAAevC,EAAgB,OAEvCuC,QAAQ,iBAAkBvC,EAAgB,UAG1CuC,QAAQ,6BAA8BvC,EAAgB,UAEtDuC,QAAQ,eAAgBvC,EAAgB,WAExCuC,QAAQ,kBAAmB,UAE3BA,QAAQ,iBAAkBvC,EAAgB,aAE1CuC,QAAQ,cAAevC,EAAgB,UAEvCuC,QAAQ,eAAgBvC,EAAgB,QAExCuC,QAAQ,kBAAmBvC,EAAgB,SAE3CuC,QAAQ,aAAcvC,EAAgB,QAEtCuC,QAAQ,gBAAiBvC,EAAgB,iBAEzCuC,QAAQ,qBAAsBvC,EAAgB,UAE9CuC,QAAQ,gBAAiBvC,EAAgB,iBAGzCuC,QAAQ,cAAevC,EAAgB,QAEvCuC,QAAQ,aAAcvC,EAAgB,SAGtCuC,QAAQ,kBAAmBvC,EAAgB,QAE3CuC,QAAQ,mBAAoBvC,EAAgB,WAI5CuC,QAAQ,8BAA+BvC,EAAgB,QAEvDuC,QAAQ,iBAAkBvC,EAAgB,WAE1CuC,QAAQ,gBAAiBvC,EAAgB,aAEzCuC,QAAQ,iBAAkBvC,EAAgB,cAE1CuC,QAAQ,kBAAmBvC,EAAgB,oBAG3CuC,QAAQ,4BAA6BvC,EAAgB,WAErDuC,QAAQ,iBAAkBvC,EAAgB,eAE1CuC,QAAQ,eAAgBvC,EAAgB,OAExCuC,QAAQ,UAAW,QAEnBA,QAAQ,WAAY,QAEpBA,QAAQ,UAAW,OAEnBA,QAAQ,UAAW,QAEnBA,QAAQ,cAAevC,EAAgB,QAEvCuC,QAAQ,cAAevC,EAAgB,UAEvCuC,QAAQ,cAAevC,EAAgB,QAEvCuC,QAAQ,WAAY,OAEpBA,QAAQ,cAAevC,EAAgB,YAEvCuC,QAAQ,aAAcvC,EAAgB,QAEtCuC,QAAQ,gBAAiBvC,EAAgB,OAEzCuC,QAAQ,aAAcvC,EAAgB,OAEtCuC,QAAQ,SAAU,MAElBA,QAAQ,WAAY,SAEpBA,QAAQ,YAAa,OAErBA,QAAQ,WAAY,WAEpBA,QAAQ,WAAY,OAEpBA,QAAQ,WAAY,OAIpBA,QAAQ,cAAc,SAACtD,EAAOuF,GAAR,OAAmBA,EAAS,WAalDjC,QAAQ,YAAavC,EAAgB,UACrCuC,QACC,iFACA,SAACkC,EAAKxF,GAAN,OAAgBA,EAAQ,SAOzBsD,QAAQ,2BAA2B,SAACkC,EAAKC,GAAN,OAAeA,GAAQ,QAE1DnC,QAAQ,cAAevC,EAAgB,QAYvCuC,QACC,qFACA,SAACkC,EAAKC,GAAN,OAAeA,GAAQ,QAIxBnC,QAAQ,sBAAuBvC,EAAgB,QAE/CuC,QAAQ,aAAcvC,EAAgB,SAEtCuC,QAAQ,YAAavC,EAAgB,SAErCuC,QAAQ,gBAAiB,sB,gBC/ZhC,IAAMpC,EAAKW,EAAQ,GAASX,GAqB5BZ,EAAOC,QAAU,CAAE6C,WAfnB,SAAoBjC,GAClB,OAAOD,EAGLC,EACGL,cACAQ,MAAM,MACNjB,KAAI,SAACgD,GAAD,OAAUA,EAAK/B,MAAM,IAAIoE,UAAU/D,KAAK,OAC5CA,KAAK,MACL2B,QAAQ,KALX,MAMA,mDACA,oDACAA,QAAQ,KAAM,S,gBCjBlB,IAAMnE,EAAU0C,EAAQ,GAAS1C,QAgE3BE,EAAQF,EAAQgB,gBA3DL,CACf,CAAC,MAAO,iBAAM,UACd,CAAC,QAAS,iBAAM,SAChB,CAAC,OAAQ,iBAAM,QACf,CAAC,SAAU,iBAAM,WACjB,CAAC,QAAS,iBAAM,UAChB,CAAC,KAAM,iBAAM,UACb,CAAC,KAAM,iBAAM,UACb,CAAC,IAAK,iBAAM,UACZ,CAAC,OAAQ,iBAAM,YACf,CAAC,KAAM,iBAAM,WACb,CAAC,SAAU,iBAAM,YACjB,CAAC,OAAQ,iBAAM,YACf,CAAC,OAAQ,iBAAM,YACf,CAAC,QAAS,iBAAM,SAChB,CAAC,UAAW,iBAAM,SAClB,CAAC,QAAS,iBAAM,UAChB,CAAC,MAAO,iBAAM,UACd,CAAC,MAAO,iBAAM,UACd,CAAC,QAAS,iBAAM,UAChB,CAAC,OAAQ,iBAAM,WACf,CAAC,SAAU,iBAAM,WACjB,CAAC,OAAQ,iBAAM,WACf,CAAC,SAAU,iBAAM,WACjB,CAAC,WAAY,iBAAM,SACnB,CAAC,YAAa,iBAAM,SACpB,CAAC,OAAQ,iBAAM,aACf,CAAC,OAAQ,iBAAM,UACf,CAAC,MAAO,iBAAM,SACd,CAAC,KAAM,iBAAM,SACb,CAAC,KAAM,iBAAM,SACb,CAAC,QAAS,iBAAM,WAChB,CAAC,OAAQ,iBAAM,UACf,CAAC,OAAQ,iBAAM,SACf,CAAC,OAAQ,iBAAM,SACf,CAAC,MAAO,iBAAM,SACd,CAAC,OAAQ,iBAAM,UACf,CAAC,MAAO,iBAAM,QACd,CAAC,KAAM,iBAAM,OACb,CAAC,KAAM,iBAAM,QACb,CAAC,KAAM,iBAAM,QACb,CAAC,KAAM,iBAAM,OACb,CAAC,KAAM,iBAAM,OACb,CAAC,KAAM,iBAAM,OACb,CAAC,KAAM,iBAAM,OACb,CAAC,IAAK,iBAAM,MACZ,CAAC,IAAK,iBAAM,MACZ,CAAC,KAAM,iBAAM,OACb,CAAC,IAAK,iBAAM,MACZ,CAAC,KAAM,iBAAM,MACb,CAAC,KAAM,iBAAM,MACb,CAAC,UAAW,iBAAM,WAClB,CAAC,aAAc,iBAAM,YACrB,CAAC,UAAW,iBAAM,YAClB,CAAC,UAAW,iBAAM,aAClB,CAAC,SAAU,iBAAM,WACjB,CAAC,WAAY,SAACH,GAAD,gBAAcA,EAAd,mBAafM,EAAOC,QAAU,CAAEgC,MAJnB,SAAenD,GACb,OAAOD,EAAQC,EAAgBC,M,gBCxEjC,IAAMR,EAAYgD,EAAQ,GAAShD,UA2HnC,SAAS8G,EAAMC,EAAUC,EAAMC,GAC7B,IAAMC,EAAS,CAAC,UAAD,OACHF,GADG,UAEVA,EAFU,oEAIaA,GAJb,iCAKaA,GALb,UAMVA,EANU,8BAOVA,EAPU,qBAQVA,EARU,sGAWkBA,GAXlB,gCAYYA,GAZZ,kCAcVA,EAdU,iCAeVA,EAfU,sCAgBVA,EAhBU,iDAiBMA,GAjBN,UAkBVA,EAlBU,4CAmBEA,GAnBF,2BAoBOA,GApBP,UAqBVA,EArBU,qBAwBf,OAAID,IAAaE,IAAW,EACnBC,EAAOH,IAAaG,EAAO9F,QAAU,IAErC4F,EAIXvF,EAAOC,QAAU,CAAEsC,OApJnB,SAAgBzD,GACd,IAAMwG,EAAW/G,IAEjB,OAAOO,EACJkC,MAAM,MACNjB,KAAI,SAACgD,GAAD,OACHA,EACGC,QAAQ,UAAW,MACnBA,QAAQ,YAAa,WACrBA,QAAQ,eAAgB,WACxBA,QAAQ,kBAAmB,SAC3BA,QAAQ,cAAe,UACvBA,QAAQ,YAAa,OACrBA,QAAQ,WAAY,MACpBA,QAAQ,cAAe,SACvBA,QAAQ,eAAgB,UACxBA,QAAQ,oBAAqB,YAC7BA,QAAQ,qBAAsB,aAC9BA,QAAQ,eAAgB,SACxBA,QAAQ,WAAY,QACpBA,QAAQ,WAAY,OACpBA,QAAQ,UAAW,MACnBA,QAAQ,cAAe,UACvBA,QAAQ,cAAe,UACvBA,QAAQ,aAAc,gBACtBA,QAAQ,YAAa,QACrBA,QAAQ,YAAa,QACrBA,QAAQ,WAAY,OACpBA,QAAQ,UAAW,OACnBA,QAAQ,mBAAoB,SAC5BA,QAAQ,eAAgB,UACxBA,QAAQ,eAAgB,UACxBA,QAAQ,eAAgB,WACxBA,QAAQ,gBAAiB,UACzBA,QAAQ,WAAY,OACpBA,QAAQ,eAAgB,WACxBA,QAAQ,cAAe,UACvBA,QAAQ,UAAW,MACnBA,QAAQ,aAAc,QACtBA,QAAQ,aAAc,SACtBA,QAAQ,aAAc,SACtBA,QAAQ,YAAa,SACrBA,QAAQ,YAAa,QACrBA,QAAQ,YAAa,QACrBA,QAAQ,aAAc,WACtBA,QAAQ,WAAY,UACpBA,QAAQ,WAAY,UACpBA,QAAQ,cAAe,UACvBA,QAAQ,YAAa,UACrBA,QAAQ,WAAY,OACpBA,QAAQ,YAAa,WACrBA,QAAQ,gBAAiB,WACzBA,QAAQ,YAAa,WACrBA,QAAQ,WAAY,oBACpBA,QAAQ,WAAY,qBACpBA,QAAQ,aAAc,uBACtBA,QAAQ,UAAW,mBACnBA,QAAQ,WAAY,oBACpBA,QAAQ,aAAc,SACtBA,QAAQ,cAAe,UACvBA,QAAQ,WAAY,cACpBA,QAAQ,WAAY,SACpBA,QAAQ,aAAc,oBACtBA,QAAQ,YAAa,QACrBA,QAAQ,YAAa,OACrBA,QAAQ,aAAc,QACtBA,QAAQ,cAAe,SACvBA,QAAQ,eAAgB,UACxBA,QAAQ,eAAgB,SACxBA,QAAQ,gBAAiB,UACzBA,QAAQ,WAAY,QACpBA,QAAQ,YAAa,SACrBA,QAAQ,aAAc,YACtBA,QAAQ,cAAe,aACvBA,QAAQ,WAAY,QACpBA,QAAQ,eAAgB,eACxBA,QAAQ,gBAAiB,kBACzBA,QAAQ,WAAY,kBACpBA,QAAQ,eAAgB,WACxBA,QAAQ,aAAc,QACtBA,QAAQ,YAAa,OACrBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,MACnBA,QAAQ,WAAY,MACpBA,QAAQ,WAAY,MACpBA,QAAQ,YAAa,MACrBA,QAAQ,YAAa,MACrBA,QAAQ,SAAU,OAClBA,QAAQ,UAAW,QACnBA,QAAQ,iBAAiB,kBAAcqC,EAAMC,EAAD,wCAAqB,MAEjEtC,QAAQ,mBAAmB,kBAAcqC,EAAMC,EAAD,wCAAqB,MACnEtC,QAAQ,UAAU,kBAS3B,SAAcsC,GACZ,OAAIA,IAAa,EAAI,EACZ,IAAII,OAAQJ,IAAa,EAAK,GAE9B,IAbsBK,CAAKL,SAEjCjE,KAAK,S,gBClGV,MAA8CE,EAAQ,GAA9C1C,EAAR,EAAQA,QAASwB,EAAjB,EAAiBA,QAASI,EAA1B,EAA0BA,gBAKpBmF,EAAK,SACLC,EAAK,SACLC,EAAK,eAcX,SAASC,EAAsBzF,GAC7B,IAAM0F,EAAI1F,EAAYV,MAAM,GAC5B,OAAO,SAAUF,GACf,OAAOA,EAAM,GAAKsG,GAOtB,IAAMlG,EAAW,CACf,CAAC,WAAY,SAACJ,GAAD,MAAyB,MAAbA,EAAM,GAAa,QAAU,UACtD,CAAC,aAAcqG,EAAsB,YACrC,CAAC,UAAWA,EAAsB,QAClC,CAAC,UAAWA,EAAsB,QAClC,CAAC,YAAa,SAACrG,GAAD,OAAWW,EAAQX,EAAD,WAAYA,EAAME,OAAO,OACzD,CAAC,UAAWa,EAAgB,QAC5B,CAAC,MAAD,OAAOoF,EAAP,gBAAiBA,EAAjB,MAAyB,iBAAM,YAC/B,CAAC,QAAD,OAASA,EAAT,MAAiB,iBAAM,UACvB,CAAC,OAAD,OAAQA,EAAR,MAAgB,iBAAM,UACtB,CAAC,IAAD,OAAKA,EAAL,OAAc,iBAAM,SACpB,CAAC,SAAD,OAAUA,EAAV,cAAkBA,EAAlB,WAA+B,SAACnG,GAAD,OAAWA,EAAM,GAAN,KAAkBA,EAAME,OAAO,KACzE,CAAC,SAAD,OAAUiG,EAAV,OAAmBE,EAAsB,SACzC,CAAC,SAAUA,EAAsB,QACjC,CAAC,SAAD,OAAUF,EAAV,cAAkBA,EAAlB,OAA2BE,EAAsB,aACjD,CAAC,UAAWA,EAAsB,SAClC,CAAC,WAAYA,EAAsB,SACnC,CAAC,eAAgB,iBAAM,QACvB,CAAC,QAAS,iBAAM,UAChB,CAAC,QAAD,OAASD,EAAT,KAAgB,iBAAM,OACtB,CAAC,SAAD,OAAUA,EAAV,KAAiB,iBAAM,QACvB,CAAC,sDAEC,SAACpG,GAAD,OAAWA,EAAM,GAAK,KAAOA,EAAME,OAAO,KAE5C,CAAC,sBAAuB,SAACF,GAAD,OAAWA,EAAM,GAAK,MAAQA,EAAME,OAAO,KACnE,CAAC,YAAD,OAAakG,EAAb,KAAoBrF,EAAgB,QACpC,CAAC,QAASA,EAAgB,QAC1B,CAAC,QAASA,EAAgB,QAC1B,CAAC,OAAQ,0BACT,CAAC,uBAAwB,SAACf,GAAD,mBAAiBA,EAAME,OAAO,MACvD,CAAC,OAAQ,iBAAM,SACf,CAAC,SAAUa,EAAgB,SAC3B,CAAC,YAAasF,EAAsB,YACpC,CAAC,GAAD,OAAIH,EAAJ,SAAe,iBAAM,WACrB,CAAC,GAAD,OAAIA,EAAJ,gBAAcE,EAAd,KAAqB,iBAAM,SAC3B,CAAC,YAAaC,EAAsB,YACpC,CAAC,SAAU,SAACrG,GAAD,gBAAcA,EAAM,GAApB,kBACX,CAAC,WAAY,SAACA,GAAD,gBAAcA,EAAM,GAApB,gBACb,CAAC,IAAK,iBAAM,YACZ,CAAC,WAAY,SAACA,EAAD,OAAUuG,EAAV,EAAUA,UAAV,gBAA6BvG,GAA7B,OAAqCuG,QAG9ClH,EAAQF,EAAQgB,gBAAgBC,GA2BtCE,EAAOC,QAAU,CAAEqC,IArBnB,SAAaxD,GACX,IAAIoH,EAAQ,EACRC,EAAQ,EAgBZ,OAAOtH,EAAQC,EAAgBC,EAAO,CAAEkH,UAdtB,WAChB,OAAIC,IAAU,IAAM,EACX,CACL,SACA,UACA,uBACA,YACA,iBACAC,IAAU,GAEL,S,gBC1Fb,IAAQtH,EAAY0C,EAAQ,GAApB1C,QAwUFE,EAAQF,EAAQgB,gBAnUL,CACf,CAAC,SAAU,iBAAM,qBACjB,CAAC,aAAc,iBAAM,8BACrB,CAAC,aAAc,iBAAM,8BACrB,CAAC,WAAY,iBAAM,4BACnB,CAAC,WAAY,iBAAM,4BACnB,CAAC,WAAY,iBAAM,oBACnB,CAAC,UAAW,iBAAM,cAClB,CAAC,aAAc,iBAAM,kBACrB,CACE,OACA,SAACH,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,qBACT,KAAK,EACH,MAAO,cAIf,CAAC,OAAQ,iBAAM,kBACf,CAAC,QAAS,iBAAM,mBAChB,CAAC,OAAQ,iBAAM,eACf,CAAC,QAAS,iBAAM,aAChB,CAAC,WAAY,iBAAM,aACnB,CAAC,QAAS,iBAAM,aAChB,CAAC,QAAS,iBAAM,aAChB,CAAC,UAAW,iBAAM,cAClB,CAAC,UAAW,iBAAM,cAClB,CAAC,KAAM,iBAAM,OACb,CAAC,MAAO,iBAAM,QACd,CAAC,OAAQ,iBAAM,QACf,CAAC,OAAQ,iBAAM,QACf,CAAC,WAAY,iBAAM,SACnB,CAAC,WAAY,iBAAM,SACnB,CAAC,MAAO,iBAAM,QACd,CAAC,MAAO,iBAAM,QACd,CAAC,QAAS,iBAAM,SAChB,CAAC,QAAS,iBAAM,SAChB,CAAC,SAAU,iBAAM,UACjB,CAAC,WAAY,iBAAM,UACnB,CACE,OACA,SAACO,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,gBACT,QACE,OAAOO,KAIf,CAAC,MAAO,SAACA,GAAD,OAAWA,IACnB,CACE,QACA,SAACA,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,iBACT,QACE,OAAOO,KAIf,CAAC,UAAW,SAACA,GAAD,OAAWA,IACvB,CACE,OACA,SAACA,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,iBACT,QACE,OAAOO,KAIf,CAAC,UAAW,SAACA,GAAD,OAAWA,IACvB,CAAC,WAAY,SAACA,GAAD,OAAWA,IACxB,CAAC,UAAW,SAACA,GAAD,OAAWA,IACvB,CAAC,WAAY,SAACA,GAAD,OAAWA,IACxB,CAAC,OAAQ,iBAAM,OACf,CAAC,QAAS,iBAAM,QAChB,CAAC,UAAW,iBAAM,QAClB,CAAC,OAAQ,iBAAM,OACf,CAAC,UAAW,SAACA,GAAD,OAAWA,IACvB,CAAC,WAAY,SAACA,GAAD,OAAWA,IACxB,CAAC,MAAO,SAACA,GAAD,OAAWA,IACnB,CAAC,MAAO,SAACA,GAAD,OAAWA,IACnB,CAAC,QAAS,iBAAM,UAChB,CAAC,OAAQ,iBAAM,UACf,CAAC,cAAe,iBAAM,aACtB,CAAC,cAAe,iBAAM,aACtB,CAAC,SAAU,iBAAM,UACjB,CAAC,SAAU,iBAAM,UACjB,CAAC,QAAS,iBAAM,UAChB,CAAC,QAAS,iBAAM,UAChB,CAAC,WAAY,iBAAM,UACnB,CAAC,WAAY,iBAAM,WACnB,CAAC,UAAW,iBAAM,WAClB,CAAC,WAAY,iBAAM,YACnB,CAAC,aAAc,iBAAM,SACrB,CAAC,aAAc,iBAAM,SACrB,CAAC,gBAAiB,iBAAM,aACxB,CAAC,gBAAiB,iBAAM,aACxB,CAAC,eAAgB,iBAAM,YACvB,CAAC,eAAgB,iBAAM,YACvB,CAAC,cAAe,iBAAM,YACtB,CAAC,cAAe,iBAAM,YACtB,CAAC,gBAAiB,iBAAM,YACxB,CAAC,gBAAiB,iBAAM,YACxB,CAAC,eAAgB,iBAAM,aACvB,CAAC,eAAgB,iBAAM,aACvB,CAAC,eAAgB,iBAAM,YACvB,CAAC,eAAgB,iBAAM,YACvB,CAAC,aAAc,iBAAM,aACrB,CAAC,aAAc,iBAAM,aACrB,CAAC,OAAQ,iBAAM,QACf,CAAC,OAAQ,iBAAM,QACf,CAAC,OAAQ,iBAAM,QACf,CAAC,OAAQ,iBAAM,QACf,CAAC,SAAU,iBAAM,QACjB,CAAC,SAAU,iBAAM,QACjB,CAAC,SAAU,iBAAM,WACjB,CAAC,QAAS,iBAAM,UAChB,CAAC,QAAS,iBAAM,UAChB,CAAC,SAAU,iBAAM,WACjB,CAAC,SAAU,iBAAM,WACjB,CAAC,SAAU,iBAAM,WACjB,CAAC,SAAU,iBAAM,WACjB,CAAC,UAAW,iBAAM,WAClB,CAAC,UAAW,iBAAM,WAClB,CAAC,UAAW,iBAAM,WAClB,CAAC,UAAW,iBAAM,WAClB,CAAC,SAAU,iBAAM,WACjB,CAAC,SAAU,iBAAM,WACjB,CAAC,SAAU,iBAAM,UACjB,CAAC,SAAU,iBAAM,UACjB,CAAC,OAAQ,iBAAM,QACf,CAAC,OAAQ,iBAAM,QACf,CAAC,WAAY,iBAAM,YACnB,CAAC,WAAY,iBAAM,YACnB,CAAC,YAAa,iBAAM,YACpB,CAAC,YAAa,iBAAM,YACpB,CAAC,UAAW,iBAAM,YAClB,CAAC,UAAW,iBAAM,YAClB,CAAC,UAAW,iBAAM,WAClB,CAAC,SAAU,iBAAM,WACjB,CAAC,QAAS,iBAAM,WAChB,CAAC,OAAQ,iBAAM,WACf,CAAC,WAAY,iBAAM,WACnB,CAAC,UAAW,iBAAM,WAClB,CAAC,UAAW,iBAAM,WAClB,CAAC,SAAU,iBAAM,WACjB,CAAC,YAAa,iBAAM,WACpB,CAAC,WAAY,iBAAM,WACnB,CAAC,YAAa,iBAAM,WACpB,CAAC,WAAY,iBAAM,WACnB,CAAC,QAAS,iBAAM,WAChB,CAAC,OAAQ,iBAAM,WACf,CAAC,SAAU,iBAAM,WACjB,CAAC,QAAS,iBAAM,WAChB,CAAC,QAAS,iBAAM,WAChB,CAAC,OAAQ,iBAAM,WACf,CAAC,OAAQ,iBAAM,SACf,CAAC,OAAQ,iBAAM,SACf,CAAC,YAAa,iBAAM,WACpB,CAAC,YAAa,iBAAM,WACpB,CAAC,cAAe,iBAAM,YACtB,CAAC,cAAe,iBAAM,YACtB,CACE,aACA,SAACA,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,aACT,KAAK,EACH,MAAO,iBAIf,CAAC,cAAe,iBAAM,iBACtB,CAAC,UAAW,iBAAM,gBAClB,CAAC,WAAY,iBAAM,iBACnB,CAAC,UAAW,iBAAM,eAClB,CAAC,cAAe,iBAAM,iBACtB,CAAC,UAAW,iBAAM,iBAClB,CAAC,SAAU,iBAAM,cACjB,CAAC,WAAY,iBAAM,aACnB,CAAC,UAAW,iBAAM,gBAClB,CAAC,UAAW,iBAAM,kBAClB,CAAC,WAAY,iBAAM,iBACnB,CAAC,YAAa,iBAAM,oBACpB,CAAC,cAAe,iBAAM,eACtB,CAAC,YAAa,iBAAM,mBACpB,CAAC,YAAa,iBAAM,eACpB,CAAC,aAAc,iBAAM,kBACrB,CAAC,aAAc,iBAAM,iBACrB,CAAC,cAAe,iBAAM,iBACtB,CAAC,YAAa,iBAAM,iBACpB,CAAC,WAAY,iBAAM,kBACnB,CACE,2BACA,SAACO,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,gBAIf,CAAC,uBAAwB,iBAAM,gBAC/B,CAAC,+BAAgC,iBAAM,iBACvC,CAAC,uBAAwB,iBAAM,gBAC/B,CAAC,UAAW,iBAAM,kBAClB,CAAC,YAAa,iBAAM,kBACpB,CAAC,OAAQ,iBAAM,mBACf,CAAC,UAAW,iBAAM,2BAClB,CAAC,UAAW,iBAAM,2BAClB,CAAC,WAAY,iBAAM,2BACnB,CAAC,WAAY,iBAAM,2BACnB,CAAC,QAAS,iBAAM,wBAChB,CAAC,OAAQ,iBAAM,uBACf,CAAC,OAAQ,iBAAM,uBACf,CAAC,cAAe,iBAAM,YACtB,CACE,SACA,SAACO,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,WAIf,CAAC,MAAO,iBAAM,SACd,CAAC,MAAO,iBAAM,SACd,CAAC,KAAM,iBAAM,OACb,CAAC,KAAM,iBAAM,OACb,CAAC,MAAO,iBAAM,gBACd,CACE,MACA,SAACO,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,cACT,KAAK,EACH,MAAO,gBACT,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,gBAIf,CAAC,QAAS,iBAAM,kBAChB,CAAC,KAAM,iBAAM,MACb,CAAC,KAAM,iBAAM,MACb,CAAC,KAAM,iBAAM,MACb,CAAC,KAAM,iBAAM,OACb,CAAC,uBAAwB,SAACO,GAAD,OAAWA,IACpC,CAAC,YAAa,SAACA,GAAD,OAAWA,IACzB,CAAC,YAAa,SAACA,GAAD,OAAWA,IACzB,CAAC,YAAa,SAACA,GAAD,OAAWA,IACzB,CAAC,gBAAiB,SAACA,GAAD,OAAWA,IAC7B,CAAC,SAAU,iBAAM,UACjB,CAAC,SAAU,iBAAM,UAEjB,CAAC,OAAQ,iBAAM,SACf,CACE,OACA,SAACA,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,IACf,KAAK,EACH,MAAO,6BACT,KAAK,EACH,MAAO,gDACT,KAAK,EACH,MAAO,yCACT,KAAK,EACH,MAAO,yCACT,QACE,OAAOO,KAIf,CACE,OACA,SAACA,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,gBAIf,CACE,KACA,SAACO,EAAD,GACE,QAAQP,EADW,EAAXA,QACS,GACf,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,aACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,WACT,KAAK,EACH,OAAOO,OAYjBM,EAAOC,QAAU,CAAE8B,IAJnB,SAAajD,GACX,OAAOD,EAAQC,EAAgBC,M,gBCjVjC,IAAQF,EAAY0C,EAAQ,GAApB1C,QAIFuH,EAAQ,MACRC,EAAO,OAEPC,EAAO,OACPC,EAAO,OACPC,EAAO,OACPC,EAAO,OACPC,EAAQ,QAURC,EAAK,OAqDX,IAAM7G,EAAW,CACf,CAAC,IAAK,iBAAM,MACZ,CAAC,IAAK,iBAAM,MACZ,CAAC,MAAO,iBAAM,MACd,CAAC,KAAM,iBAAM,MACb,CAAC,OAAQ,iBA7EE,YA8EX,CAAC,QAAS,iBA7EE,aA8EZ,CAAC,QAAS,kBAAMsG,IAChB,CAAC,OAAQ,kBAAMA,IACf,CAAC,QAAS,kBAAMA,IAChB,CAAC,UAAW,kBAAMA,IAClB,CAAC,KAAM,kBAAMC,IACb,CAAC,aAAc,kBAAMA,IACrB,CAAC,aAAc,iBAjFL,QAkFV,CAAC,2BAA4B,SAAC3G,EAAD,UA7D/B,SAAcP,GAGZ,OAFeA,IAAS,GAGtB,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,OACT,KAAK,EACL,KAAK,EACH,MAAO,OAmDuCyH,CAArB,EAAUzH,QACvC,CAAC,OAAQ,kBAAMmH,IACf,CAAC,SAAU,kBAAMA,IACjB,CAAC,OAAQ,kBAAMC,IACf,CAAC,SAAU,kBAAMA,IACjB,CAAC,OAAQ,kBAAMC,IACf,CAAC,SAAU,kBAAMA,IACjB,CAAC,QAAS,kBAAMA,IAChB,CAAC,OAAQ,kBAAMC,IACf,CAAC,SAAU,kBAAMA,IACjB,CAAC,SAAU,kBAAMC,IACjB,CAAC,WAAY,kBAAMA,IACnB,CAAC,SAAU,iBAxFC,UAyFZ,CAAC,qBAAsB,iBAxFb,UAyFV,CAAC,aAAc,iBAxFJ,UAyFX,CAAC,oBAAqB,iBAxFb,SAyFT,CAAC,aAAc,iBAxFL,SAyFV,CAAC,YAAa,iBAxFL,QAyFT,CAAC,oBAAqB,iBAxFb,SAyFT,CAAC,mBAAoB,iBAxFZ,SAyFT,CAAC,qBAAsB,iBAxFb,WAyFV,CAAC,MAAO,kBAAMC,IACd,CAAC,OAAQ,kBAAMA,IACf,CAAC,QAAS,SAACjH,EAAD,UAjEZ,SAAe4F,GACb,KAAIA,IAAa,GAAK,GAoBpB,MAAO,IAjBP,OAFeA,IAAa,GAG1B,KAAK,EACH,MAAO,qBAET,KAAK,EACH,MAAO,oBAET,KAAK,EACH,MAAO,eAET,KAAK,EACH,MAAO,YAET,KAAK,EACH,MAAO,cA+CkBuB,CAArB,EAAU1H,QACpB,CAAC,IAAK,iBAAM,QAGRJ,EAAQF,EAAQgB,gBAAgBC,GAUtCE,EAAOC,QAAU,CAAEiC,OAHnB,SAAgBpD,GACd,OAAOD,EAAQC,EAAgBC,M,gBC5HjC,IAAQR,EAAcgD,EAAQ,GAAtBhD,UAEFuI,EAAO,iCAqHb9G,EAAOC,QAAU,CAAEuC,UA9GnB,SAAmB1D,GACjB,IAAMiI,EAAMxI,IACN+G,EAAW,kBAAOyB,IAAQ,IAAO,KASvC,SAASC,EAAKC,EAAOC,EAAIC,GACvB,GACED,GAAM,GACNA,EAAKD,EAAMtH,QACXwH,GAAM,GACNA,EAAKF,EAAMtH,QACmB,OAA9BsH,EAAMC,GAAIxH,MAAM,WACc,OAA9BuH,EAAME,GAAIzH,MAAM,UAChB,CACA,IAAI0H,EAAOH,EAAMC,GACjBD,EAAMC,GAAMD,EAAME,GAClBF,EAAME,GAAMC,GAWhB,SAASC,EAAgBJ,EAAOK,EAAMC,GACpC,IAAIC,EAeN,SAAsBD,GACpB,GAA4B,OAAxBA,EAAK7H,MAAM,SACb,OAAO,EAGT,IAAI+H,EAAKX,EAAK3F,QAAQoG,GAClBG,EAAUZ,EAAKW,EAAK,GACpBE,EAASb,EAAKW,EAAK,GAEvB,MAAgB,MAAZC,GAAoBpC,IAAaA,KAAyB,MAAXqC,EAC1CA,EAEAD,EA3BKE,CAAaL,GAE3B,OAAKC,GAILP,EAAMY,OAAOP,EAAO,EAAG,EAAGE,GACnB,GAJE,EA4BX,OAAO1I,EACJkC,MAAM,MACNjB,KAAI,SAAC+H,GAkBJ,IAjBA,IAAI/E,EAAO+E,EACRtH,cACAwC,QAAQ,WAAY,KACpBA,QAAQ,cAAe,OACvBA,QAAQ,eAAgB,QACxBA,QAAQ,cAAe,OACvBA,QAAQ,YAAa,OACrBA,QAAQ,iBAAkB,MAC1BA,QAAQ,YAAa,QACrBA,QAAQ,aAAc,OACtBA,QAAQ,cAAe,SACvBA,QAAQ,aAAc,cACtBA,QAAQ,aAAc,QACtBA,QAAQ,MAAO,OACfA,QAAQ,OAAQ,OACf+E,EAAQhF,EAAK/B,MAAM,IACnBgH,EAAUjF,EAAKpD,OAAS,EACnBsI,EAAK,EAAGA,EAAKD,EAASC,IAAM,CACnC,GAAI3C,IAAa,IACf0B,EAAKe,EAAOE,EAAIA,EAAK,QAGvB,GAAI3C,IAAa,IAAqB,MAAdyC,EAAME,GAC5BjB,EAAKe,EAAOE,EAAK,EAAGA,EAAK,QAG3B,GAAI3C,IAAa,IAEf0C,GADWX,EAAgBU,EAAOE,EAAIF,EAAME,SAI1C3C,IAAa,MACfyC,EAAMF,OAAOI,EAAI,GACjBD,KAIJ,OAAOD,EAAM1G,KAAK,OAEnBA,KAAK,S,2BCrGV,EAAmDE,EAAQ,GAAlC2G,EAAzB,EAAQzH,gBAAsBJ,EAA9B,EAA8BA,QAASxB,EAAvC,EAAuCA,QAMvC,SAASsJ,EAAK7H,GAQZ,OAJA,SAAcZ,GACZ,OAAOA,EAAM,GAAKW,EAAQX,EAAME,MAAM,GAAIU,IAW9C,SAAS8H,EAAKC,EAAMC,GAQlB,OAJA,SAAc5I,GACZ,OAAOW,EAAQX,EAAO2I,GAAQhI,EAAQX,EAAO4I,IAWjD,SAASC,EAAMF,EAAMC,GAUnB,OANA,SAAe5I,GACb,OACEA,EAAM,GAAKW,EAAQX,EAAME,MAAM,GAAIyI,GAAQhI,EAAQX,EAAME,MAAM,GAAI0I,IAgmBzE,IAtlBA,IAAME,EAAa,CACjB,CAAC,QAAS,qCAAqCC,QAC/C,CAAC,OAAQ,6BAA6BA,QACtC,CAAC,MAAO,eAAeA,QACvB,CAAC,QAAS,8BAA8BA,QACxC,CACE,QACA,wFACGA,QAEL,CAAC,KAAM,eAAeA,QACtB,CAAC,IAAK,wCAA+BA,QACrC,CAAC,KAAM,YAAYA,SA6jBf1J,EAhjBW,CACf,CAAC,mCAAmC0J,OAAQP,EAAI,SAChD,CAAC,4CAA4CO,OAAQP,EAAI,SACzD,CAAC,gDAAgDO,OAAQP,EAAI,SAC7D,CAAC,2CAA2CO,OAAQP,EAAI,SACxD,CAAC,uCAAuCO,OAAQP,EAAI,SACpD,CAAC,UAAUO,OAAQP,EAAI,SAEvB,CAAC,kCAAkCO,OAAQ,MAC3C,CAAC,iCAAiCA,OAAQ,MAC1C,CAAC,wCAAwCA,OAAQ,MACjD,CAAC,eAAeA,OAAQ,MACxB,CAAC,cAAcA,OAAQP,EAAI,mBAE3B,CAAC,YAAYO,OAAQP,EAAI,SACzB,CAAC,cAAcO,OAAQP,EAAI,aAE3B,CAAC,gDAAgDO,OAAQP,EAAI,SAC7D,CAAC,kDAAkDO,OAAQP,EAAI,WAC/D,CAAC,oCAAoCO,OAAQP,EAAI,YAEjD,CAAC,WAAWO,OAAQ,SAAC/I,GAAD,OAAWA,IAC/B,CAAC,aAAa+I,OAAQ,MACtB,CAAC,eAAeA,OAAQ,MACxB,CAAC,iBAAiBA,OAAQ,MAC1B,CAAC,mBAAmBA,OAAQ,MAC5B,CAAC,gBAAgBA,OAAQP,EAAI,eAE7B,CAAC,kBAAkBO,OAAQP,EAAI,YAE/B,CAAC,SAASO,OAAQ,MAClB,CAAC,uBAAuBA,OAAQ,MAChC,CAAC,mBAAmBA,OAAQP,EAAI,aAChC,CAAC,eAAeO,OAAQN,EAAK,aAE7B,CAAC,uCAAuCM,OAAQP,EAAI,aAEpD,CAAC,oBAAoBO,OAAQN,EAAK,WAClC,CAAC,qBAAqBM,OAAQN,EAAK,WACnC,CAAC,qBAAqBM,OAAQN,EAAK,WACnC,CAAC,wBAAwBM,OAAQN,EAAK,WACtC,CAAC,sBAAsBM,OAAQN,EAAK,eACpC,CAAC,uBAAuBM,OAAQN,EAAK,sBACrC,CAAC,yBAAyBM,OAAQN,EAAK,sBACvC,CAAC,qBAAqBM,OAAQN,EAAK,sBACnC,CAAC,oBAAoBM,OAAQN,EAAK,sBAQlC,CAAC,oBAAoBM,OAAQN,EAAK,YAClC,CAAC,qBAAqBM,OAAQN,EAAK,YACnC,CAAC,oBAAoBM,OAAQP,EAAI,YACjC,CAAC,aAAaO,OAAQP,EAAI,WAC1B,CAAC,qBAAqBO,OAAQN,EAAK,WACnC,CAAC,oBAAoBM,OAAQP,EAAI,WACjC,CAAC,uBAAuBO,OAAQN,EAAK,WACrC,CAAC,cAAcM,OAAQP,EAAI,WAE3B,CAAC,sBAAsBO,OAAQP,EAAI,mBACnC,CAAC,qCAAqCO,OAAQP,EAAI,mBAClD,CACE,mDAAmDO,OACnDP,EAAI,kBAGN,CAAC,YAAYO,OAAQP,EAAI,YAEzB,CAAC,sBAAsBO,OAAQP,EAAI,aACnC,CAAC,qBAAqBO,OAAQP,EAAI,aAClC,CAAC,oBAAoBO,OAAQP,EAAI,aACjC,CAAC,oBAAoBO,OAAQP,EAAI,aACjC,CAAC,oBAAoBO,OAAQP,EAAI,cAEjC,CAAC,oBAAoBO,OAAQ,SAAC/I,GAAD,OAAWA,IAExC,CAAC,aAAa+I,OAAQF,EAAM,SAAU,WACtC,CAAC,aAAaE,OAAQL,EAAK,SAAU,WACrC,CAAC,uBAAuBK,OAAQL,EAAK,SAAU,WAC/C,CAAC,sBAAsBK,OAAQL,EAAK,SAAU,WAC9C,CAAC,YAAYK,OAAQL,EAAK,SAAU,YAEpC,CAAC,aAAaK,OAAQ,MACtB,CAAC,iBAAiBA,OAAQ,MAC1B,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,eAAeA,OAAQ,iBAAM,uBAC9B,CAAC,oBAAoBA,OAAQ,iBAAM,uBACnC,CAAC,kBAAkBA,OAAQ,iBAAM,uBAEjC,CAAC,uBAAuBA,OAAQ,iBAAM,uBACtC,CAAC,kBAAkBA,OAAQ,iBAAM,wBAEjC,CAAC,uBAAuBA,OAAQ,MAChC,CAAC,sBAAsBA,OAAQL,EAAK,SAAU,UAC9C,CAAC,uBAAuBK,OAAQP,EAAI,UACpC,CAAC,sBAAsBO,OAAQ,MAC/B,CAAC,wBAAwBA,OAAQ,MACjC,CAAC,sBAAsBA,OAAQP,EAAI,UACnC,CAAC,+BAA+BO,OAAQP,EAAI,UAC5C,CAAC,eAAeO,OAAQP,EAAI,cAQ5B,CACE,+GACGO,OACHP,EAAI,0BAEN,CAAC,iCAAiCO,OAAQL,EAAK,OAAQ,QACvD,CAAC,iCAAiCK,OAAQL,EAAK,OAAQ,WAEvD,CAAC,iBAAiBK,OAAQ,iBAAM,YAChC,CAAC,kBAAkBA,OAAQ,iBAAM,YACjC,CAAC,8CAA8CA,OAAQ,iBAAM,YAC7D,CAAC,iCAAiCA,OAAQ,iBAAM,YAChD,CAAC,8BAA8BA,OAAQ,iBAAM,YAC7C,CAAC,sCAAsCA,OAAQ,MAC/C,CAAC,mCAAmCA,OAAQ,MAC5C,CAAC,+BAA+BA,OAAQ,MACxC,CAAC,4BAA4BA,OAAQ,MACrC,CAAC,mCAAmCA,OAAQ,MAC5C,CAAC,iBAAiBA,OAAQ,MAC1B,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,YAAYA,OAAQ,MACrB,CAAC,eAAeA,OAAQ,MACxB,CAAC,mBAAmBA,OAAQ,MAC5B,CAAC,+BAA+BA,OAAQL,EAAK,OAAQ,QACrD,CAAC,sBAAsBK,OAAQ,MAC/B,CAAC,gBAAgBA,OAAQ,iBAAM,aAC/B,CAAC,oCAAoCA,OAAQ,iBAAM,aACnD,CAAC,gDAAgDA,OAAQ,iBAAM,aAC/D,CAAC,yBAAyBA,OAAQL,EAAK,OAAQ,QAC/C,CAAC,mBAAmBK,OAAQL,EAAK,OAAQ,QACzC,CAAC,qBAAqBK,OAAQL,EAAK,OAAQ,SAE3C,CAAC,mCAAmCK,OAAQL,EAAK,QAAS,QAC1D,CAAC,qBAAqBK,OAAQL,EAAK,MAAO,QAC1C,CAAC,oBAAoBK,OAAQL,EAAK,MAAO,QAEzC,CAAC,aAAaK,OAAQP,EAAI,aAE1B,CAAC,iCAAiCO,OAAQ,MAC1C,CAAC,8BAA8BA,OAAQ,MACvC,CAAC,iCAAiCA,OAAQ,MAC1C,CAAC,8BAA8BA,OAAQ,MACvC,CAAC,8BAA8BA,OAAQ,MACvC,CAAC,kDAAkDA,OAAQ,MAC3D,CACE,+BAA+BA,OAC/B,SAACC,EAAWC,GACV,MAAI,WAAWvI,KAAKuI,GACX,OAASA,EAAWpI,cAEpB,eAAiBoI,IAI9B,CAAC,gBAAgBF,OAAQ,MACzB,CAAC,gBAAgBA,OAAQP,EAAI,aAC7B,CAAC,oBAAoBO,OAAQP,EAAI,aACjC,CAAC,oBAAoBO,OAAQP,EAAI,aACjC,CAAC,4BAA4BO,OAAQP,EAAI,aAEzC,CAAC,0BAA0BO,OAAQP,EAAI,wBACvC,CAAC,8BAA8BO,OAAQP,EAAI,wBAC3C,CAAC,YAAYO,OAAQ,iBAAM,oBAC3B,CAAC,qBAAqBA,OAAQ,iBAAM,oBAEpC,CACE,iCAAiCA,OACjC,SAAC/I,GAAD,OAAWA,EAAM,GAAK,wBAGxB,CACE,uEACG+I,OACH,iBAAM,gBASR,CAAC,mBAAmBA,OAAQP,EAAI,eAChC,CAAC,wBAAwBO,OAAQP,EAAI,qBACrC,CAAC,uBAAuBO,OAAQP,EAAI,qBAEpC,CAAC,aAAaO,OAAQ,MACtB,CAAC,kBAAkBA,OAAQ,MAC3B,CAAC,cAAcA,OAAQ,MACvB,CAAC,iBAAiBA,OAAQL,EAAK,OAAQ,QAEvC,CAAC,cAAcK,OAAQ,MACvB,CAAC,eAAeA,OAAQL,EAAK,OAAQ,YAErC,CAAC,kBAAkBK,OAAQ,MAC3B,CAAC,OAAOA,OAAQ,MAChB,CAAC,iBAAiBA,OAAQ,MAC1B,CAAC,aAAaA,OAAQ,MACtB,CAAC,wBAAwBA,OAAQ,MACjC,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,aAAaA,OAAQ,MACtB,CAAC,0DAA0DA,OAAQ,MACnE,CACE,4EACGA,OACH,MAEF,CAAC,WAAWA,OAAQ,MACpB,CAAC,WAAWA,OAAQ,MACpB,CAAC,UAAUA,OAAQ,MACnB,CAAC,uBAAuBA,OAAQ,MAChC,CAAC,wBAAwBA,OAAQL,EAAK,QAAS,SAE/C,CAAC,yBAAyBK,OAAQ,MAClC,CAAC,wBAAwBA,OAAQ,MACjC,CAAC,oBAAoBA,OAAQ,MAC7B,CAAC,gCAAgCA,OAAQ,MACzC,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,aAAaA,OAAQ,MACtB,CAAC,cAAcA,OAAQL,EAAK,QAAS,UAOrC,CAAC,uBAAuBK,OAAQ,MAChC,CAAC,WAAWA,OAAQ,MACpB,CAAC,mBAAmBA,OAAQ,MAC5B,CAAC,eAAeA,OAAQ,MACxB,CAAC,kCAAkCA,OAAQ,MAC3C,CAAC,gCAAgCA,OAAQ,iBAAM,4BAE/C,CAAC,yBAAyBA,OAAQ,MAClC,CAAC,iCAAiCA,OAAQ,MAC1C,CAAC,0BAA0BA,OAAQ,iBAAM,2BAEzC,CAAC,YAAYA,OAAQL,EAAK,QAAS,cACnC,CAAC,SAASK,OAAQ,MAClB,CAAC,eAAeA,OAAQ,MACxB,CAAC,YAAYA,OAAQ,MACrB,CAAC,cAAcA,OAAQ,MACvB,CAAC,aAAaA,OAAQ,MACtB,CAAC,cAAcA,OAAQL,EAAK,QAAS,YAErC,CAAC,WAAWK,OAAQL,EAAK,QAAS,SAQlC,CAAC,0CAA0CK,OAAQ,MACnD,CAAC,sDAAsDA,OAAQ,MAC/D,CAAC,sDAAsDA,OAAQ,MAC/D,CAAC,iCAAiCA,OAAQ,iBAAM,YAEhD,CAAC,kDAAkDA,OAAQ,iBAAM,aACjE,CAAC,sCAAsCA,OAAQ,MAC/C,CAAC,4CAA4CA,OAAQ,iBAAM,YAC3D,CAAC,YAAYA,OAAQ,iBAAM,aAE3B,CAAC,sCAAsCA,OAAQ,MAC/C,CAAC,mDAAmDA,OAAQ,MAC5D,CAAC,gCAAgCA,OAAQ,iBAAM,cAC/C,CAAC,yDAAyDA,OAAQ,MAClE,CACE,0DAA0DA,OAC1D,iBAAM,aAGR,CAAC,aAAaA,OAAQ,iBAAM,aAC5B,CAAC,YAAYA,OAAQ,iBAAM,sBAQ3B,CAAC,eAAeA,OAAQN,EAAK,kBAC7B,CAAC,eAAeM,OAAQN,EAAK,oBAC7B,CAAC,aAAaM,OAAQN,EAAK,aAC3B,CAAC,aAAaM,OAAQN,EAAK,eAE3B,CAAC,YAAYM,OAAQP,EAAI,YACzB,CAAC,aAAaO,OAAQP,EAAI,cAC1B,CAAC,gBAAgBO,OAAQN,EAAK,cAE9B,CAAC,eAAeM,OAAQP,EAAI,eAC5B,CAAC,WAAWO,OAAQP,EAAI,WACxB,CAAC,WAAWO,OAAQP,EAAI,aACxB,CAAC,eAAeO,OAAQN,EAAK,aAC7B,CAAC,WAAWM,OAAQP,EAAI,cACxB,CAAC,eAAeO,OAAQP,EAAI,gBAC5B,CAAC,eAAeO,OAAQP,EAAI,gBAE5B,CAAC,WAAWO,OAAQ,MACpB,CAAC,eAAeA,OAAQ,MACxB,CAAC,UAAUA,OAAQ,MACnB,CAAC,YAAYA,OAAQ,MACrB,CAAC,gBAAgBA,OAAQL,EAAK,QAAS,aAEvC,CAAC,WAAWK,OAAQ,MACpB,CAAC,WAAWA,OAAQ,MACpB,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,cAAcA,OAAQ,MACvB,CAAC,aAAaA,OAAQP,EAAI,YAE1B,CAAC,eAAeO,OAAQP,EAAI,cAC5B,CAAC,wBAAwBO,OAAQ,iBAAM,WACvC,CAAC,yBAAyBA,OAAQ,iBAAM,iBACxC,CAAC,uBAAuBA,OAAQ,iBAAM,iBAEtC,CAAC,aAAaA,OAAQN,EAAK,cAC3B,CAAC,cAAcM,OAAQN,EAAK,WAC5B,CAAC,YAAYM,OAAQN,EAAK,YAC1B,CAAC,kBAAkBM,OAAQN,EAAK,YAChC,CAAC,wBAAwBM,OAAQN,EAAK,YACtC,CAAC,gBAAgBM,OAAQN,EAAK,YAC9B,CAAC,cAAcM,OAAQN,EAAK,aAE5B,CAAC,WAAWM,OAAQP,EAAI,WACxB,CAAC,UAAUO,OAAQP,EAAI,YACvB,CAAC,WAAWO,OAAQP,EAAI,YACxB,CAAC,eAAeO,OAAQP,EAAI,cAC5B,CAAC,YAAYO,OAAQP,EAAI,YACzB,CAAC,aAAaO,OAAQP,EAAI,cAC1B,CAAC,kBAAkBO,OAAQP,EAAI,UAE/B,CAAC,yBAAyBO,OAAQP,EAAI,eACtC,CAAC,8BAA8BO,OAAQN,EAAK,gBAC5C,CAAC,mBAAmBM,OAAQ,iBAAM,cAClC,CAAC,mBAAmBA,OAAQ,iBAAM,mBAElC,CAAC,sBAAsBA,OAAQP,EAAI,kCACnC,CAAC,WAAWO,OAAQP,EAAI,aAExB,CAAC,UAAUO,OAAQP,EAAI,WACvB,CAAC,WAAWO,OAAQP,EAAI,YACxB,CAAC,aAAaO,OAAQP,EAAI,eAC1B,CAAC,cAAcO,OAAQP,EAAI,cAC3B,CAAC,aAAaO,OAAQP,EAAI,YAC1B,CAAC,eAAeO,OAAQP,EAAI,eAC5B,CAAC,YAAYO,OAAQP,EAAI,WACzB,CAAC,6BAA6BO,OAAQL,EAAK,MAAO,QAClD,CAAC,qCAAqCK,OAAQ,iBAAM,WAEpD,CAAC,aAAaA,OAAQ,MACtB,CAAC,mBAAmBA,OAAQL,EAAK,MAAO,SAExC,CAAC,OAAOK,OAAQ,iBAAM,gCAEtB,CAAC,oBAAoBA,OAAQ,MAC7B,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,iBAAiBA,OAAQ,MAC1B,CAAC,mBAAmBA,OAAQL,EAAK,QAAS,SAE1C,CAAC,eAAeK,OAAQ,MACxB,CAAC,aAAaA,OAAQ,MACtB,CAAC,aAAaA,OAAQ,MACtB,CAAC,aAAaA,OAAQ,MACtB,CAAC,6BAA6BA,OAAQ,MACtC,CAAC,gBAAgBA,OAAQ,MACzB,CAAC,aAAaA,OAAQL,EAAK,QAAS,UAEpC,CAAC,eAAeK,OAAQ,MACxB,CAAC,iBAAiBA,OAAQ,MAC1B,CAAC,YAAYA,OAAQ,MACrB,CAAC,aAAaA,OAAQL,EAAK,MAAO,UAClC,CAAC,UAAUK,OAAQ,MACnB,CAAC,aAAaA,OAAQ,MACtB,CAAC,kBAAkBA,OAAQ,MAC3B,CAAC,YAAYA,OAAQL,EAAK,MAAO,aAEjC,CAAC,qBAAqBK,OAAQL,EAAK,QAAS,YAE5C,CAAC,2BAA2BK,OAAQL,EAAK,MAAO,SAEhD,CAAC,cAAcK,OAAQ,MACvB,CAAC,aAAaA,OAAQL,EAAK,UAAW,UACtC,CAAC,4BAA4BK,OAAQ,MACrC,CAAC,6BAA6BA,OAAQL,EAAK,UAAW,SACtD,CAAC,yBAAyBK,OAAQF,EAAM,UAAW,SACnD,CAAC,YAAYE,OAAQL,EAAK,UAAW,SAErC,CAAC,cAAcK,OAAQ,iBAAM,gBAC7B,CAAC,6CAA6CA,OAAQ,iBAAM,gBAC5D,CAAC,yBAAyBA,OAAQ,iBAAM,gBAExC,CACE,2EACGA,OACH,iBAAM,wBAGR,CACE,+CAA+CA,OAC/C,iBAAM,kBAGR,CAAC,qBAAqBA,OAAQP,EAAI,aAClC,CAAC,WAAWO,OAAQP,EAAI,cACxB,CAAC,2BAA2BO,OAAQ,SAAC/I,GAAD,OAAWA,IAC/C,CAAC,2BAA2B+I,OAAQP,EAAI,cACxC,CAAC,2BAA2BO,OAAQP,EAAI,cACxC,CAAC,0BAA0BO,OAAQP,EAAI,aACvC,CAAC,yBAAyBO,OAAQP,EAAI,aACtC,CAAC,cAAcO,OAAQP,EAAI,aAC3B,CAAC,aAAaO,OAAQP,EAAI,gBAC1B,CAAC,cAAcO,OAAQP,EAAI,gBAC3B,CAAC,kBAAkBO,OAAQP,EAAI,kBAC/B,CAAC,iBAAiBO,OAAQP,EAAI,cAC9B,CAAC,WAAWO,OAAQP,EAAI,YACxB,CAAC,WAAWO,OAAQP,EAAI,cACxB,CAAC,eAAeO,OAAQN,EAAK,SAC7B,CAAC,UAAUM,OAAQ,iBAAM,cAEzB,CAAC,eAAeA,OAAQL,EAAK,SAAU,YAEvC,CAAC,iBAAiBK,OAAQP,EAAI,eAC9B,CAAC,wBAAwBO,OAAQP,EAAI,UACrC,CAAC,cAAcO,OAAQP,EAAI,eA0B3B,CAAC,mBAAmBO,OAAQP,EAAI,aAChC,CAAC,sBAAsBO,OAAQP,EAAI,aACnC,CAAC,uBAAuBO,OAAQP,EAAI,cACpC,CAAC,0BAA0BO,OAAQP,EAAI,cACvC,CAAC,+BAA+BO,OAAQP,EAAI,iBAC5C,CAAC,kCAAkCO,OAAQP,EAAI,iBAC/C,CAAC,6BAA6BO,OAAQP,EAAI,gBAC1C,CAAC,cAAcO,OAAQP,EAAI,UAC3B,CAAC,iBAAiBO,OAAQP,EAAI,UAC9B,CAAC,qBAAqBO,OAAQP,EAAI,WAClC,CAAC,oBAAoBO,OAAQP,EAAI,UACjC,CAAC,mBAAmBO,OAAQP,EAAI,UAChC,CAAC,mBAAmBO,OAAQP,EAAI,WAChC,CAAC,iBAAiBO,OAAQP,EAAI,UAC9B,CAAC,0BAA0BO,OAAQP,EAAI,WAEvC,CAAC,mBAAmBO,OAAQ,MAC5B,CAAC,kBAAkBA,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,IAAMA,EAAM,GAAK,OAKlE,CAAC,2BAA2B+I,OAAQN,EAAK,OACzC,CAAC,eAAeM,OAAQ,MACxB,CAAC,cAAcA,OAAQN,EAAK,OAE5B,CAAC,0DAA0DM,OAAQ,MACnE,CACE,oDAAoDA,OACpD,SAAC/I,GAAD,OAAWA,IAGb,CAAC,0CAA0C+I,OAAQ,SAAC/I,GAAD,OAAWA,IAC9D,CAAC,wBAAwB+I,OAAQ,SAAC/I,GAAD,OAAWA,IAC5C,CAAC,oCAAoC+I,OAAQ,SAAC/I,GAAD,OAAWA,IACxD,CAAC,4BAA4B+I,OAAQ,SAAC/I,GAAD,OAAWA,IAChD,CAAC,+BAA+B+I,OAAQ,SAAC/I,GAAD,OAAWA,IACnD,CAAC,2CAA2C+I,OAAQ,SAAC/I,GAAD,OAAWA,IAC/D,CAAC,iBAAiB+I,OAAQ,SAAC/I,GAAD,OAAWA,IACrC,CAAC,iBAAiB+I,OAAQ,SAAC/I,GAAD,OAAWA,IAErC,CAAC,0BAA0B+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAKA,EAAM,GAAK,SAEpE,CAAC,qBAAqB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SACpD,CAAC,mBAAmB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SAClD,CAAC,uBAAuB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAKA,EAAM,GAAK,SACjE,CACE,2BAA2B+I,OAC3B,SAAC/I,GAAD,OAAWA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAK,SAE9C,CAAC,mBAAmB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SAElD,CACE,yBAAyB+I,OACzB,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SAExB,CAAC,mBAAmB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,UAClD,CAAC,oBAAoB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,UACnD,CAAC,2BAA2B+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAKA,EAAM,GAAK,UACrE,CAAC,oBAAoB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SACnD,CAAC,kBAAkB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SACjD,CAAC,mBAAmB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SAClD,CAAC,kBAAkB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SAEjD,CACE,+BAA+B+I,OAC/B,SAAC/I,GAAD,OAAWA,EAAM,GAAKA,EAAM,GAAK,QAEnC,CAAC,uBAAuB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,SACtD,CAAC,kBAAkB+I,OAAQ,SAAC/I,GAAD,OAAWA,EAAM,GAAK,QAEjD,CACE,0BAA0B+I,OAC1B,SAAC/I,GAAD,OAAWW,EAAQX,EAAME,MAAM,GAAI,GAAI,KAAOF,EAAME,MAAM,GAAI,GAAK,SAGrE,CACE,MAAM6I,OACN,SAAC/I,GAAD,OAAWA,IAQb,CACE,yCAAyC+I,OACzC,SAAC/I,GAAD,OAAWA,EAAM,GAAK,uBAAyBA,EAAME,MAAM,KAE7D,CACE,yCAAyC6I,OACzC,SAAC/I,GAAD,OAAWA,EAAM,GAAK,uBAAyBA,EAAME,MAAM,KAG7D,CAAC,IAAI6I,OAAQ,SAAC/I,GAAD,OAAWA,IACxB,CAAC,KAAK+I,OAAQ,iBAAM,QAGC1I,KAAI,YAAuB,aAArBR,EAAqB,KAAdC,EAAc,KAC5CoJ,EAAarJ,EAQjB,OAPAiJ,EAAWlJ,SACT,yBAAEuJ,EAAF,KAAQ7F,EAAR,YACG4F,EAAaA,EAAW5F,QACvB,IAAIpE,OAAO,IAAMiK,EAAO,IAAK,KAC7B7F,MAGC,CAAC,IAAIpE,OAAJ,cAAkBgK,EAAlB,MAAkCpJ,MAGrCsJ,EAAP,EAAiB/J,EAAMA,EAAMY,OAAS,GAAtC,MACSwD,EAAIpE,EAAMY,OAAS,EAAGwD,GAAK,EAAGA,IAAK,CAC1C,IAAM3D,EAAWT,EAAMoE,GAAG,GACT,OAAb3D,EACFT,EAAMoE,GAAG,GAAK2F,EAEdA,EAAStJ,EAoEbQ,EAAOC,QAAU,CAAEoC,SALnB,SAAkB0G,GAEhB,OAAOlK,EAAQkK,EAAchK,GAAS,2B,gBC/tBxC,IAAMmB,EAAcqB,EAAQ,GAASrB,YAmBrCF,EAAOC,QAAU,CAAE2C,OAbnB,SAAgB/B,GACd,OAAOA,EACJG,MAAM,IACNjB,KAAI,SAACkB,EAAGkD,GACP,OAAIA,EAAS,IAAM,EACVlD,EAEAf,EAAYe,GAAKA,EAAET,cAAgBS,EAAEV,iBAG/Cc,KAAK,O,gBCbV,IAAQ9C,EAAcgD,EAAQ,GAAtBhD,UAoSRyB,EAAOC,QAAU,CAAE0C,QA9RnB,SAAiB7D,GACf,IAAMkK,EAAOzK,IACPY,EAAO,SAAC8J,GACZ,IAAMC,EAAOF,IACb,OAAe,IAARC,EAAY,EAAIC,EAAOD,GAGhC,SAASE,IACP,OAAQH,IAAS,IAAO,IAO1B,SAASI,IAAkB,2BAATC,EAAS,yBAATA,EAAS,gBACzB,OAAOA,EAAQlK,EAAKkK,EAAQ1J,SAO9B,SAAS2J,EAAgBC,GACvB,IAAMC,EAASD,EAAIvI,MAAM,MACnBkG,EAAK/H,EAAKqK,EAAO7J,QAEvB,OADA6J,EAAOtC,GAAMsC,EAAOtC,GAAI3G,cACjBiJ,EAAOnI,KAAK,MAGrB,SAASoI,IACP,OACEL,EAAM,OAAQ,aAAc,UAAW,cACvC,IACAA,EAAM,IAAK,KACX,MAIJ,IAAIM,EAAQ,EACRC,EAAQ,GAERR,IAAY,KACdO,IACAC,GAAS,iBACAR,IAAY,IACrBO,IACAC,GACE,4CACAP,EAAM,IAAK,IAAK,MAChB,MACOD,IAAY,MACrBO,IACAC,GAAS,+BAMX,IAAMC,EAAY,CAChB,CACE,oBACA,kBAAc,yCAAW,IAAIlE,OAAOvG,EAAK,IAAM,IAAMA,EAAK,OAE5D,CAAC,WAAYsK,GACb,CACE,iCADF,4CAIA,CAAC,gCAAD,YACA,CAAC,SAAD,aACA,CAAC,WAAD,wBACA,CAAC,0CAAD,WACA,CAAC,gBAAD,aACA,CAAC,oBAAD,WACA,CACE,qDADF,sBAIA,CAAC,YAAD,eACA,CAAC,WAAD,QACA,CAAC,8BAAD,mBACA,CAAC,iBAAkB,kBAAML,EAAM,OAAQ,SAAU,QAAU,WAC3D,CAAC,YAAD,eACA,CAAC,2BAAD,YACA,CAAC,eAAD,mBACA,CAAC,aAAD,iCACA,CAAC,aAAD,0BACA,CAAC,gBAAD,mBACA,CAAC,YAAD,mBACA,CAAC,YAAD,cACA,CAAC,WAAY,kBAAMA,EAAM,SAAU,iBAAkB,mBACrD,CAAC,gBAAiB,kBAAOD,IAAY,GAAM,mBAAqB,YAChE,CAAC,aAAD,oBACA,CAAC,YAAD,sBACA,CAAC,UAAD,cACA,CAAC,aAAD,eACA,CAAC,gBAAD,kCACA,CAAC,YAAD,cACA,CAAC,aAAD,kBACA,CAAC,2BAAD,qBACA,CAAC,mBAAD,aACA,CAAC,mBAAD,mBACA,CAAC,iBAAD,yBACA,CAAC,cAAD,6BACA,CAAC,8BAAD,cACA,CAAC,2CAAD,aACA,CAAC,kBAAD,gBACA,CAAC,YAAD,qBACA,CAAC,eAAD,iBACA,CAAC,eAAgB,kBAAMC,EAAM,QAAS,UAAW,QAAU,cAC3D,CAAC,cAAD,iBACA,CAAC,oBAAD,mBACA,CACE,mFADF,WAIA,CAAC,YAAD,qBACA,CAAC,aAAD,kBACA,CAAC,YAAD,WACA,CAAC,aAAD,UACA,CAAC,gBAAD,qBACA,CAAC,eAAD,iBACA,CAAC,aAAD,cACA,CAAC,aAAD,sBACA,CAAC,aAAD,cACA,CACE,gCACA,SAAC1J,GAAD,OACE0J,EAAM,WAAY,YAAa,WAAY,QAAU,OAAS1J,IAElE,CAAC,aAAD,aACA,CACE,cACA,kBAAM0J,EAAM,aAAc,YAAa,SAAU,QAAU,WAE7D,CAAC,iCAAD,aACA,CAAC,UAAD,gBACA,CAAC,aAAD,kBACA,CAAC,YAAD,qBACA,CAAC,cAAD,aACA,CAAC,cAAD,aACA,CAAC,gBAAD,kBAEA,CACE,4CACA,iBAAgB,KAAOA,EAAM,MAAO,OAAS,KAA7B,2CAGlB,CAAC,cAAD,KAIIS,EAAUD,EAAU7J,KAAI,kBAAM,KAqFpC,IApFA4J,GAAS7K,EAGNkC,MAAM,WACNjB,KAAI,SAACgD,GACJ,IAAI+G,EAAY/G,EAqBhB,OApBA6G,EAAUtK,SAAQ,SAACE,EAAU2D,GAE3B,IAAM4G,EAAcD,EAAU9G,QAAQxD,EAAS,GAAIA,EAAS,IACxDuK,IAAgBD,IAClBD,EAAQ1G,GAAK,EACb2G,EAAYC,MAKhBD,EAAYA,EAAU9G,QACpB,2BACA,iBAAM,IAAMoG,EAAM,OAAQ,MAAO,WAE/BD,IAAY,MACdW,EAAYA,EAAU9G,QACpB,iBACA,kBAAgB,sDAGb8G,KAERzI,KAAK,MAERqI,GAASG,EAAQG,QAAO,SAACC,GAAD,OAAOA,EAAI,KAAGtK,OAMpCgK,EAJER,IAAY,GAINQ,EAAM3G,QAAQ,MAAM,kBAAOmG,IAAY,IAAO,KAAO,OACpDA,IAAY,IAEbQ,EAAM3G,QAAQ,MAAO,KAErBsG,EAAgBK,IAGtBR,IAAY,IAAOO,EAAQ,KAC7BC,GACE,eACAP,EAAM,MAAO,KACb,SACAA,EAAM,QAAS,SAAU,SACzBA,EAAM,IAAK,KACbM,MAGEP,IAAY,IAAOO,EAAQ,KAC7BC,GACE,KACAP,EAAM,IAAI1D,OAAO,IAAK,IAAIA,OAAO,IAAK,MAAO,GAAI,GAAI,GAAI,YACzD,KACA0D,EACE,+BACA,qBACA,kBACA,sBACA,mCACA,4BACA,yCAEF,IACAA,EAAM,oBAAqB,eAC3B,IACAA,EAAM,UAAW,IACjBA,EAAM,QAAS,gBAAiB,cAChC,IACAA,EAAM,oBAAqB,mCAC3B,IACAA,EAAM,SAAU,YAChBA,EAAM,IAAK,IAAK,KAChB,KACFM,KAKKA,EAAQ,GACb,GAAIP,IAAY,IACdQ,EAAQL,EAAgBK,GACxBD,SACK,GAAIP,IAAY,IAAK,WAE1B,IAAMe,EAAe,CACnB,qBACA,iBACA,cACA,aACA,SACA,SACA,UACA,qBACA,aACA,WACA,iCACA,qBACA,uBACA,gBACA,gBACA,YACAT,IAAWzG,QAAQ,UAAU,SAACtD,GAAD,OAAWA,EAAMa,kBAEhDoJ,EAAQA,EAAM3G,QAAQ,iFAAiB,WAErC,OADA0G,IACO,KAAON,EAAK,WAAL,EAASc,GAAgB,MAAhC,4CAvBiB,QAyBrB,GAAIf,IAAY,IAAM,CAI3B,IAFA,IACMgB,EAAMhL,EAAK,GAAK,GACbgE,EAAI,EAAGA,GAAKgH,EAAKhH,IACxBwG,GAHU,mBAGGxK,EAAK,KAEpBwK,GAAS,KACTD,SACSP,IAAY,MACrBQ,GAASP,EAAM,UAAW,aAC1BM,KAKJ,OADAC,EAAQA,EAAM3G,QAAQ,MAAO,QAC7B,UAAU2G,EAAV,S,0CCrRF3J,EAAOC,QAAU,CAAE2B,KAhBnB,SAAcf,GACZ,OAAOA,EACJmC,QAAQ,QAAS,KACjBA,QAAQ,MAAO,MACfA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,sBAChBA,QAAQ,QAAS,KACjBA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,MAAO,KACfA,QAAQ,OAAQ,yB,gBCdrB,IAAQzE,EAAcgD,EAAQ,GAAtBhD,UAEAoD,EAAUJ,EAAQ,IAAlBI,MACAL,EAASC,EAAQ,GAAjBD,KACAG,EAASF,EAAQ,IAAjBE,KACAI,EAAWN,EAAQ,IAAnBM,OACAiB,EAAevB,EAAQ,IAAvBuB,WACAb,EAAUV,EAAQ,IAAlBU,MACAP,EAAYH,EAAQ,IAApBG,QACAa,EAAWhB,EAAQ,IAAnBgB,OACAD,EAAQf,EAAQ,IAAhBe,IACAP,EAAQR,EAAQ,IAAhBQ,IACAG,EAAWX,EAAQ,IAAnBW,OACAM,EAAcjB,EAAQ,IAAtBiB,UACAH,EAAad,EAAQ,IAArBc,SACAO,EAAWrB,EAAQ,IAAnBqB,OACApB,EAAWD,EAAQ,IAAnBC,OACAmB,EAAYpB,EAAQ,IAApBoB,QAoDR3C,EAAOC,QAAU,CAAE6B,UA7CnB,SAAmBhD,GAwBjB,IAvBA,IAAMK,EAAOZ,IAEP2G,EAAM,CACVvD,EACAL,EACAG,EACAI,EACAiB,EACAb,EACAP,EACAa,EACAD,EACAP,EACAG,EACAM,EACAH,EACAO,EACApB,EACAmB,GAKOQ,EAAI,EAAGA,EAAI+B,EAAIvF,OAAQwD,IAAK,CACnC,IAAMiH,EAAIjL,IAAS+F,EAAIvF,OACjB0K,EAAMnF,EAAI/B,GAChB+B,EAAI/B,GAAK+B,EAAIkF,GACblF,EAAIkF,GAAKC,EAIX,IAAMC,EAAWpF,EAAItF,MAAM,EAAG,EAAKT,IAAS,GAE5C,OAAOL,EACJkC,MAAM,WACNjB,KAAI,SAACgD,GAAD,OAAUuH,EAASC,QAAO,SAACC,EAASC,GAAV,OAAiBA,EAAGD,KAAUzH,MAC5D1B,KAAK,S,gBCxDV,IAAQT,EAAOW,EAAQ,GAAfX,GA6BR,IAAM8J,EA1BN,WAEE,IAEIC,EAAIC,EAAIC,EAFRC,EAAS,GAqBb,OAlBAH,EAAKC,EAAKC,EAAK,EACf,6BAA6B7J,MAAM,IAAI1B,SAAQ,SAACyL,GAC9C,IAAIC,EAAOpK,EAAG,GAAD,OAAI+J,GAAJ,OAASC,GAAT,OAAcC,GAAM,MAAO,OAExCC,EAAOC,GAASC,EAEhBF,EAAOC,EAAMxK,eAAiByK,EAAK,GAAGzK,cAAgByK,EAAKpL,MAAM,GAEvD,KADViL,IAEEA,EAAK,EAEK,KADVD,IAEEA,EAAK,EACLD,SAKCG,EAGqBG,GAc9BjL,EAAOC,QAAU,CAAE+B,MAPnB,SAAelD,GACb,OAAOA,EAAekE,QACpB,aACA,SAACtD,GAAD,OAAWgL,EAAsBhL,S,cCoCrCM,EAAOC,QAAU,CAAEkC,OA7EnB,SAAgBtB,GACd,OACEA,EACGL,cAEAwC,QAAQ,SAAU,SAClBA,QAAQ,WAAY,KACpBA,QAAQ,UAAW,IACnBA,QAAQ,UAAW,SACnBA,QAAQ,YAAa,QACrBA,QAAQ,SAAU,OAClBA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,KAClBA,QAAQ,QAAS,KACjBA,QAAQ,UAAW,QACnBA,QAAQ,OAAQ,OAChBA,QAAQ,UAAW,KACnBA,QAAQ,WAAY,MACpBA,QAAQ,OAAQ,OAChBA,QAAQ,QAAS,QACjBA,QAAQ,QAAS,OACjBA,QAAQ,YAAa,YACrBA,QAAQ,MAAO,KACfA,QAAQ,MAAO,MACfA,QAAQ,QAAS,KACjBA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,SAAU,OAClBA,QAAQ,SAAU,MAClBA,QAAQ,OAAQ,OAChBA,QAAQ,QAAS,KACjBA,QAAQ,SAAU,MAClBA,QAAQ,QAAS,QACjBA,QAAQ,UAAW,MACnBA,QAAQ,YAAa,OACrBA,QAAQ,SAAU,OAClBA,QAAQ,YAAa,QACrBA,QAAQ,WAAY,KACpBA,QAAQ,WAAY,KACpBA,QAAQ,UAAW,KACnBA,QAAQ,WAAY,KACpBA,QAAQ,aAAc,KACtBA,QAAQ,YAAa,KACrBA,QAAQ,WAAY,KACpBA,QAAQ,YAAa,KACrBA,QAAQ,YAAa,KACrBA,QAAQ,WAAY,KACpBA,QAAQ,aAAc,KACtBA,QAAQ,aAAc,KACtBA,QAAQ,YAAa,KACrBA,QAAQ,WAAY,MACpBA,QAAQ,OAAQ,cAChBA,QAAQ,SAAU,SAClBA,QAAQ,SAAU,UAClBA,QAAQ,YAAa,YACrBA,QAAQ,SAAU,iBAClBA,QAAQ,aAAc,YACtBA,QAAQ,cAAe,SACvBA,QAAQ,UAAW,SACnBA,QAAQ,WAAY,QACpBA,QAAQ,YAAa,OACrBA,QAAQ,UAAW,OACnBA,QAAQ,YAAa,QACrBA,QAAQ,cAAe,eACvBA,QAAQ,MAAO,MACfzC,iB,gBC1EP,IAAMhC,EAAYgD,EAAQ,GAAShD,UAE7B2M,EAAW,CACfC,EAAG,QACHC,EAAG,OACHC,EAAG,IACHC,EAAG,MACHC,EAAG,SACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,OACHC,EAAG,MACHC,EAAG,OACHC,EAAG,KACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,OACHC,EAAG,QACHC,EAAG,MACHC,EAAG,IACHC,EAAG,MACHC,EAAG,IACHC,EAAG,KACH7L,EAAG,IACH8L,EAAG,KACHC,EAAG,KACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KACHhK,EAAG,IACHiK,EAAG,KACHlM,EAAG,IACHmM,EAAG,IACHC,EAAG,KACHlD,EAAG,IACHmD,EAAG,IACHC,EAAG,IACHC,EAAG,IACHzH,EAAG,IACH0H,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACH7D,EAAG,IACH8D,EAAG,KACHC,EAAG,KACH,EAAG,MACH,EAAG,IACH,EAAG,IACH,EAAG,IACH,EAAG,MACH,EAAG,IACH,EAAG,MACH,EAAG,IACH,EAAG,MACH,EAAG,KACH,IAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACLC,EAAG,KA4BLjO,EAAOC,QAAU,CAAEmC,WArBnB,SAAoBmH,GAGlB,IAFA,IAAMpK,EAAOZ,EAAU,GACjB2P,EAAS3E,EAAIvI,MAAM,IAChBmC,EAAI,EAAGA,EAAIgL,KAAKC,MAAM7E,EAAI5J,OAAS,GAAIwD,IAAK,CACnD,IAAIiH,EAAIjL,IAASoK,EAAI5J,OACjBsB,EAAIiN,EAAO9D,GACf,GAAInJ,KAAKiK,EAAU,CACjB,IAAMmD,EAAUnD,EAASjK,GAEvBA,EADqB,IAAnBoN,EAAQ1O,OACN0O,EAAQ,GAERA,EAAQlP,IAASkP,EAAQ1O,YAErB,KAAKS,KAAKa,KACpBA,EAAI,KAENiN,EAAO9D,GAAKnJ,EAEd,OAAOiN,EAAO7M,KAAK,O,mCCzGfiN,EAAO,CACX,CAAC,WAAD,OACA,CAAC,SAAD,QACA,CAAC,SAAD,MACA,CAAC,SAAD,SACA,CAAC,UAAD,MACA,CAAC,QAAD,OACA,CAAC,SAAD,OACA,CAAC,YAAD,SACA,CAAC,aAAD,WACA,CAAC,UAAD,MACA,CAAC,WAAD,OACA,CAAC,QAAD,MACA,CAAC,OAAD,OACA,CAAC,QAAD,OACA,CAAC,OAAD,OACA,CAAC,YAAD,aACA,CAAC,UAAD,UACA,CAAC,SAAD,UACA,CAAC,SAAD,UACA,CAAC,SAAD,KACA,CAAC,SAAD,OACA,CAAC,SAAD,OACA,CAAC,SAAD,OACA,CAAC,WAAD,SACA,CAAC,QAAD,MACA,CAAC,UAAD,QACA,CAAC,OAAD,OACA,CAAC,OAAD,OACA,CAAC,OAAD,OACA,CAAC,QAAD,QACA,CAAC,QAAD,MACA,CAAC,QAAD,MACA,CAAC,WAAD,MACA,CAAC,UAAD,OACA,CAAC,YAAD,SACA,CAAC,UAAD,MACA,CAAC,WAAD,MACA,CAAC,QAAD,OACA,CAAC,OAAD,OACA,CAAC,WAAD,MACA,CAAC,UAAD,OACA,CAAC,UAAD,QACA,CAAC,QAAD,QACA,CAAC,YAAD,QACA,CAAC,UAAD,QACA,CAAC,WAAD,SACA,CAAC,UAAD,QACA,CAAC,SAAD,OACA,CAAC,UAAD,QACA,CAAC,UAAD,QACA,CAAC,YAAD,SACA,CAAC,UAAD,SACA,CAAC,UAAD,SACA,CAAC,UAAD,SACA,CAAC,UAAD,SACA,CAAC,SAAD,SACA,CAAC,UAAD,QACA,CAAC,QAAD,MACA,CAAC,eAAD,YACA,CAAC,SAAD,QACA,CAAC,WAAD,OACA,CAAC,WAAD,SACA,CAAC,WAAD,QACA,CAAC,WAAD,QACA,CAAC,aAAD,SACA,CAAC,WAAD,QACA,CAAC,SAAD,OACA,CAAC,aAAD,WACA/D,QAOA,SAAiCgE,EAAKC,GACpC,QAA6BA,EAA7B,GAAOjP,EAAP,KAAckP,EAAd,KACMC,EAAW,CAACF,GACZG,EAAYpP,EAAMkJ,OAKlBmG,EAAe,CACnB,IAAIhQ,OAGF+P,EAAU3L,QACR,kBACA,SAACtD,EAAOmP,EAAUC,GAAlB,OACGD,GAAY,IAAMC,EAAYvO,iBAEnC,KAEFkO,EAAYzL,QAAQ,aAAa,SAACtD,GAAD,OAAWA,EAAMa,kBAEpDmO,EAASK,KAAKH,GAKd,IAAMI,EAAW,CACf,IAAIpQ,OAGF+P,EACG3L,QAAQ,UAAU,SAACtD,GAAD,OAAWA,EAAMa,iBACnCyC,QAAQ,OAAQ,OACnB,KAEFyL,EAAYzL,QAAQ,UAAU,SAACtD,GAAD,OAAWA,EAAMa,kBAIjD,OAFAmO,EAASK,KAAKC,GAEd,YAAWT,GAAQG,KAErB,IAcF1O,EAAOC,QAAU,CAAEwC,SAPnB,SAAkB5B,GAChB,OAAOyN,EAAK/D,QACV,SAAC0E,EAAD,gBAAa1P,EAAb,KAAoBkP,EAApB,YAAqCQ,EAAUjM,QAAQzD,EAAOkP,KAC9D5N,M,oBCtHJ,IAAMtC,EAAYgD,EAAQ,GAAShD,UAE7B2Q,EAAiB,WAyCvBlP,EAAOC,QAAU,CAAEyC,SAVnB,SAAkB5D,GAChB,IAAMK,EAAOZ,IAGb,OAAOO,EAAekE,QACpB,qCACA,SAACtD,GAAD,OAAWA,EAAM,GA7BrB,SAAyByP,EAAYhQ,GACnC,GAAI+P,EAAe9O,KAAK+O,GACtB,OAAOA,EAET,IAAIC,EACJ,EAAG,CACD,IAAIC,EAASF,EAAWnO,MAAM,IAE9B,IADAoO,EAAY,GACLC,EAAO1P,QAAQ,CACpB,IAAIwD,EAAIhE,IAASkQ,EAAO1P,OACxByP,EAAUL,KAAKM,EAAOlM,IACtBkM,EAAOxH,OAAO1E,EAAG,UAEZgM,IAAeC,EAAU/N,KAAK,KAEvC,OAAO+N,EAAU/N,KAAK,IAcEiO,CAAgB5P,EAAME,MAAM,GAAIT,S,gBCnD1D,IAAMZ,EAAYgD,EAAQ,GAAShD,UAE7BgR,EAAI,CAMR,IAAK,CAAC,MAGN,IAAK,CAAC,OAGNtB,EAAG,CAAC,MACJ,IAAK,CAAC,MAQN,IAAK,CAAC,MACN,IAAK,CAAC,MACN,IAAK,CAAC,MAGN,IAAK,CAAC,MACN,IAAK,CAAC,MAGN,IAAK,CAAC,MAKN,EAAG,CAAC,MAOJ,EAAG,CAAC,MAEJpB,EAAG,CAAC,MACJ1B,EAAG,CAAC,MACJ2B,EAAG,CAAC,MACJ1B,EAAG,CAAC,MACJnK,EAAG,CAAC,KAAM,KAAM,MAChBoK,EAAG,CAAC,IAAK,KAAM,MACf0B,EAAG,CAAC,KAAM,MACVzB,EAAG,CAAC,MACJ0B,EAAG,CAAC,MACJzB,EAAG,CAAC,IAAK,MAETC,EAAG,CAAC,KAEJC,EAAG,CAAC,MACJ0B,EAAG,CAAC,MACJzB,EAAG,CAAC,IAAK,MACTvI,EAAG,CAAC,KAAM,MACVwI,EAAG,CAAC,IAAK,MACTyB,EAAG,CAAC,KAAM,MACVxB,EAAG,CAAC,MAEJC,EAAG,CAAC,IAAK,MACTwB,EAAG,CAAC,MACJvB,EAAG,CAAC,MACJwB,EAAG,CAAC,MACJvB,EAAG,CAAC,IAAK,KAAM,MACf3B,EAAG,CAAC,IAAK,KACT4B,EAAG,CAAC,KACJuB,EAAG,CAAC,KAAM,MACVtB,EAAG,CAAC,IAAK,MACTuB,EAAG,CAAC,IAAK,MACTtB,EAAG,CAAC,IAAK,MAKTwB,EAAG,CAAC,MACJrB,EAAG,CAAC,MAEJC,EAAG,CAAC,IAAK,MACTsB,EAAG,CAAC,KAEJC,EAAG,CAAC,IAAK,KAAM,KAAM,MACrBrB,EAAG,CAAC,IAAK,MAGTvC,EAAG,CAAC,KAAM,KAAM,KAChByC,EAAG,CAAC,IAAK,KAAM,MACfqB,EAAG,CAAC,KAAM,MACVpB,EAAG,CAAC,KAEJC,EAAG,CAAC,MAsBN5M,EAAOC,QAAU,CAAE4C,UAfnB,SAAmBhC,GACjB,IAAM1B,EAAOZ,IAEb,OAAOsC,EACJG,MAAM,IACNjB,KAAI,SAACyP,GACJ,OAAIA,KAAKD,EACAE,OAAOC,aAAaH,EAAEC,GAAGrQ,IAASoQ,EAAEC,GAAG7P,SAEvC6P,KAGVnO,KAAK,O,uGC/GJsO,EAAUC,OAAOC,KAAKC,GAgEbC,MA9Df,WACE,MAAoCC,IAAMC,SAASN,EAAQ,IAA3D,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAkCH,IAAMC,SAAN,icAAlC,mBAAOG,EAAP,KAAkBC,EAAlB,KAUMrG,EAAS8F,EAASI,GAExB,OACE,sBAAKI,UAAU,MAAMC,MAAO,CAAEC,OAAQ,OAAtC,UACE,yBAAQF,UAAU,aAAlB,UACE,6CACA,4BAAItG,EAAO,2DACX,+BACE,yCACU,IACR,mBAAGyG,KAAK,yCAAR,uDAIF,sCACO,IACL,mBAAGA,KAAK,4CAAR,gEAMN,iCACE,4BACE,wBACEC,WAAW,EACXC,MAAOT,EACPU,SAAU,SAAC5D,GAAD,OAAOmD,EAAcnD,EAAE6D,OAAOF,QAH1C,SAKGhB,EAAQ5P,KAAI,SAAC+Q,GAAD,OACX,wBAA2BH,MAAOG,EAAlC,SACGA,GADUA,UAMnB,4BACE,0BACEC,KAAM,EACNC,KAAM,GACNL,MAAOP,EACPQ,SAAU,SAAC5D,GAAD,OAAOqD,EAAarD,EAAE6D,OAAOF,YAG3C,8BAAM3G,EAAOoG,YCpErBa,QAAQC,IAAI,YACZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.57173515.chunk.js","sourcesContent":["/**\n * Miscellaneous utility functions\n *\n * @copyright (c) Aaron Wells 2019\n * @author Aaron Wells\n */\n\n/**\n * Generate a predictable but randomish number generator. Specifically, this is\n * the algorithm known as \"MINSTD\"\n *\n * @see https://en.wikipedia.org/wiki/Lehmer_random_number_generator#cite_ref-6\n * @description\n *\n * Inspired by https://gist.github.com/blixt/f17b47c62508be59987b\n *\n * Returns a rand() function that can be called repeatedly to get the same\n * sorta-random-seeming sequence of integers each time.\n *\n * @param {number} [initialSeed = 1]\n * @returns {() => number}\n */\nfunction getRandFn(initialSeed = 1) {\n  let curSeed = initialSeed;\n  return function rand() {\n    curSeed = (curSeed * 48271) % getRandFn.PSEUDO_RAND_MAX;\n    return curSeed;\n  };\n}\ngetRandFn.PSEUDO_RAND_MAX = 0x7fffffff;\n\nconst STARTS_WITH_UPPER = new RegExp('^[A-Z]');\n\n/**\n *\n * @param {string} letter\n */\nfunction isUpperCase(letter) {\n  return STARTS_WITH_UPPER.test(letter);\n}\n\n/**\n * A helper function equivalent to the \"SSUB/SESUB\" macro in the original. It creates\n * a regex replace callback method, which will make sure the replacement text\n * has the same initial capitalization as the original text.\n * @param {string} match\n * @param {string} replacement\n */\nfunction sameCap(match, replacement) {\n  if (STARTS_WITH_UPPER.test(match)) {\n    return replacement[0].toUpperCase() + replacement.slice(1);\n  } else {\n    return replacement[0].toLowerCase() + replacement.slice(1);\n  }\n}\n\n/**\n * Creates a String.prototype.replace() callback method, which will make sure\n * the replacement text has the same initial capitalization as the original text.\n * (Equivalent to SSUB/SESUB macro in the Lexer based scripts)\n *\n * @param {string} replacement\n * @return {(match: string) => string}\n */\nfunction sameCapReplacer(replacement) {\n  const lowercaseReplacement =\n    replacement[0].toLowerCase() + replacement.slice(1);\n  const uppercaseReplacement =\n    replacement[0].toUpperCase() + replacement.slice(1);\n  return function (match) {\n    if (STARTS_WITH_UPPER.test(match)) {\n      return uppercaseReplacement;\n    } else {\n      return lowercaseReplacement;\n    }\n  };\n}\n\n/**\n *\n * @param {string} originalString\n * @param {[RegExp, (match: string, util: any) => string][]} rules\n * @param {any} extraUtils\n * @return {string}\n */\nfunction simuLex(originalString, rules, extraUtils = {}) {\n  let remaining = originalString;\n  let out = '';\n  const rand = getRandFn();\n\n  // Simulate the way a Lex scanner would do things\n  while (remaining.length > 0) {\n    /**\n     * @type {null | {match: string, replacer: (match: string, util: any) => string}}\n     */\n    let bestMatch = null;\n    let bestMatchLength = 0;\n\n    // Test every rule the remaining text, every time.\n    // If multiple rules match, use the one with the longest matching text.\n    // If there's a tie for longest matching text, use the rule that appears\n    // higher up in the list of rules.\n    rules.forEach(function ([regex, replacer]) {\n      const matches = remaining.match(regex);\n      if (matches && matches[0].length > bestMatchLength) {\n        bestMatch = { match: matches[0], replacer };\n        bestMatchLength = matches[0].length;\n      }\n    });\n    if (bestMatch === null) {\n      // If there is no match for the current string, pass the first letter\n      // through unchanged.\n      out += remaining[0];\n      remaining = remaining.slice(1);\n    } else {\n      remaining = remaining.slice(bestMatch.match.length);\n      out += bestMatch.replacer(bestMatch.match, { rand, ...extraUtils });\n    }\n  }\n  return out;\n}\n\nsimuLex.preprocessRules =\n  /**\n   *\n   * @param {[string, (match: string, util: any) => string][]} rawRules\n   * @returns {[RegExp, (match: string, util: any) => string][]}\n   */\n  function (rawRules) {\n    return rawRules.map(function ([regex, replacer]) {\n      return [new RegExp(`^${regex}`), replacer];\n    });\n  };\n\n/**\n * Emulates perl's tr/// aka y/// \"translate\" operator.\n * @see https://perldoc.perl.org/perlop.html#Quote-Like-Operators\n * @param {string} initialString\n * @param {string} searchList\n * @param {string} replacementList\n */\nfunction tr(initialString, searchList, replacementList) {\n  return initialString\n    .split('')\n    .map((c) => {\n      let k = searchList.indexOf(c);\n      if (k === -1) {\n        return c;\n      } else {\n        return replacementList.charAt(k);\n      }\n    })\n    .join('');\n}\n\nmodule.exports = {\n  getRandFn,\n  isUpperCase,\n  sameCap,\n  sameCapReplacer,\n  simuLex,\n  tr,\n};\n","module.exports = {\n  b1ff: require('./src/b1ff')['b1ff'],\n  censor: require('./src/censor')['censor'],\n  chef: require('./src/chef')['chef'],\n  cockney: require('./src/cockney')['cockney'],\n  eleet: require('./src/eleet')['eleet'],\n  fudd: require('./src/fudd')['fudd'],\n  jethro: require('./src/jethro')['jethro'],\n  jibberish: require('./src/jibberish')['jibberish'],\n  ken: require('./src/ken')['ken'],\n  kenny: require('./src/kenny')['kenny'],\n  klaus: require('./src/klaus')['klaus'],\n  ky00te: require('./src/ky00te')['ky00te'],\n  LOLCAT: require('./src/LOLCAT')['LOLCAT'],\n  nethackify: require('./src/nethackify')['nethackify'],\n  newspeak: require('./src/newspeak')['newspeak'],\n  nyc: require('./src/nyc')['nyc'],\n  pirate: require('./src/pirate')['pirate'],\n  rasterman: require('./src/rasterman')['rasterman'],\n  scottish: require('./src/scottish')['scottish'],\n  scramble: require('./src/scramble')['scramble'],\n  spammer: require('./src/spammer')['spammer'],\n  studly: require('./src/studly')['studly'],\n  uniencode: require('./src/uniencode')['uniencode'],\n  upsidedown: require('./src/upsidedown')['upsidedown'],\n};\n","/**\n * B1FF filter.\n *\n * @copyright (c) 1999 Joey Hess\n * @license GPL-2+\n * @author Aaron Wells\n */\n\nconst { getRandFn } = require('./lib.js');\n\n// # I use an array, not a hash. because order is important.\nfunction b1ff(initialString) {\n  const rand = getRandFn();\n  return initialString\n    .split('\\n')\n    .map((line) => {\n      return (\n        line\n          .toUpperCase()\n          .replace(/;/g, ',')\n          .replace(/'/g, '')\n          .replace(/\\bEVERYONE\\b/g, 'EVRY 1')\n          .replace(/\\bEVERYBODY\\b/g, 'EVRY BUDY')\n          .replace(/\\bEVERY\\b/g, 'EVRY')\n          .replace(/\\bONE\\b/g, '1')\n          .replace(/\\bAND\\b/g, '+')\n          .replace(/\\bYOU/g, 'U')\n          .replace(/\\bITS\\b/g, 'IT\"S')\n          .replace(/\\bIT\\'S\\b/g, 'ITS')\n          .replace(/\\bIS\\b/g, 'IZ')\n          .replace(/\\bLINUX\\b/g, 'LINUS')\n          .replace(/\\bUNIX\\b/g, 'THE MANEFRA1M O/S')\n          .replace(/\\bWINDOWS\\b/g, 'WINDOWZ (IT RULEZ MAN!)')\n          .replace(/\\bYOU\\'RE\\b/g, 'YOUR')\n          .replace(/\\bTHEM\\b/g, 'THUM')\n          // .replace(/\\bHERE\\b/g, \"HERE\")\n          .replace(/\\bTHEY\\'RE\\b/g, 'THE1R')\n          .replace(/\\bTHEIR\\b/g, 'THERE')\n          .replace(/\\bWAS\\b/g, 'WUZ')\n          .replace(/\\bMACINTOSH\\b/g, 'IMAC') // too 90's?\n          .replace(/\\bVERY\\b/g, 'TOTALLY')\n          .replace(/\\bCOMPUTER\\b/g, 'VIC-20')\n          .replace(/\\bWHETHER\\b/g, 'WHETHUR')\n          .replace(/\\b(?:H|CR)ACKER\\b/g, 'KEWL HACKER D00D!')\n          .replace(/\\bOF\\b/g, 'UV')\n          .replace(/\\bGNU\\b/g, 'NEW')\n          .replace(/\\bQUITE\\b/g, 'REAL')\n          .replace(/\\bFREE\\b/g, 'FREE!')\n          .replace(/HOME/g, 'HUM')\n          .replace(/COME/g, 'CUM')\n          .replace(/MICRO/g, 'MIKRO')\n          .replace(/GOVERN/g, 'GUVERN')\n          .replace(/PERSON/g, 'D00D')\n          .replace(/SOME/g, 'SUM')\n          .replace(/WRITE/g, 'RITE')\n          .replace(/REAL/g, 'REEL')\n          .replace(/LITE/g, 'L1TE')\n          .replace(/BIAN/g, 'B1AN')\n          .replace(/TION/g, 'SHUN')\n          .replace(/FOR(R|E\\b)?/g, '4')\n          .replace(/\\bTO(?=\\b|NIGHT|NITE|DAY|MORROW|GETHER|WARD|MATO)/g, '2')\n          .replace(/TOO/g, '2')\n          .replace(/ATE/g, '8')\n          // .replace(/\\b2TALLY\\b/g, \"TOTALY\") // fix from line above\n          .replace(/LL/g, 'L')\n          .replace(/OO/g, '00')\n          .replace(/MATE/g, 'M8')\n          .replace(/ER/g, 'UR')\n          .replace(/S+\\b/g, 'Z')\n          .replace(/KN/g, 'N')\n          .replace(/IE/g, 'EI')\n          // I guess b1ff doesn't use two spaces after his periods. How 90s-rude!\n          .replace(/\\.  /g, '. ')\n          .replace(/\\./g, () => {\n            switch (rand() % 3) {\n              case 0:\n                return '.';\n              case 1:\n                return '!';\n              case 2:\n                return ',';\n            }\n          })\n          .replace(/!+/g, (match) => {\n            let ret = match + '!';\n            const length = rand() % 5;\n            let prevWasMangled = false;\n            for (let i = 0; i < length; i++) {\n              // b1ff can't hold down on shift too well!!!!!!!1!\n              if (!prevWasMangled && rand() % 3 === 2) {\n                ret = ret + '1';\n                prevWasMangled = true;\n              } else {\n                ret = ret + '!';\n                prevWasMangled = false;\n              }\n            }\n            return ret;\n          })\n          .replace(/\\?+/g, (match) => {\n            let ret = '';\n            const length = (rand() % 5) + 1;\n            let prevWasMangled = false;\n            while (ret.length < length) {\n              if (!prevWasMangled && rand() % 5 > 2) {\n                ret = ret + '?!';\n                prevWasMangled = true;\n              } else if (!prevWasMangled && rand() % 5 > 3) {\n                ret = ret + '?1';\n                prevWasMangled = true;\n              } else {\n                ret = ret + '?';\n                prevWasMangled = false;\n              }\n            }\n            return match + ret;\n          })\n          .replace(/I/g, () => (rand() % 3 > 2 ? '1' : 'I'))\n      );\n    })\n    .join('\\n');\n}\n\nmodule.exports = { b1ff };\n","/**\n * Censor filter.\n *\n * @copyright (c) 2002 Joey Hess\n * @license GPL-2+\n * @author Aaron Wells\n */\n\nconst tr = require('./lib').tr;\n\n/**\n * List of regexes to censor, encoded in ROT-13 so this program itself won't\n * trigger obscenity filters.\n */\nconst censoredWords = [\n  'ahqr',\n  'enaql',\n  'gjng',\n  'pbpx',\n  't-fcbg',\n  'anxrq',\n  'encr',\n  'grng',\n  'pbzrvat',\n  't\\\\f+fcbg',\n  'avccyr',\n  'erne',\n  'guebng',\n  'pbzvat',\n  'tebva',\n  'bcravat',\n  'fangpu',\n  'gvg',\n  'pebgpu',\n  'ubbgre',\n  'beny',\n  'fchax',\n  'gvggl',\n  'penc',\n  'ubeal',\n  'betl',\n  'fcrez',\n  'gvggvr',\n  'penpx',\n  'ubyr',\n  'betnfz',\n  'fcuvapgre',\n  'hgrehf',\n  'pernz',\n  'uhzc',\n  'certanag',\n  'fghq',\n  'ihyin',\n  'phag',\n  'unaqwbo',\n  'cevpx',\n  'fgnss',\n  'intvan',\n  'phz',\n  'urnq',\n  'chff',\n  'fhpx',\n  'ivetva',\n  'phzzvat',\n  'wvfz',\n  'chffl',\n  'fjnyybj',\n  'ivoengbe',\n  'pnzr',\n  'xabo',\n  'chffvrf',\n  'fperj',\n  'jbzo',\n  'preivk',\n  'xvff',\n  'chovp',\n  'frk',\n  'jrg',\n  'pureel',\n  'ybir',\n  'chqraqhz',\n  'frkhny',\n  'juber',\n  'pyvg',\n  'ybire',\n  'chzc',\n  'frrq',\n  'kkk',\n  'pyvgbevf',\n  'ybirq',\n  'cnagvrf',\n  'frzra',\n  'nany',\n  'pyvggl',\n  'ybnq',\n  'crargengr',\n  'funsg',\n  'nerbyn',\n  'pyvznk',\n  'ynovn',\n  'crargengrq',\n  'funt',\n  'nff',\n  'qevyyrq',\n  'ynvq',\n  'cravf',\n  'funttvat',\n  'nffubyr',\n  'qrsybjre',\n  'yrfovna',\n  'crgre',\n  'fuvg',\n  'obbo',\n  'qvpx',\n  'yvcf',\n  'crpxre',\n  'fvrt\\\\furvy',\n  'oernfg',\n  'qvyqb',\n  'znfgheong',\n  'cunyyhf',\n  'fyhg',\n  'ohgg',\n  'rebgvp',\n  'znfgheongr',\n  'cvff',\n  'fyhggvfu',\n  'ohggbpx',\n  'rerpgvba',\n  'znfgheongvat',\n  'ebfrohq',\n  'fyvg',\n  'onyy',\n  'rkcbfrq',\n  'znzznel',\n  'ebq',\n  'gbathr',\n  'ovgpu',\n  'shpx',\n  'znzznevrf',\n  'ehg',\n  'gbby',\n  'oybj',\n  'snpvny',\n];\n\n// De-ROT13 the censored words, and concat them into one RegExp snippet,\n// with a \"|\" alternator between each.\nconst censorCombined = censoredWords\n  .map((word) =>\n    tr(word, 'abcdefghijklmnopqrstuvwxyz', 'nopqrstuvwxyzabcdefghijklm')\n  )\n  .join('|');\n// Compile an actual RegExp from the combined string.\n// Don't say \"CENSOREDed\"\nconst censorRE = new RegExp(`\\\\b(${censorCombined})(ed)?`, 'ig');\n\n/**\n *\n * @param {string} originalString\n * @param {string[]} [additionalWords]\n * @returns {string};\n */\nfunction censor(originalString, additionalWords) {\n  const censoredString = originalString.replace(censorRE, 'CENSORED');\n  if (additionalWords) {\n    return censoredString.replace(\n      new RegExp(`\\\\b(${additionalWords.join('|')})(ed)?)`, 'ig'),\n      'CENSORED'\n    );\n  } else {\n    return censoredString;\n  }\n}\n\nmodule.exports = { censor };\n","/**\n * Swedish Chef filter. Bork Bork Bork!\n *\n * @copyright (c) 1999 Joey Hess\n * @license GPL-2+\n * @author Aaron Wells\n */\n\n/**\n * Note that the order of the commands in this program is very important!\n *\n * @param {string} initialString\n * @returns {string}\n */\nfunction chef(initialString) {\n  // This whole function will be just a chain of\n  // string.replace() calls.\n  return (\n    initialString\n\n      // // Change 'e' at the end of a word to 'e-a', but don't mess with the word\n      // // \"the\".\n      .replace(/(\\w+)e(\\b)/g, function (whole, p1, p2) {\n        if (p1.toLowerCase() === 'th') {\n          return whole;\n        } else {\n          return `${p1}e-a${p2}`;\n        }\n      })\n\n      // Stuff that happens at the end of a word.\n      .replace(/en(\\b)/g, 'ee$1')\n      .replace(/th(\\b)/g, 't$1')\n\n      // Stuff that happens if not the first letter of a word.\n      .replace(/(\\w)f/g, '$1ff')\n\n      // Change 'o' to 'u' and at the same time, change 'u' to 'oo'. But only\n      // if it's not the first letter of the word.\n      .replace(/[ou]/g, (match) => (match === 'o' ? 'u' : 'o'))\n      .replace(/(\\b)([ou])/g, (whole, p1, p2) => (p1 + p2 === 'o' ? 'u' : 'o'))\n      // # Note that this also handles doubling \"oo\" at the beginning of words.\n      .replace(/o/g, 'oo')\n      // # Have to double \"Oo\" seperatly.\n      .replace(/(\\b)O(\\w)/g, '$1Oo$2')\n      // # Fix the word \"bork\", which will have been mangled to \"burk\"\n      // # by above commands. Note that any occurrence of \"burk\" in the input\n      // # gets changed to \"boork\", so it's completly safe to do this:\n      .replace(/\\b([Bb])urk\\b/g, '$1ork')\n\n      // # Stuff to do to letters that are the first letter of any word.\n      .replace(/\\be/g, 'i')\n      .replace(/\\bE/g, 'I')\n\n      // # Stuff that always happens.\n      .replace(/tiun/g, 'shun') // this actually has the effect of changing \"tion\" to \"shun\".\n      .replace(/the/g, 'zee')\n      .replace(/The/g, 'Zee')\n      .replace(/[vVwW]/g, (match) => {\n        switch (match) {\n          case 'v':\n            return 'f';\n          case 'V':\n            return 'F';\n          case 'w':\n            return 'v';\n          case 'W':\n            return 'V';\n        }\n      })\n\n      // # Stuff to do to letters that are not the last letter of a word.\n      .replace(/a(?!\\b)/g, 'e')\n      .replace(/A(?!\\b)/g, 'E')\n\n      .replace(/en/g, 'un') // this actually has the effect of changing \"an\" to \"un\".\n      .replace(/En/g, 'Un') // this actually has the effect of changing \"An\" to \"Un\".\n      .replace(/eoo/g, 'oo') // this actually has the effect of changing \"au\" to \"oo\".\n      .replace(/Eoo/g, 'Oo') // this actually has the effect of changing \"Au\" to \"Oo\".\n\n      // # Change \"ow\" to \"oo\".\n      .replace(/uv/g, 'oo')\n\n      // # Change 'i' to 'ee', but not at the beginning of a word,\n      // # and only affect the first 'i' in each word.\n      .replace(/(\\b\\w[a-hj-zA-HJ-Z]*)i/g, '$1ee')\n\n      // # Special punctuation of the end of sentances but only at end of lines.\n      .replace(/([.?!])$/gm, '$1\\nBork Bork Bork!')\n  );\n}\n\nmodule.exports = { chef };\n","/**\n * Lex filter to transform plain English into Cockney English.\n * No racial or societal slurs are intended.  For amusement only.\n *\n * Reproduction permitted so long as this notice is retained.\n *\n * @copyright (c) 1986 Daniel Klein.\n * @license GPL\n * @author Aaron Wells\n */\n\nconst { getRandFn } = require('./lib.js');\n\n/**\n *\n *\n * @param {string} initialString\n * @return {string}\n */\nfunction cockney(initialString) {\n  const I_rand = getRandFn();\n  function I() {\n    if (I_rand() % 5 === 1) {\n      return 'Oy';\n    } else {\n      return 'I';\n    }\n  }\n\n  let b_count = 0;\n  let b_which = 0;\n  function bloody() {\n    if (b_count++ % 2 === 0) {\n      switch (b_which++ % 4) {\n        case 0:\n          return ' bloody';\n        case 1:\n          return \" flinkin'\";\n        case 2:\n          return \" bleedin'\";\n        case 3:\n          return \" soddin'\";\n      }\n    }\n    return '';\n  }\n\n  const dintI_rand = getRandFn();\n\n  /**\n   * Every other sentence that contains \"I/we went/had/did\", tag \"..., didn't I/we?\"\n   * on the end.\n   *\n   * @param {number} offset\n   * @param {string} fullstring\n   * @returns\n   */\n  function dintI(offset, fullstring) {\n    let sentence = fullstring\n      .substr(0, offset + 1)\n      .match(/(?:^|(?:\\w|')[.?])([^.?]+)$/);\n\n    if (sentence && sentence.length && sentence[1]) {\n      let sentenceStr = sentence[1].trim();\n\n      // Find out if the sentence contains an \"I\" phrase\n      /** @type {false | string} */\n      let iOrWe = false;\n      const indexOfI = sentenceStr.search(/\\b(I|Oy) did\\b/);\n      if (indexOfI !== -1) {\n        iOrWe = 'I';\n      }\n      // Find out if the sentence contains a \"we\" phrase.\n      // If it has both \"I\" and \"we\", then use whichever came first\n      // in the sentence (because that's most likely to be the subject\n      // of the sentence's action, so it makes the most sense for it to\n      // agree with the final phrase.)\n      const indexOfWe = sentenceStr.search(/\\b[Ww]e\\s(?:went|had|did)\\b/);\n      if (indexOfWe !== -1 && (!iOrWe || indexOfWe < indexOfI)) {\n        iOrWe = 'we';\n      }\n      if (iOrWe && dintI_rand() % 2 === 0) {\n        // Find the full text of the preceeding sentence.\n\n        switch (iOrWe) {\n          case 'I':\n            return \", didn'I?\";\n          case 'we':\n            return \", din't we?\";\n        }\n      }\n    }\n    return '.';\n  }\n\n  const pooped_rand = getRandFn();\n  function pooped() {\n    switch (pooped_rand() % 3) {\n      case 0:\n        return 'knackered';\n      case 1:\n        return 'shagged out';\n      default:\n        return 'done in';\n    }\n  }\n\n  return (\n    initialString\n      // Half the time, insert a mild swear after \"the\"\n      .replace(/\\b[Tt]he\\b/g, (match) => `${match}${bloody()}`)\n      // steal => nick\n      .replace(/\\bSteal\\b/g, 'Nick')\n      .replace(/\\bsteal\\b/g, 'nick')\n      // stole => nicked\n      .replace(/\\bStole\\b/g, 'Nicked')\n      .replace(/\\bstole\\b/g, 'nicked')\n      // tired => (slang)\n      .replace(/\\btired\\b/g, () => pooped())\n      // You see => Y'see\n      .replace(/([Yy])ou\\s+(?=[^aeiouy])/g, \"$1'\")\n      // and => 'n'\n      .replace(/\\band\\b/g, \"'n'\")\n      // were/was => wuz\n      .replace(/\\b(?:were|was)\\b/g, 'wuz')\n      // hello => 'ullo\n      .replace(/Hello/g, \"'Ullo\")\n      .replace(/hello/g, \"'ullo\")\n      // h- => '-\n      .replace(/\\b[Hh]/g, \"'\")\n      // your => yer\n      .replace(/\\b([Yy])our\\b/g, '$1er')\n      // it => i'\n      .replace(/\\bit\\b/g, \"i'\")\n      // go => gow\n      .replace(/\\bgo\\b/g, 'gow')\n      // my => me\n      .replace(/\\bmy\\b/g, 'me')\n      // this/that\n      .replace(/\\b(?:this|that)\\b/g, '$&')\n      // I went/had/did => I did\n      .replace(/\\bI\\s(?:went|had|did)\\b/g, () => 'I did')\n      // I => Oy (sometimes)\n      .replace(/\\bI\\b/g, () => I())\n      // What are => Wotta (eos)\n      .replace(/([Ww])hat\\s+are\\b/g, '$1otta')\n      // -other => -uvver\n      .replace(/(\\b|[MmNnRr])other/g, '$1uvver')\n      // mouth/south => mouf/souf\n      .replace(/([MmSs])outh/g, '$1owf')\n      // couth/youth => coof/yoof\n      .replace(/([cYy])outh/, '$1oof')\n      // -uth => -uf\n      .replace(/([^o]u)th/g, '$1f')\n      // th- => f- (except \"this\", \"that\", and \"the-\")\n      .replace(/\\bth(?!e|is\\b|at\\b)/g, 'f')\n      // ath/eth/ith/oth => af/ef/if/of\n      .replace(/([AaEeIiOo])th(?![em])/g, '$1f')\n      // oothe => oove\n      .replace(/oothe/g, 'oove')\n      // eithe/eethe => eeve\n      .replace(/e[ei]the/g, 'eeve')\n      // ooth/eeth => oof/eef\n      .replace(/(oo|ee)th/g, '$1f')\n      // athe/ethe/ithe => avve/evve/ivve\n      .replace(/([aei])the/g, '$1vve')\n      // th => v (except \"this\", \"that\", and \"the\")\n      .replace(/\\Bth|\\bth(?!(e|at|is)\\b)/g, 'v')\n      // -ime => -oime\n      .replace(/ime\\b/g, 'oime')\n      // -ake/-ame => -ike/-ime\n      .replace(/a([km])e\\b/g, 'i$1e')\n      // -old- => -owld-\n      .replace(/([^r][Oo])ld/g, '$1wld')\n      // -ond-/-und- => -unn-\n      .replace(/([^AaEeIiOoUu])[uo]nd\\B/g, '$1unn')\n      // -ing => -in' (eos)\n      .replace(/ing\\b/g, \"in'\")\n      // getter -> ge'er\n      .replace(/([^dg])get+(?!h)/g, \"$1ge'\")\n      // ail => aiw\n      .replace(/ail/g, 'aiw')\n      // any => enny\n      .replace(/any/g, 'enny')\n      // -ray/-say => -righ/-sigh\n      .replace(/([rSs])ay\\b/g, '$1igh')\n      // way => why\n      .replace(/way/g, 'why')\n      // -bit/-hit => -bi'/-hi'\n      .replace(/([BbHh])it\\b/g, \"$1i'\")\n      // -ait => -ite\n      .replace(/ait\\b/g, 'ite')\n      // -ize- => -oize-\n      .replace(/([^e])ize(?!n)/g, '$1oize')\n      // -ight => -oit\n      .replace(/([^e])ight/g, '$1oit')\n      // (sentence)? -> (sentence), roit?\n      .replace(/(\\w|')\\?/g, (match, p1) => {\n        return p1 + ', roit?';\n      })\n      // (sentence). -> (sentence), din't I?\n      .replace(\n        /(\\w|')\\./g,\n        (match, p1, offset, fulltext) => p1 + dintI(offset, fulltext)\n      )\n  );\n}\n\nmodule.exports = { cockney };\n","/**\n * Eleet filter\n *\n * K3wl hacker slang\n *\n * @copyright (c) 1999, 2002 Joey Hess\n * @license GPL-2+\n * @author Aaron Wells\n */\nconst { sameCapReplacer, tr } = require('./lib');\n\nlet from = 'abcdefghijklmnopqrstuvwxyz';\nfrom = from + from.toUpperCase();\nlet to = '4bcd3fgh1jklmn0pqr5tuvwxyz';\nto = to + to.toUpperCase();\n\nfunction eleet(initialString) {\n  return tr(\n    initialString\n      .replace(/porn/g, sameCapReplacer('pr0n'))\n      .replace(/elite/g, sameCapReplacer('l33t')),\n    from,\n    to\n  );\n}\n\n// # These are not in common usage anymore.\n// #s:h:|-|:ig;\n// #s:l:|_:ig;\n// #s:m:/\\\\/\\\\:ig;\n// #s:n:/\\\\/:ig;\n// #s:w:\\\\/\\\\/:ig;\n// #s:v:\\\\/:ig;\n// #s:x:><:ig;\n\nmodule.exports = { eleet };\n","/**\n * Hillbilly text filter.\n *\n * @copyright (c) 1993 Duane Paulson <ci922@cleveland.freenet.edu> \"dap\"\n * @copyright (c) 2019 Aaron Wells (JavaScript port)\n * @license GPL-2+\n * @author Aaron Wells\n */\nconst sameCapReplacer = require('./lib').sameCapReplacer;\n\n/**\n * @param {string} originalString\n * @returns {string}\n */\nfunction jethro(originalString) {\n  return (\n    originalString\n      // {SW}[Gg]reetings{EW}\t|\n      // {SW}[Hh]i{EW}\t\t|\n      // {SW}[Hh]ello{EW}\tSESUB(\"Howdy\");\n      .replace(/\\b(?:[Gg]reetings|[Hh]i|[Hh]ello)\\b/g, sameCapReplacer('Howdy'))\n      // {SW}[Bb]ye{EW}\t\t|\n      // {SW}[Gg]oodbye{EW}\tSESUB(\"Y'all come back now, heah?\");\n      .replace(\n        /\\b(?:[Bb]ye|[Gg]oodbye)\\b/g,\n        sameCapReplacer(\"Y'all come back now, heah?\")\n      )\n      // {SW}[Hh]ear{EW}\tSESUB(\"Heah\");\n      .replace(/\\b[Hh]ear\\b/g, sameCapReplacer('Heah'))\n      // {SW}[Cc]ar{EW}\t\t|\n      // {SW}[Aa]uto{EW}\t\t|\n      // {SW}[Aa]utomobile{EW}\tSESUB(\"Gasoline buggy\");\n      .replace(\n        /\\b(?:[Cc]ar|[Aa]uto|[Aa]utomobile)\\b/g,\n        sameCapReplacer('Gasoline  buggy')\n      )\n      // {SW}[Rr]elax{EW}\tSESUB(\"Set a spell -- put yore feet up\");\n      .replace(\n        /\\b[Rr]elax\\b/g,\n        sameCapReplacer('Set a spell -- put your feet up')\n      )\n      // [Ss]wimming{BW}pool\tSUB(\"Cement pond\");\n      .replace(/\\b[Ss]wimming\\s+pool/g, sameCapReplacer('Cement pond'))\n      // [Pp]ool{BW}table\tSUB(\"Fancy eatin table\");\n      .replace(/\\b[Pp]ool\\s+table/g, sameCapReplacer('Fancy eating table'))\n      // [Pp]ool{BW}cue\t\t|\n      // [Cc]ue{BW}stick\t\tSUB(\"Fancy pot passer\");\n      .replace(\n        /\\b(?:[Pp]ool\\s+cue|[Cc]ue\\s+stick)/g,\n        sameCapReplacer('Fancy pot passer')\n      )\n      // {SW}[Bb][r]?oil{EW}\t|\n      // {SW}[Bb]ake{EW}\t\t|\n      // {SW}[Ff]ry{EW}\t\t|\n      // {SW}[Ss]aute{EW}\t|\n      // {SW}[Cc]ook{EW}\tSESUB(\"Whomp up\")\n      .replace(\n        /\\b(?:[Bb]r?oil|[Bb]ake|[Ff]ry|[Ss]autee?|[Cc]ook)\\b/g,\n        sameCapReplacer('Whomp up')\n      )\n      // {SW}[Bb][r]?oiling{EW}\t|\n      // {SW}[Bb]akeing{EW}\t|\n      // {SW}[Ff]rying{EW}\t|\n      // {SW}[Ss]auteing{EW}\t|\n      // {SW}[Cc]ooking{EW}\tSESUB(\"Whompin up\");\n      .replace(\n        /\\b(?:[Bb]r?oiling|[Bb]akeing|[Ff]rying|[Ss]autee?ing|[Cc]ooking)\\b/g,\n        sameCapReplacer('Whomping up')\n      )\n      // {SW}[Bb][r]?oiled{EW}\t|\n      // {SW}[Bb]aked{EW}\t|\n      // {SW}[Ff]ryed{EW}\t|\n      // {SW}[Ss]auted{EW}\t|\n      // {SW}[Cc]ooked{EW}\tSESUB(\"Done whomped up\");\n      .replace(\n        /\\b(?:[Bb]r?oiled|[Bb]aked|[Ff]r[yi]ed|[Ss]autee?d)\\b/g,\n        sameCapReplacer('Done whomped up')\n      )\n      // {SW}[Bb][r]?oils{EW}\t|\n      // {SW}[Bb]akes{EW}\t|\n      // {SW}[Ff]rys{EW}\t\t|\n      // {SW}[Ss]autes{EW}\t|\n      // {SW}[Cc]ooks{EW}\tSESUB(\"Whomps up\");\n      .replace(\n        /\\b(?:[Bb]r?oils|[Bb]akes|[Ff]r(?:y|ie)s|[Ss]autee?s|[Cc]ooks)\\b/g,\n        sameCapReplacer('Whomps up')\n      )\n      // {SW}[Gg]roceries{EW}\t|\n      // {SW}[Ff]ood{EW}\t\tSESUB(\"Vittles\");\n      .replace(/\\b(?:[Gg]roceries|[Ff]ood)\\b/g, sameCapReplacer('Vittles'))\n      // [Ss]alad\t\tSUB(\"Slaw\");\n      .replace(/[Ss]alad/g, sameCapReplacer('Slaw'))\n      // [Vv]egetable\t\tSUB(\"Green\");\n      .replace(/[Vv]egetable/g, sameCapReplacer('Green'))\n      // [Pp]otato\t\tSUB(\"Tater\");\n      .replace(/[Pp]otato/g, sameCapReplacer('Tater'))\n      // {SW}[Tt]omato\t\tSSUB(\"Tuhmater\");\n      .replace(/\\b[Tt]omato/g, sameCapReplacer('Tuhmater'))\n      // {SW}[Rr]hubarb{EW}\tSESUB(\"Pie plant\");\n      .replace(/\\b[Rr]hubarb\\b/g, sameCapReplacer('Pie plant'))\n      // {SW}[Ll]iquor{EW}\t|\n      // {SW}[Ww]hisk[e]?y{EW}\t|\n      // {SW}[Ss]cotch{EW}\t|\n      // {SW}[Bb]ourbon{EW}\t|\n      // {SW}[Gg]in{EW}\t\t|\n      // {SW}[Vv]odka{EW}\t|\n      // {SW}[Tt]equila{EW}\t|\n      // {SW}[Ll]iqueur{EW}\tSESUB(\"Rheumatiz medcin\");\n      .replace(\n        /\\b(?:[Ll]iqu(?:o|eu)r|[Ww]hiske?y|[Ss]cotch|[Bb]ourbon|[Gg]in|[Vv]odka|[Tt]equila)\\b/g,\n        sameCapReplacer('Rheumatiz medcin')\n      )\n      // {SW}[Bb]ooze{EW}\tSESUB(\"Corn likker\");\n      .replace(/\\b[Bb]ooze\\b/g, sameCapReplacer('Corn likker'))\n      // {SW}[Cc]ocktail{EW}\t|\n      // {SW}[Mm]ixed{BW}drink{EW} SESUB(\"Waste of good likker\");\n      .replace(\n        /\\b(?:[Cc]ocktail|[Mm]ixed\\s+drink)\\b/g,\n        sameCapReplacer('Waste of good likker')\n      )\n      // {SW}[Bb]ar{EW}\t\tSESUB(\"Dance hall\");\n      .replace(/\\b[Bb]ar\\b/g, sameCapReplacer('Dance hall'))\n      // {SW}[Bb]ars{EW}\t\tSESUB(\"Dance halls\");\n      .replace(/\\b[Bb]ars\\b/g, sameCapReplacer('Dance halls'))\n      // {SW}[Ss]aloon\t\t|\n      // {SW}[Cc]ocktail{BW}lounge SESUB(\"Dance hall\");\n      .replace(\n        /\\b(?:[Ss]aloon|[Cc]ocktail\\s+lounge)/g,\n        sameCapReplacer('Dance hall')\n      )\n      // {SW}[Ww]hore\t\t|\n      // {SW}[Pp]rostitute\t|\n      // {SW}[Ss]lut\t\tSSUB(\"Dance hall girl\");\n      .replace(\n        /\\b(?:[Ww]hore|[Pp]rostitute|[Ss]lut)/g,\n        sameCapReplacer('Dance hall girl')\n      )\n      // {SW}[Ss]ecret{BW}agent{EW} |\n      // {SW}[Ss]py{EW}\t\t|\n      // {SW}007{EW}\t\tSESUB(\"Double nought spy\");\n      .replace(\n        /\\b(?:[Ss]ecret\\s+agent|[Ss]py|007)\\b/g,\n        sameCapReplacer('Double nought spy')\n      )\n      // {SW}[Zz]ero{EW}\t\tSESUB(\"Nought\");\n      .replace(/\\b[Zz]ero\\b/g, sameCapReplacer('Nought'))\n      // {SW}[Pp]ants{EW}\tSESUB(\"Trousers\");\n      .replace(/\\b[Pp]ants\\b/g, sameCapReplacer('Trousers'))\n      // {SW}[Jj]eans{EW}\t|\n      // {SW}[Dd]ungarees{EW}\t|\n      // {SW}[Ll]evi[']?s{EW}\tSESUB(\"Overhalls\");\n      .replace(\n        /\\b([Jj]eans|[Dd]ungarees|[Ll]evi'?s)\\b/g,\n        sameCapReplacer('Overhalls')\n      )\n      // {SW}[Ss]hoe\t\tSSUB(\"High-button shoe\");\n      .replace(/\\b[Ss]hoe/g, sameCapReplacer('High-button shoe'))\n      // {SW}[Jj]acket\t\tSSUB(\"Coat\");\n      .replace(/\\b[Jj]acket/g, sameCapReplacer('Coat'))\n      // {SW}[Ss]hotgun\t\tSSUB(\"Fowlin piece\");\n      .replace(/\\b[Ss]hotgun/g, sameCapReplacer('Fowlin piece'))\n      // {SW}[Rr]evolver\t\t|\n      // {SW}[Gg]un\t\tSSUB(\"Shootin iron\");\n      .replace(/\\b([Rr]evolver|[Gg]un)/g, sameCapReplacer('Shooting iron'))\n      // {SW}[Rr]ifle\t\tSSUB(\"Ozark longrifle\");\n      .replace(/\\b[Rr]ifle/g, sameCapReplacer('Ozark longrifle'))\n      // {SW}[Ll]ibrar[yi]\tSSUB(\"Liberry\");\n      .replace(/\\b[Ll]ibrar[yi]/g, sameCapReplacer('Liberry'))\n      // [Ww]ash\t\t\tSUB(\"Warsh\");\n      .replace(/[Ww]ash/g, sameCapReplacer('Warsh'))\n      // [Ff]amily\t\tSUB(\"Fambly\");\n      .replace(/[Ff]amily/g, sameCapReplacer('Fambly'))\n      // [Ff]ry{BW}pan\t\t|\n      // [Ff]rying{BW}pan\t|\n      // [Ss]aute{BW}pan\t\tSUB(\"Skillet\");\n      .replace(\n        /(?:[Ff]ry|[Ff]rying|[Ss]autee?)\\s+pan/g,\n        sameCapReplacer('Skillet')\n      )\n      // {SW}[Aa]nimal\t\tSSUB(\"Critter\");\n      .replace(/\\b[Aa]nimal/g, sameCapReplacer('Critter'))\n      // {SW}FBI{EW}\t\t|\n      // {SW}F.B.I.{EW}\t\t|\n      // {SW}CIA{EW}\t\t|\n      // {SW}C.I.A.{EW}\t\t|\n      // {SW}ATF{EW}\t\t|\n      // {SW}A.T.F.{EW}\t\t|\n      // {SW}IRS{EW}\t\t|\n      // {SW}I.R.S.{EW}\t\t|\n      // {SW}SS{EW}\t\t|\n      // {SW}S.S.{EW}\t\t|\n      // {SW}[Ss]elective{BW}[Ss]ervice{EW} |\n      // {SW}[Ss]elective{BW}[Ss]ervice{BW}[Ss]ystem{EW} |\n      // {SW}[Ss]ecret{BW}[Ss]ervice{EW} SESUB(\"Revanooers\");\n      .replace(\n        /\\b(FBI|F\\.B\\.I\\.|CIA|C\\.I\\.A\\.|ATF|A\\.T\\.F\\.|IRS|I\\.R\\.S\\.|SS|S\\.S\\.|[Ss]elective\\s+[Ss]ervice(\\s+[Ss]ystem)?|[Ss]ecret\\s+[Ss]ervice)\\b/g,\n        sameCapReplacer('Revanooers')\n      )\n      // {SW}[Pp]olice\t\t|\n      // {SW}[Pp]oliceman\t|\n      // {SW}[Ss]heriff\t\t|\n      // {SW}[Dd]eputy\t\t|\n      // {SW}[Dd]eputy{BW}[Ss]heriff |\n      // {SW}[Mm]arshall\t\t|\n      // {SW}[Dd]eputy{BW}[Mm]arshall |\n      // {SW}[Pp]ark{BW}[Rr]anger |\n      // {SW}[Tt]exas{BW}[Rr]anger |\n      // {SW}[Hh]ighway{BW}[Pp]atrol SSUB(\"Constable\");\n      .replace(\n        /\\b([Pp]olice((wo)?man)?|[Dd]eputy(\\s+([Ss]heriff|[Mm]arshall))?|[Ss]heriff|[Mm]arshall|[Pp]ark\\s+[Rr]anger|[Hh]ighway\\s+[Pp]atrol)\\b/g,\n        sameCapReplacer('Constable')\n      )\n      // {SW}[Mm]other\t\t|\n      // {SW}[Mm][ao]mm[ay]? \t|\n      // {SW}[Mm]ommie\t\t|\n      // {SW}[Mm]om\t\tSSUB(\"Maw\");\n      .replace(\n        /\\b([Mm]other|[Mm][ao]mm[ay]|[Mm]ommie|[Mm]om)/g,\n        sameCapReplacer('Maw')\n      )\n      // {SW}[Mm]a{EW}\t\tSESUB(\"Maw\");\n      .replace(/\\b[Mm]a\\b/g, sameCapReplacer('Maw'))\n      // {SW}[Ff]ather\t\tSSUB(\"Paw\");\n      .replace(/\\b([Ff]ather|[Dd]addy)/g, sameCapReplacer('Paw'))\n      // {SW}[Dd]ad{EW}\t\t|\n      // {SW}[Dd]addy\t\t|\n      // {SW}[Pp]a{EW}\t\t|\n      // {SW}[Pp][ao]p{EW}\t|\n      // {SW}[Pp][ao]pp[ay]?{EW} SESUB(\"Paw\");\n      .replace(\n        /\\b([Dd]addy|([Dd]ad|[Pp]a|[Pp][ao]p|[Pp][ao]pp[ay])\\b)/g,\n        sameCapReplacer('Paw')\n      )\n      // {SW}[Gg]randmother{EW}\t|\n      // {SW}[Gg]randma[w]?{EW}\tSESUB(\"Granny\");\n      .replace(/\\b[Gg]rand(mother|maw?)\\b/g, sameCapReplacer('Granny'))\n      // {SW}[Gg]randfather{EW}\t|\n      // {SW}[Gg]ran[d]{1,2}ad[d]?[y]?{EW} |\n      // {SW}[Gg]randpop{EW}\t|\n      // {SW}[Gg]randpa[w]?{EW}\tSESUB(\"Grampy\");\n      .replace(\n        /\\b([Gg]randfaher|[Gg]rand{1,2}ad(dy)?|[Gg]randpop|[Gg]randpaw?)\\b/g,\n        sameCapReplacer('Grampy')\n      )\n      // {SW}[Mm]y{EW}\t\tSESUB(\"Mah\");\n      .replace(/\\b[Mm]y\\b/g, sameCapReplacer('Mah'))\n      // {SW}them{EW}\t\tSESUB(\"em\");\n      .replace(/\\bthem\\b/g, 'em')\n      // [Dd]og\t\t\tSUB(\"Dawg\");\n      .replace(/[Dd]og/g, sameCapReplacer('Dawg'))\n      // [Ll]awyer\t\t|\n      // [Ll]egal{BW}counc[ei]l\t|\n      // [Ll]egal{BW}councillor\t|\n      // [Aa]ttorney\t\t|\n      // [Aa]ttorney{BW}[Aa]t{BW}[Ll]aw SUB(\"City slicker\");\n      .replace(\n        /([Ll]awyer|[Ll]egal\\s+counc[ei]l|[Llegal]\\s+councillor|[Aa]ttorney(\\s+[Aa]t\\s+[Ll]aw)?)/g,\n        'City slicker'\n      )\n      // {SW}[Tt]han{EW}\t\tSESUB(\"Then\");\n      .replace(/\\b[Tt]han\\b/g, sameCapReplacer('Then'))\n      // [Cc]haracterize\t\tSUB(\"Show\");\n      .replace(/[Cc]haracteri[zs]e/g, sameCapReplacer('Show'))\n      // {SW}[Vv]ery{EW}\t\t|\n      // {SW}[Ee]xtremely{EW}\t|\n      // {SW}[Rr]eally{EW}\t|\n      // {SW}[Rr]eal{EW}\t\tSESUB(\"Right\");\n      .replace(\n        /\\b([[Vv]ery|[Ee]xtremely|[Rr]eal(ly)?)\\b/g,\n        sameCapReplacer('Right')\n      )\n      // {SW}[Hh]aven't{EW}\t|\n      // {SW}[Ii]sn't{EW}\t|\n      // {SW}[Aa]ren't{EW}\tSESUB(\"Aint\");\n      .replace(/\\b([Hh]aven't|[Ii]sn't|[Aa]ren't)\\b/g, sameCapReplacer('Aint'))\n      // {SW}[Ss]aid{EW}\t\t|\n      // {SW}[Ss]ays{EW}\t\tSESUB(\"Sez\");\n      .replace(/\\b([Ss]aid|[Ss]ays)\\b/g, sameCapReplacer('Sez'))\n      // {SW}[Aa]re{EW}\t\tSESUB(\"Is\");\n      .replace(/\\b[Aa]re\\b/g, sameCapReplacer('Is'))\n      // {SW}[Ss]hould{EW}\tSESUB(\"Ortta\");\n      .replace(/\\b[Ss]hould\\b/g, sameCapReplacer('Ortta'))\n      // {SW}[Pp]erhaps{EW}\t|\n      // {SW}[Mm]aybe{EW}\tSESUB(\"Mebbe\");\n      .replace(/\\b([Pp]erhaps|[Mm]aybe)\\b/g, sameCapReplacer('Mebbe'))\n      // {SW}[Ss]ick{EW}\t\tSESUB(\"Ailin'\");\n      .replace(/\\b[Ss]ick\\b/g, sameCapReplacer('Ailing'))\n      // {SW}I'm{BW}not{EW}\tSESUB(\"I aint\");\n      .replace(/\\bI'm{BW}not\\b/g, 'I aint')\n      // {SW}[Ss]cared{EW}\tSESUB(\"A-skeert\");\n      .replace(/\\b[Ss]cared\\b/g, sameCapReplacer('A-skeert'))\n      // {SW}[Ss]care\t\tSSUB(\"Skeer\");\n      .replace(/\\b[Ss]care/g, sameCapReplacer('Skeer'))\n      // {SW}[Hh]ave{EW}\t\tSESUB(\"Got\");\n      .replace(/\\b[Hh]ave\\b/g, sameCapReplacer('Got'))\n      // {SW}[Pp]ossess{EW}\tSESUB(\"Have\");\n      .replace(/\\b[Pp]ossess\\b/g, sameCapReplacer('Have'))\n      // {SW}[Hh]elp\t\tSSUB(\"Hep\");\n      .replace(/\\b[Hh]elp/g, sameCapReplacer('Hep'))\n      // {SW}[Tt]ired{EW}\tSESUB(\"Tuckered out\");\n      .replace(/\\b[Tt]ired\\b/g, sameCapReplacer('Tuckered out'))\n      // {SW}[Cc]ompletely{EW}\tSESUB(\"Plumb\");\n      .replace(/\\b[Cc]ompletely\\b/g, sameCapReplacer('Plumb'))\n      // {SW}[Dd]runk{EW}\tSESUB(\"A mite woozy\");\n      .replace(/\\b[Dd]runk\\b/g, sameCapReplacer('A mite woozy'))\n\n      // {SW}[Yy]es{EW}\t\tSESUB(\"Yep\");\n      .replace(/\\b[Yy]es\\b/g, sameCapReplacer('Yep'))\n      // {SW}[Nn]o{EW}\t\tSESUB(\"Nope\");\n      .replace(/\\b[Nn]o\\b/g, sameCapReplacer('Nope'))\n\n      // {SW}[Ii]t{BW}is{EW}\tSESUB(\"Tis\");\n      .replace(/\\b[Ii]t\\s+is\\b/g, sameCapReplacer('Tis'))\n      // {SW}[Aa]t{BW}all{EW}\t*(yytext+1)=(char)'A'; SESUB(\"A tall\");\n      .replace(/\\b[Aa]t\\s+all\\b/g, sameCapReplacer('A tall'))\n      // {SW}[Aa]m{EW}\t\t|\n      // {SW}[Ww]as{EW}\t\t|\n      // {SW}[Ww]ere{EW}\t\tSESUB(\"Wuz\");\n      .replace(/\\b([Aa]m|[Ww]as|[Ww]ere)\\b/g, sameCapReplacer('Wuz'))\n      // {SW}[Ww]asn't{EW}\tSESUB(\"Wasunt\");\n      .replace(/\\b[Ww]asn't\\b/g, sameCapReplacer('Wasunt'))\n      // {SW}[Ww]ants\t\tSSUB(\"Is after\");\n      .replace(/\\b[Ww]ants\\b/g, sameCapReplacer('Is after'))\n      // {SW}[Ww]anted{EW}\tSESUB(\"Was after\");\n      .replace(/\\b[Ww]anted\\b/g, sameCapReplacer('Was after'))\n      // {SW}[Ww]anting{EW}\tSESUB(\"Hankering after\");\n      .replace(/\\b[Ww]anting\\b/g, sameCapReplacer('Hankering after'))\n      // {SW}[Dd]oesn't{EW}\t|\n      // {SW}[Dd]on't{EW}\tSESUB(\"Dasent\");\n      .replace(/\\b([Ddoesn't|[Dd]on't)\\b/g, sameCapReplacer('Dasent'))\n      // {SW}[Yy]ou'll{EW}\tSESUB(\"Y'all will\");\n      .replace(/\\b[Yy]ou'll\\b/g, sameCapReplacer(\"Y'all will\"))\n      // {SW}[Mm]ore{EW}\t\tSESUB(\"Mo\");\n      .replace(/\\b[Mm]ore\\b/g, sameCapReplacer('Mo'))\n      // tial\t\t\tSUB(\"shul\");\n      .replace(/\\Btial/g, 'shul')\n      // cious\t\t\tSUB(\"shus\");\n      .replace(/\\Bcious/g, 'shus')\n      // ious\t\t\tSUB(\"yus\");\n      .replace(/\\Bious/g, 'yus')\n      // tion\t\t\tSUB(\"shun\");\n      .replace(/\\Btion/g, 'shun')\n      // {SW}[Cc]an{EW}\t\tSESUB(\"C'n\");\n      .replace(/\\b[Cc]an\\b/g, sameCapReplacer(\"C'n\"))\n      // {SW}[Yy]ou{EW}\t\tSESUB(\"Y'all\");\n      .replace(/\\b[Yy]ou\\b/g, sameCapReplacer(\"Y'all\"))\n      // {SW}[Tt]he{EW}\t\tSESUB(\"Duh\");\n      .replace(/\\b[Tt]he\\b/g, sameCapReplacer('Duh'))\n      // ing\t\t\tSUB(\"in\");\n      .replace(/\\Bing\\b/g, \"in'\")\n      // {SW}[Tt]oo{EW}\t\tSESUB(\"Besides\");\n      .replace(/\\b[Tt]oo\\b/g, sameCapReplacer('Besides'))\n      // {SW}[Tt]o{EW}\t\tSESUB(\"Tuh\");\n      .replace(/\\b[Tt]o\\b/g, sameCapReplacer('Tuh'))\n      // {SW}[Aa][n]?{EW}\tSESUB(\"Ah\");\n      .replace(/\\b[Aa][n]?\\b/g, sameCapReplacer('Ah'))\n      // {SW}[Oo]f{EW}\t\tSESUB(\"Uv\");\n      .replace(/\\b[Oo]f\\b/g, sameCapReplacer('Uv'))\n      // {SW}I{EW}\t\tSESUB(\"Ah\");\n      .replace(/\\bI\\b/g, 'Ah')\n      // {SW}I'm{EW}\t\tSESUB(\"Ahm a\");\n      .replace(/\\bI'm\\b/g, 'Ahm a')\n      // {SW}I'll{EW}\t\tSESUB(\"Ahl\");\n      .replace(/\\bI'll\\b/g, 'Ahl')\n      // {SW}I'd{EW}\t\tSESUB(\"Ah wood\");\n      .replace(/\\bI'd\\b/g, 'Ah wood')\n      // n't\t\t\t*(yytext)=(char)'u'; SUB(\"unt\");\n      .replace(/\\Bn't\\b/g, 'unt')\n      // 're\t\t\tSUB(\" is\");\n      .replace(/\\B're\\b/g, ' is')\n      // 've\t\t\tSUB(\" done\");\n      // TODO: lookbehind\n      //      .replace(/(?<=\\w)'ve\\b/g, ' done')\n      .replace(/(\\w)'ve\\b/g, (match, before) => before + ' done')\n      // eed{EW}\t\t\tECHO;\n      // ed{EW}\t\t\tESUB(\"d\");\n      // Commented out because it kind of detracts\n      // .replace(/(?:(eed)|ed)\\b/g, (all, keep) => keep || 'd')\n      // {SW}[Oo]wn{EW}\t\t|\n      // {SW}[Tt]own{EW}\t\t|\n      // {SW}[Dd]own{EW}\t\t|\n      // {SW}[Gg]own{EW}\t\t|\n      // {SW}[Bb]rown{EW}\tECHO;\n      // wn{EW}\t\t\tESUB(\"ed\");\n      // Rather than list exceptions, it's easier to just list the few irregular\n      // verbs in common usage that we actually want to apply this rule to.\n      .replace(/[Ff]lown/g, sameCapReplacer('Flied'))\n      .replace(\n        /([Bb]lo|[Gg]ro|[Ss]ho|[Tt]hro|[Kk]no|\\b[Ss]o|\\b[Mm]o|[Ss]a|[Dd]ra|[Ss]e)wn\\b/g,\n        (all, match) => match + 'wed'\n      )\n      // re{EW}\t\t\t|\n      // er{EW}\t\t\tESUB(\"uh\");\n      // {SW}[Hh]er{EW}\t\tECHO;\n      // TODO: lookbehind\n      //      .replace(/(\\Bre|(?<!\\b[Hh])\\Ber)\\b/g, 'uh')\n      .replace(/(?:(\\b[Hh]er)|re|er)\\b/g, (all, keep) => keep || 'uh')\n      // {SW}[Ff]or{EW}\t\tSESUB(\"Fer\");\n      .replace(/\\b[Ff]or\\b/g, sameCapReplacer('Fer'))\n      // {SW}[Bb]elow{EW}\t|\n      // {SW}[Kk]now{EW}\t\t|\n      // {SW}[Tt]hrow{EW}\t|\n      // {SW}[Gg]row{EW}\t\t|\n      // {SW}[Hh]ow{EW}\t\t|\n      // {SW}[Nn]ow{EW}\t\t|\n      // {SW}[Bb]row{EW}\t\t|\n      // {SW}[Ss]how{EW}\t\tECHO;\n      // ow{EW}\t\t\tESUB(\"er\");\n      // TODO: lookbehind\n      //      .replace(/(?<!\\b([Bb]el|[Kk]n|[Tt]hr|[GgBb]r|[HhNn]|[Ss]h))ow\\b/g, 'er')\n      .replace(\n        /(?:(\\b(?:[Bb]elow|[Kk]now|[Tt]hrow|[Gg]row|[Hh]ow|[Nn]ow|[Bb]row|[Ss]how))|ow)\\b/g,\n        (all, keep) => keep || 'er'\n      )\n      // {SW}[Oo]ur{EW}\t\t|\n      // {SW}[Oo]r{EW}\t\tSESUB(\"Ore\");\n      .replace(/\\b([Oo]ur|[Oo]r)\\b/g, sameCapReplacer('Ore'))\n      // {SW}[Yy]our\t\tSSUB(\"Yore\");\n      .replace(/\\b[Yy]our/g, sameCapReplacer('Yore'))\n      // [Ee]very\t\tSUB(\"Ever\");\n      .replace(/[Ee]very/g, sameCapReplacer('Ever'))\n      // !\t\t\tSUB(\". Ye DAWGies!!!\");\n      .replace(/!(?=(\\s|$))/gm, '. Ye DAWGies!!!')\n  );\n}\n\nmodule.exports = { jethro };\n","/**\n * Flips text upside down. Stand on your head and squint to read the output.\n *\n * @copyright (c) 2000 Joey Hess <joey@kitenet.net>\n * @license GPL-2+\n * @author Aaron Wells\n */\nconst tr = require('./lib').tr;\n\n/**\n *\n * @param {string} initialString\n */\nfunction upsidedown(initialString) {\n  return tr(\n    // TODO: This is a redundant split and re-join, because tr's going to do\n    // that too.\n    initialString\n      .toLowerCase()\n      .split('\\n')\n      .map((line) => line.split('').reverse().join(''))\n      .join('\\n')\n      .replace(/\"/g, `''`),\n    '[]{}<>()' + 'abcdefghijklmnopqrstuvwxy' + '123456789' + \",!.?`'\",\n    '][}{><)(' + 'eq)paj6y!fk7wuodbjsfn^mxh' + 'l2Eh59L86' + \"`i'%,,\"\n  ).replace(/k/g, '>|');\n}\n\nmodule.exports = { upsidedown };\n","/**\n * Generates text with a bad German accent.\n *\n * @copyright (c) 1989 John Sparks\n * @copyright (c) 2019 Aaron Wells (JavaScript port)\n * @license GPL-2+\n * @author Aaron Wells\n */\nconst simuLex = require('./lib').simuLex;\n\n/**\n * @type {[string, (match: string) => string][]}\n */\nconst rawRules = [\n  ['ing', () => 'ingkt'],\n  [' the ', () => ' ze '],\n  ['The ', () => 'Ze '],\n  [' with ', () => ' mitt '],\n  ['With ', () => 'Mitt '],\n  ['wr', () => 'w-r-r'],\n  ['Wr', () => 'W-r-r'],\n  ['R', () => 'R-r-r'],\n  ['Yes ', () => 'Jawohl '],\n  [' r', () => ' r-r-r'],\n  ['Yes\\\\.', () => 'Jawohl.'],\n  ['Yes!', () => 'Jawohl!'],\n  ['YES!', () => 'JAWOHL!'],\n  [' yes ', () => ' ja '],\n  [' yes\\\\.', () => ' ja.'],\n  [' yes!', () => ' yes!'],\n  ['No ', () => 'Nein '],\n  ['No!', () => 'Nein!'],\n  ['No\\\\?', () => 'Nein?'],\n  [' no ', () => ' nein '],\n  [' no\\\\.', () => ' nein.'],\n  [' no!', () => ' nein!'],\n  [' no\\\\?', () => ' nein?'],\n  ['[Mm]r\\\\.', () => 'Herr'],\n  ['[Mm]rs\\\\.', () => 'Frau'],\n  ['Miss', () => 'Fraulein'],\n  [' of ', () => ' uff '],\n  ['Of ', () => 'Uff '],\n  ['my', () => 'mein'],\n  ['My', () => 'Mein'],\n  [' and ', () => ' undt '],\n  ['And ', () => 'Undt '],\n  ['One ', () => 'Ein '],\n  [' one', () => ' ein'],\n  ['Is ', () => 'Ist '],\n  [' is ', () => ' ist '],\n  ['ow ', () => 'ow '],\n  ['w ', () => 'w '],\n  ['sh', () => 'sch'],\n  ['Sh', () => 'Sch'],\n  ['ch', () => 'ch'],\n  ['Ch', () => 'Ch'],\n  [' c', () => ' k'],\n  [' C', () => ' K'],\n  ['v', () => 'f'],\n  ['V', () => 'F'],\n  [' w', () => ' v'],\n  ['W', () => 'V'],\n  ['th', () => 'd'],\n  ['Th', () => 'D'],\n  ['[Jj]ohn', () => 'Johann'],\n  ['[Ww]illiam', () => 'Wilhelm'],\n  ['[Bb]rad', () => 'Wilhelm'],\n  ['[Gg]ary', () => 'Gerhardt'],\n  ['[Jj]on', () => 'Hansel'],\n  ['([a-f])!', (match) => `${match} Naturlich!`],\n];\n\nconst rules = simuLex.preprocessRules(rawRules);\n\n/**\n *\n * @param {string} originalString\n */\nfunction klaus(originalString) {\n  return simuLex(originalString, rules);\n}\n\nmodule.exports = { klaus };\n","/**\n * Talk like a pirate\n *\n * @copyright (c) 2003 Dougal Campbell\n * @license GPL-2\n * @author Aaron Wells\n */\nconst getRandFn = require('./lib').getRandFn;\n\n/**\n *\n * @param {string} originalString\n * @returns {string}\n */\nfunction pirate(originalString) {\n  const fakeRand = getRandFn();\n  // In the original Perl filter, each line is processed on its own.\n  return originalString\n    .split('\\n')\n    .map((line) =>\n      line\n        .replace(/\\bmy\\b/g, 'me')\n        .replace(/\\bboss\\b/g, 'admiral')\n        .replace(/\\bmanager\\b/g, 'admiral')\n        .replace(/\\b[Cc]aptain\\b/g, \"Cap'n\")\n        .replace(/\\bmyself\\b/g, 'meself')\n        .replace(/\\byour\\b/g, 'yer')\n        .replace(/\\byou\\b/g, 'ye')\n        .replace(/\\bfriend\\b/g, 'matey')\n        .replace(/\\bfriends\\b/g, 'maties')\n        .replace(/\\bco[-]?worker\\b/g, 'shipmate')\n        .replace(/\\bco[-]?workers\\b/g, 'shipmates')\n        .replace(/\\bearlier\\b/g, 'afore')\n        .replace(/\\bold\\b/g, 'auld')\n        .replace(/\\bthe\\b/g, \"th'\")\n        .replace(/\\bof\\b/g, \"o'\")\n        .replace(/\\bdon\\'t\\b/g, \"dern't\")\n        .replace(/\\bdo not\\b/g, \"dern't\")\n        .replace(/\\bnever\\b/g, \"no nay ne'er\")\n        .replace(/\\bever\\b/g, \"e'er\")\n        .replace(/\\bover\\b/g, \"o'er\")\n        .replace(/\\bYes\\b/g, 'Aye')\n        .replace(/\\bNo\\b/g, 'Nay')\n        .replace(/\\bdon\\'t know\\b/g, 'dinna')\n        .replace(/\\bhadn\\'t\\b/g, \"ha'nae\")\n        .replace(/\\bdidn\\'t\\b/g, \"di'nae\")\n        .replace(/\\bwasn\\'t\\b/g, \"weren't\")\n        .replace(/\\bhaven\\'t\\b/g, \"ha'nae\")\n        .replace(/\\bfor\\b/g, 'fer')\n        .replace(/\\bbetween\\b/g, 'betwixt')\n        .replace(/\\baround\\b/g, \"aroun'\")\n        .replace(/\\bto\\b/g, \"t'\")\n        .replace(/\\bit\\'s\\b/g, \"'tis\")\n        .replace(/\\bIt\\'s\\b/g, 'It be')\n        .replace(/\\bwoman\\b/g, 'wench')\n        .replace(/\\blady\\b/g, 'wench')\n        .replace(/\\bwife\\b/g, 'lady')\n        .replace(/\\bgirl\\b/g, 'lass')\n        .replace(/\\bgirls\\b/g, 'lassies')\n        .replace(/\\bguy\\b/g, 'lubber')\n        .replace(/\\bman\\b/g, 'lubber')\n        .replace(/\\bfellow\\b/g, 'lubber')\n        .replace(/\\bdude\\b/g, 'lubber')\n        .replace(/\\bboy\\b/g, 'lad')\n        .replace(/\\bboys\\b/g, 'laddies')\n        .replace(/\\bchildren\\b/g, 'minnows')\n        .replace(/\\bkids\\b/g, 'minnows')\n        .replace(/\\bhim\\b/g, 'that scurvey dog')\n        .replace(/\\bher\\b/g, 'that comely wench')\n        .replace(/\\bhim\\.\\b/g, 'that drunken sailor')\n        .replace(/\\bHe\\b/g, 'The ornery cuss')\n        .replace(/\\bShe\\b/g, 'The winsome lass')\n        .replace(/\\bhe\\'s\\b/g, 'he be')\n        .replace(/\\bshe\\'s\\b/g, 'she be')\n        .replace(/\\bwas\\b/g, \"were bein'\")\n        .replace(/\\bHey\\b/g, 'Avast')\n        .replace(/\\bher\\.\\b/g, 'that lovely lass')\n        .replace(/\\bfood\\b/g, 'chow')\n        .replace(/\\broad\\b/g, 'sea')\n        .replace(/\\broads\\b/g, 'seas')\n        .replace(/\\bstreet\\b/g, 'river')\n        .replace(/\\bstreets\\b/g, 'rivers')\n        .replace(/\\bhighway\\b/g, 'ocean')\n        .replace(/\\bhighways\\b/g, 'oceans')\n        .replace(/\\bcar\\b/g, 'boat')\n        .replace(/\\bcars\\b/g, 'boats')\n        .replace(/\\btruck\\b/g, 'schooner')\n        .replace(/\\btrucks\\b/g, 'schooners')\n        .replace(/\\bSUV\\b/g, 'ship')\n        .replace(/\\bmachine\\b/g, 'contraption')\n        .replace(/\\bairplane\\b/g, 'flying machine')\n        .replace(/\\bjet\\b/g, 'flying machine')\n        .replace(/\\bdriving\\b/g, 'sailing')\n        .replace(/\\bdrive\\b/g, 'sail')\n        .replace(/\\bwith\\b/g, \"wi'\")\n        .replace(/\\bam\\b/g, 'be')\n        .replace(/\\bis\\b/g, 'be')\n        .replace(/\\bare\\b/g, 'be')\n        .replace(/\\bwas\\b/g, 'be')\n        .replace(/\\bwere\\b/g, 'be')\n        .replace(/\\bwere\\b/g, 'be')\n        .replace(/ing\\b/g, \"in'\")\n        .replace(/ings\\b/g, \"in's\")\n        .replace(/(\\.( |\\t|$))/g, (...match) => avast(fakeRand, match[1], 3))\n        // Greater chance after exclamation\n        .replace(/([!\\?]( \\t|$))/g, (...match) => avast(fakeRand, match[1], 2))\n        .replace(/\\Br\\B/g, () => roll(fakeRand))\n    )\n    .join('\\n');\n}\n/**\n *\n * @param {() => number} fakeRand\n * @returns {string}\n */\nfunction roll(fakeRand) {\n  if (fakeRand() % 2 > 0) {\n    return 'r'.repeat((fakeRand() % 5) + 1);\n  } else {\n    return 'r';\n  }\n}\n\n/**\n *\n * @param {() => number} fakeRand\n * @param {string} stub\n * @param {number} chance\n * @returns {string}\n */\nfunction avast(fakeRand, stub, chance) {\n  const shouts = [\n    `, avast${stub}`,\n    `${stub} Ahoy!`,\n    `, and a bottle of rum!`,\n    `, by Blackbeard's sword${stub}`,\n    `, by Davy Jones' locker${stub}`,\n    `${stub} Walk the plank!`,\n    `${stub} Aarrr!`,\n    `${stub} Yaaarrrrr!`,\n    `, pass the grog!`,\n    `, and dinna spare the whip!`,\n    `, with a chest full of booty${stub}`,\n    `, and a bucket o' chum${stub}`,\n    `, we'll keel-haul ye!`,\n    `${stub} Shiver me timbers!`,\n    `${stub} And hoist the mainsail!`,\n    `${stub} And swab the deck!`,\n    `, ye scurvey dog${stub}`,\n    `${stub} Fire the cannons!`,\n    `, to be sure${stub}`,\n    `, I'll warrant ye${stub}`,\n    `${stub} Arr, me hearty!`,\n  ];\n\n  if (fakeRand() % chance === 1) {\n    return shouts[fakeRand() % shouts.length] + ' ';\n  } else {\n    return stub;\n  }\n}\n\nmodule.exports = { pirate };\n","/**\n *\tLex filter to transform plain English into Brooklyn English.\n *\tNo racial or societal slurs are intended.  For amusement only.\n *\n *\tReproduction permitted so long as this notice is retained.\n *\n * @copyright (c) 1986 Daniel Klein.\n * @license GPL\n * @author Aaron Wells\n */\nconst { simuLex, sameCap, sameCapReplacer } = require('./lib');\n// BW [ \\t]\n// SP [ \\t]\n// EW [ \\t.,;!\\?$]\n\nconst BW = '[ \\\\t]';\nconst SP = '[ \\\\t]';\nconst EW = '[ \\\\t.,;!?$]';\n\n/**\n * For cases where the replacement text needs to have the same first letter\n * as the target text, we can skip the calls dealing with case, and just return\n * the first letter of the replacament.\n *\n * This would be trivial to do in-line in the list of rules, but having it\n * as a function call that takes the full replacement as an argument, makes\n * the rules easier to read.\n *\n * @param {string} replacement\n * @returns {(match: string) => string}\n */\nfunction simpleSameCapReplacer(replacement) {\n  const r = replacement.slice(1);\n  return function (match) {\n    return match[0] + r;\n  };\n}\n\n/**\n * @type {[string, (match: string, utils: any) => string][]}\n */\nconst rawRules = [\n  ['[ao]ther', (match) => (match[0] === 'a' ? 'adder' : 'udder')],\n  ['[Nn]othing', simpleSameCapReplacer(\"nuttin'\")],\n  ['[Tt]hin', simpleSameCapReplacer('tin')],\n  ['[Tt]hir', simpleSameCapReplacer('toi')],\n  ['[Tt]h[ei]', (match) => sameCap(match, `d${match.slice(-1)}`)],\n  ['[Tt]hat', sameCapReplacer('dat')],\n  [`I'm${SP}going${SP}to`, () => \"I'manna\"],\n  [`going${SP}to`, () => 'gonna'],\n  [`want${SP}to`, () => 'wanna'],\n  [`t${SP}you`, () => 'tcha'],\n  [`[Dd]id${SP}you${SP}[eaiou]`, (match) => match[0] + `'j` + match.slice(-1)],\n  [`[Dd]id${SP}you`, simpleSameCapReplacer(\"d'ja\")],\n  [`[Yy]ou`, simpleSameCapReplacer('yuh')],\n  [`[Hh]ow${SP}are${SP}you`, simpleSameCapReplacer('howahrya')],\n  [`[Ww]ith`, simpleSameCapReplacer(\"wit'\")],\n  [\"[Dd]on't\", simpleSameCapReplacer('doan')],\n  [\"(ldn't|dn't)\", () => \"n't\"],\n  [\"isn't\", () => \"ain't\"],\n  [`er(?=${EW})`, () => 'uh'],\n  [`ing(?=${EW})`, () => \"in'\"],\n  [\n    `([Ww]ord|[Hh]eard|[BbGgLlPpSs]urg|[CcHh][eu]r[ntv])`,\n    (match) => match[0] + 'oi' + match.slice(-1),\n  ],\n  [`[^Mm]mer[^aeiouhrs]`, (match) => match[0] + 'moi' + match.slice(-1)],\n  [`[Oo]re(?=${EW})`, sameCapReplacer('awh')],\n  [`[Oo]r`, sameCapReplacer('awh')],\n  [`[Oo]f`, sameCapReplacer('uhv')],\n  [`tion`, () => `shun`],\n  [`(alk|our[st]|or[st])`, (match) => `awh${match.slice(-1)}`],\n  ['ause', () => 'awze'],\n  ['[Oo]ff', sameCapReplacer('awhf')],\n  ['[Ss]tupid', simpleSameCapReplacer('stoopid')],\n  [`${BW}under`, () => ' unner'],\n  [`${BW}to(?=${EW})`, () => ' tuh'],\n  [`[Aa]ctual`, simpleSameCapReplacer('ackshul')],\n  [`[a-z]:`, (match) => `${match[0]}, like, uhh:`],\n  [`[a-z]\\\\?`, (match) => `${match[0]}, or what?`],\n  [`!`, () => '! Okay?'],\n  [`[a-z]\\\\.`, (match, { expletive }) => `${match}${expletive()}`],\n];\n\nconst rules = simuLex.preprocessRules(rawRules);\n\n/**\n *\n * @param {string} originalString\n */\nfunction nyc(originalString) {\n  let count = 0;\n  let which = 0;\n\n  const expletive = function () {\n    if (count++ % 4 === 0) {\n      return [\n        ' Okay?',\n        ' Right?',\n        ' Yuh got me so fahr?',\n        \" Ya' dig?\",\n        ' Yuh with me?',\n      ][which++ % 5];\n    } else {\n      return '';\n    }\n  };\n\n  return simuLex(originalString, rules, { expletive });\n}\n\nmodule.exports = { nyc };\n","/**\n * ken:\n * will turn English into Cockney, featuring (dubious) rhyming slang for a lot\n * of computer terminology.\n *\n * ken is named after Ken the Chirpy Cockney Character from the Viz Comic (tm),\n * who speaks somewhat like that.\n *\n * @copyright (c) Stephen K Mulrine <smulrine%cs.strath.ac.uk@nsfnet-relay.ac.uk>\n * @copyright (c) 2019 Aaron Wells (JavaScript port)\n * @license GPL-2+\n * @author Aaron Wells\n */\n\nconst { simuLex } = require('./lib');\n\n/**\n * @type {[string, () => any][]}\n */\nconst rawRules = [\n  ['stairs', () => 'apples and pears'],\n  ['Downstairs', () => 'Down the apples and pears'],\n  ['downstairs', () => 'down the apples and pears'],\n  ['Upstairs', () => 'Up the apples and pears'],\n  ['upstairs', () => 'up the apples and pears'],\n  ['[Mm]outh', () => 'North and South'],\n  ['[Ff]ace', () => 'Boat Race'],\n  ['[Tt]rouble', () => 'Barney Rubble'],\n  [\n    'wife',\n    (match, { rand }) => {\n      switch (rand() % 2) {\n        case 0:\n          return 'trouble and strife';\n        case 1:\n          return 'ole lady';\n      }\n    },\n  ],\n  ['Road', () => 'Frog and Toad'],\n  [' road', () => ' frog and toad'],\n  ['pub ', () => 'rub-a-dub '],\n  [' bar ', () => ' boozer '],\n  [' husband', () => ' ole man'],\n  ['Party', () => 'Knees-up'],\n  ['party', () => 'knees-up'],\n  ['Parties', () => 'Knees-ups'],\n  ['parties', () => 'knees-ups'],\n  ['My', () => 'Me'],\n  [' my', () => ' me'],\n  ['Your', () => 'Yer'],\n  ['your', () => 'yer'],\n  ['You are ', () => 'Yer '],\n  ['you are ', () => 'yer '],\n  ['You', () => 'Yer'],\n  ['you', () => 'yer'],\n  ['Those', () => 'Them'],\n  ['those', () => 'them'],\n  [' those', () => ' them'],\n  ['\\\\(those', () => '(them'],\n  [\n    'The ',\n    (match, { rand }) => {\n      switch (rand() % 5) {\n        case 0:\n          return \"The bleedin' \";\n        default:\n          return match;\n      }\n    },\n  ],\n  ['The', (match) => match],\n  [\n    ' the ',\n    (match, { rand }) => {\n      switch (rand() % 5) {\n        case 0:\n          return \" the bleedin' \";\n        default:\n          return match;\n      }\n    },\n  ],\n  ['[ (]the', (match) => match],\n  [\n    'the ',\n    (match, { rand }) => {\n      switch (rand() % 5) {\n        case 0:\n          return \" the bleedin' \";\n        default:\n          return match;\n      }\n    },\n  ],\n  ['[Tt]his', (match) => match],\n  ['[ (]this', (match) => match],\n  ['[Tt]hat', (match) => match],\n  ['[ (]that', (match) => match],\n  ['Thus', () => 'So'],\n  [' thus', () => ' so'],\n  ['\\\\(thus', () => '(so'],\n  ['thus', () => 'so'],\n  ['[Tt]han', (match) => match],\n  ['[ (]than', (match) => match],\n  ['Who', (match) => match],\n  ['who', (match) => match],\n  [' old ', () => ' ole '],\n  [' to ', () => ' ter '],\n  [\"Aren't you \", () => 'Aintcha '],\n  [\"aren't you \", () => 'aintcha '],\n  [\"Aren't\", () => \"Ain't\"],\n  [\"aren't\", () => \"ain't\"],\n  [\"Isn't\", () => \"Ain't\"],\n  [\"isn't\", () => \"ain't\"],\n  ['Are not ', () => \"Ain't\"],\n  ['are not ', () => \"ain't \"],\n  ['Is not ', () => \"Ain't \"],\n  [' is not ', () => \" ain't \"],\n  ['What is th', () => 'Woss'],\n  ['what is th', () => 'woss'],\n  ['What are you ', () => 'Wotcher '],\n  ['what are you ', () => 'wotcher '],\n  ['What you are', () => 'Wotcher'],\n  ['what you are', () => 'wotcher'],\n  [\"What you're\", () => 'Wotcher'],\n  [\"what you're\", () => 'wotcher'],\n  ['What are your', () => 'Wotcher'],\n  ['what are your', () => 'wotcher'],\n  ['What do you ', () => 'Wotcher '],\n  ['what do you ', () => 'wotcher '],\n  ['What do your', () => 'Wotcher'],\n  ['what do your', () => 'wotcher'],\n  [' H[aeu]llo', () => ' Wotcher'],\n  [' h[aeu]llo', () => ' wotcher'],\n  ['What', () => 'Wot'],\n  ['what', () => 'wot'],\n  ['Were', () => 'Was'],\n  ['were', () => 'was'],\n  ['Bother', () => 'Ars'],\n  ['bother', () => 'ars'],\n  ['Mother', () => 'Muvver'],\n  ['Other', () => 'Uvver'],\n  ['other', () => 'uvver'],\n  ['Father', () => 'Favver'],\n  ['father', () => 'favver'],\n  ['Rather', () => 'Ravver'],\n  ['rather', () => 'ravver'],\n  ['Weather', () => 'Wevver'],\n  ['weather', () => 'wevver'],\n  ['Leather', () => 'Levver'],\n  ['leather', () => 'levver'],\n  ['Wither', () => 'Wivver'],\n  ['wither', () => 'wivver'],\n  ['Either', () => 'Eever'],\n  ['either', () => 'eever'],\n  ['With', () => 'Wiv'],\n  ['with', () => 'wiv'],\n  ['Anything', () => 'Anyfink'],\n  ['anything', () => 'anyfink'],\n  ['Something', () => 'Sumfink'],\n  ['something', () => 'sumfink'],\n  ['Nothing', () => 'Nuffink'],\n  ['nothing', () => 'nuffink'],\n  ['guitars', () => 'spoons'],\n  ['guitar', () => 'spoons'],\n  ['drums', () => 'spoons'],\n  ['drum', () => 'spoons'],\n  ['trumpets', () => 'spoons'],\n  ['trumpet', () => 'spoons'],\n  ['violins', () => 'spoons'],\n  ['violin', () => 'spoons'],\n  ['clarinets', () => 'spoons'],\n  ['clarinet', () => 'spoons'],\n  ['trombones', () => 'spoons'],\n  ['trombone', () => 'spoons'],\n  ['oboes', () => 'spoons'],\n  ['oboe', () => 'spoons'],\n  ['flutes', () => 'spoons'],\n  ['flute', () => 'spoons'],\n  ['tubas', () => 'spoons'],\n  ['tuba', () => 'spoons'],\n  ['Data', () => 'Info'],\n  ['data', () => 'info'],\n  ['Directory', () => 'Lockup'],\n  ['directory', () => 'lockup'],\n  ['Directories', () => 'Lockups'],\n  ['directories', () => 'lockups'],\n  [\n    '[Pp]rocess',\n    (match, { rand }) => {\n      switch (rand() % 2) {\n        case 0:\n          return 'Queen Bess';\n        case 1:\n          return \"Rudolf 'Ess\";\n      }\n    },\n  ],\n  ['[Cc]omputer', () => 'French Tutor'],\n  ['[Bb]yte', () => 'Jimmy White'],\n  ['[Ff]iles', () => 'Nobby Stiles'],\n  ['[Ff]ile', () => 'Royal Mile'],\n  ['[Ll]anguage', () => \"'Am Sandwich\"],\n  ['[Zz]ero', () => 'Emperor Nero'],\n  ['[Jj]ob', () => 'Uncle Bob'],\n  ['[Ss]hell', () => 'Bow Bell'],\n  ['[Ss]ave', () => \"Chas'n'Dave\"],\n  ['[Ll]oad', () => 'Old Kent Road'],\n  ['[Mm]ouse', () => \"Doll's 'Ouse\"],\n  ['[Bb]uffer', () => 'Sausage Stuffer'],\n  ['[Kk]eyboard', () => 'Henry Ford'],\n  ['[Mm]anual', () => 'Cocker Spaniel'],\n  ['[Ss]creen', () => 'James Dean'],\n  ['[Pp]rinter', () => \"'Arold Pinter\"],\n  ['[Pp]lotter', () => 'Pansy Potter'],\n  ['[Cc]ompiler', () => 'Martin Tyler'],\n  ['[Ss]tring', () => 'Emperor Ming'],\n  ['[Bb]rain', () => 'Michael Caine'],\n  [\n    '[Pp][Aa][Ss][Cc][Aa][Ll]',\n    (match, { rand }) => {\n      switch (rand() % 2) {\n        case 0:\n          return 'Pall Mall';\n        case 1:\n          return 'Roald Dahl';\n      }\n    },\n  ],\n  ['[Aa][Ll][Gg][Oo][Ll]', () => 'Johnny Ball'],\n  ['[Ff][Oo][Rr][Tt][Rr][Aa][Nn]', () => 'Manfred Mann'],\n  ['[Cc][Oo][Bb][Oo][Ll]', () => 'Albert Hall'],\n  ['[Jj]ava', () => 'Wot a palavah'],\n  ['W[aA][pP]', () => 'Pony and trap'],\n  [' wap', () => ' pony and trap'],\n  ['Stopped', () => \"'Ad the mockers put on\"],\n  ['stopped', () => \"'ad the mockers put on\"],\n  ['Stopping', () => 'Putting the mockers on'],\n  ['stopping', () => 'putting the mockers on'],\n  ['stops', () => 'puts the mockers on'],\n  ['stop', () => 'put the mockers on'],\n  ['STOP', () => 'Put The Mockers On'],\n  ['[Ll]ondoner', () => 'Cockney'],\n  [\n    'friend',\n    (match, { rand }) => {\n      switch (rand() % 3) {\n        case 0:\n          return 'mucker';\n        case 1:\n          return 'mate';\n        case 2:\n          return 'china';\n      }\n    },\n  ],\n  ['a h', () => \"an '\"],\n  ['A h', () => \"An '\"],\n  [' h', () => \" '\"],\n  [' H', () => \" '\"],\n  [' C-', () => ' Bruce Lee-'],\n  [\n    ' C ',\n    (match, { rand }) => {\n      switch (rand() % 4) {\n        case 0:\n          return ' Bruce Lee ';\n        case 1:\n          return ' Circus Flea ';\n        case 2:\n          return ' Bumble Bee ';\n        case 3:\n          return ' Door Key ';\n      }\n    },\n  ],\n  [' C\\\\.', () => ' Circus Flea.'],\n  ['Th', () => 'F'],\n  ['Wh', () => 'W'],\n  ['wh', () => 'w'],\n  ['aw', () => 'or'],\n  [' [BbKkMmPpRrSsWw]ing', (match) => match],\n  [' [Bb]ring', (match) => match],\n  [' [Ss]ting', (match) => match],\n  [' [Ss]wing', (match) => match],\n  [' [CcFfSs]ling', (match) => match],\n  [' Thing', () => ' Fing'],\n  [' thing', () => ' fing'],\n\n  ['ing ', () => \"in' \"],\n  [\n    '\\\\. ',\n    (match, { rand }) => {\n      switch (rand() % 32) {\n        case 0:\n          return \". I'll get out me spoons. \";\n        case 1:\n          return \". Yer can't 'ave a knees-up wivout a joanna. \";\n        case 2:\n          return '. Cor blimey guv, would I lie to you. ';\n        case 3:\n          return \". I'll make us all a nice cup of tea. \";\n        default:\n          return match;\n      }\n    },\n  ],\n  [\n    '\\\\? ',\n    (match, { rand }) => {\n      switch (rand() % 3) {\n        case 0:\n          return ', mate? ';\n        case 1:\n          return ', guv? ';\n        case 2:\n          return ', squire? ';\n      }\n    },\n  ],\n  [\n    '! ',\n    (match, { rand }) => {\n      switch (rand() % 6) {\n        case 0:\n          return ', cor blimey! ';\n        case 1:\n          return '! Struth! ';\n        case 2:\n          return ', guv! ';\n        case 3:\n          return '! Honest guv! ';\n        case 4:\n          return ', mate! ';\n        case 5:\n          return match;\n      }\n    },\n  ],\n];\n\nconst rules = simuLex.preprocessRules(rawRules);\n\nfunction ken(originalString) {\n  return simuLex(originalString, rules);\n}\n\nmodule.exports = { ken };\n","/**\n * This program places a very cute (and familiar to FurryMuck fans)\n * accent to any text file.\n *\n * @copyright (c) 1994 Brent E. Edwards\n * @license GPL-2\n * @author Aaron Wells\n */\nconst { simuLex } = require('./lib');\n\nconst CUTE = 'ky00te!';\nconst FLUFF = '*fluff!*';\nconst SMILE = '};)';\nconst PURR = 'purr';\nconst FUR = 'fur';\nconst ATTA = 'atta';\nconst YNNA = 'ynna';\nconst YSSA = 'yssa';\nconst ONNA = 'onna';\nconst WYFFA = 'wyffa';\nconst LOTTA = 'lotta';\nconst WYF = ' wyf ';\nconst WYFF = ' wyff';\nconst DA = ' da ';\nconst YER = ' yer';\nconst YA = ' ya';\nconst AN = \" 'n \";\nconst TA = ' ta ';\nconst WEN = \" w'en \";\nconst NA = \" na'\";\n/**\n *\n * @param {() => number} rand\n * @returns {string}\n */\nfunction MEOW(rand) {\n  const inRand = rand() % 5;\n\n  switch (inRand) {\n    case 0:\n    case 1:\n    case 2:\n      return 'meow';\n    case 3:\n    case 4:\n      return 'mew';\n  }\n}\n\n/**\n *\n * @param {() => number} fakeRand\n * @returns {string}\n */\nfunction SPACE(fakeRand) {\n  if (fakeRand() % 30 < 1) {\n    const inRand = fakeRand() % 5;\n\n    switch (inRand) {\n      case 0:\n        return ' *truffle break!* ';\n\n      case 1:\n        return ' *catnap break!* ';\n\n      case 2:\n        return ' *purrpurr* ';\n\n      case 3:\n        return ' *meow!* ';\n\n      case 4:\n        return ' *fluff!* ';\n    }\n  } else {\n    return ' ';\n  }\n}\n\n/**\n * @type {[string, () => any][]}\n */\nconst rawRules = [\n  ['i', () => 'y'],\n  ['I', () => 'Y'],\n  ['cks', () => 'x'],\n  ['ks', () => 'x'],\n  ['cute', () => CUTE],\n  ['fluff', () => FLUFF],\n  ['smile', () => SMILE],\n  ['grin', () => SMILE],\n  ['laugh', () => SMILE],\n  ['chuckle', () => SMILE],\n  ['pr', () => PURR],\n  ['p[aeiou]*r', () => PURR],\n  ['f[aeiou]+r', () => FUR],\n  ['m[aeiou]+(?=$|[^.,s?! ])', (match, { rand }) => MEOW(rand)] /*UN*/,\n  ['at a', () => ATTA],\n  ['at the', () => ATTA],\n  ['in a', () => YNNA],\n  ['in the', () => YNNA],\n  ['is a', () => YSSA],\n  ['is the', () => YSSA],\n  ['is so', () => YSSA],\n  ['on a', () => ONNA],\n  ['on the', () => ONNA],\n  ['with a', () => WYFFA],\n  ['with the', () => WYFFA],\n  ['lot of', () => LOTTA],\n  ['(\\n| )with($|\\b| )', () => WYF],\n  ['(\\n| )with', () => WYFF],\n  ['(\\n| )the($|\\b| )', () => DA],\n  ['(\\n| )your', () => YER],\n  ['(\\n| )you', () => YA],\n  ['(\\n| )and($|\\b| )', () => AN],\n  ['(\\n| )to($|\\b| )', () => TA],\n  ['(\\n| )when($|\\b| )', () => WEN],\n  [\"n't\", () => NA] /*UN*/,\n  [' not', () => NA] /*UN*/,\n  [`[ \\t]`, (match, { rand }) => SPACE(rand)],\n  ['r', () => 'rr'],\n];\n\nconst rules = simuLex.preprocessRules(rawRules);\n\n/**\n *\n * @param {string} originalString\n * @returns {string}\n */\nfunction ky00te(originalString) {\n  return simuLex(originalString, rules);\n}\nmodule.exports = { ky00te };\n","/**\n * Makes text look like it came from the keyboard of Carsten Haitzler.\n *\n * @copyright (c) 1997 Zachary Beane\n * @license GPL-2\n * @author Aaron Wells\n */\nconst { getRandFn } = require('./lib');\n\nconst $row = '!qwertyuiop!asdfghjkl!zxcvbnm!';\n\n/**\n *\n * @param {string} originalString\n * @returns {string}\n */\nfunction rasterman(originalString) {\n  const rng = getRandFn();\n  const fakeRand = () => (rng() % 100) / 100;\n\n  /**\n   *\n   * @param {string[]} $aref\n   * @param {number} $n\n   * @param {number} $m\n   * @return {void}\n   */\n  function swap($aref, $n, $m) {\n    if (\n      $n >= 0 &&\n      $n < $aref.length &&\n      $m >= 0 &&\n      $m < $aref.length &&\n      $aref[$n].match(/[a-z ]/) !== null &&\n      $aref[$m].match(/[a-z ]/) !== null\n    ) {\n      let $tmp = $aref[$n];\n      $aref[$n] = $aref[$m];\n      $aref[$m] = $tmp;\n    }\n  }\n\n  /**\n   *\n   * @param {string[]} $aref\n   * @param {number} $pos\n   * @param {string} $let\n   * @return {number}\n   */\n  function insert_adjacent($aref, $pos, $let) {\n    let $newlet = get_adjacent($let);\n\n    if (!$newlet) {\n      return 0;\n    }\n\n    $aref.splice($pos + 1, 0, $newlet);\n    return 1;\n  }\n\n  /**\n   *\n   * @param {string} $let\n   * @return {string|false}\n   */\n  function get_adjacent($let) {\n    if ($let.match(/[a-z]/) === null) {\n      return false;\n    }\n\n    let $i = $row.indexOf($let);\n    let $before = $row[$i - 1];\n    let $after = $row[$i + 1];\n\n    if ($before === '!' || (fakeRand() < fakeRand() && $after !== '!')) {\n      return $after;\n    } else {\n      return $before;\n    }\n  }\n\n  return originalString\n    .split('\\n')\n    .map((originalLine) => {\n      let line = originalLine\n        .toLowerCase()\n        .replace(/\\byou\\b/g, 'u')\n        .replace(/\\bpeople\\b/g, 'ppl')\n        .replace(/\\bthrough\\b/g, 'thru')\n        .replace(/\\bthough\\b/g, 'tho')\n        .replace(/\\bnope\\b/g, 'nup')\n        .replace(/\\baustralia\\b/g, 'oz')\n        .replace(/\\bfilm\\b/g, 'flim')\n        .replace(/\\bsucks\\b/g, 'sux')\n        .replace(/\\benough\\b/g, 'enuff')\n        .replace(/\\ba lot\\b/g, 'a shitload')\n        .replace(/\\bstuff\\b/g, 'shit')\n        .replace(/, /g, '.. ')\n        .replace(/\\.$/g, '...');\n      let $lets = line.split('');\n      let $strlen = line.length - 1;\n      for (let $x = 0; $x < $strlen; $x++) {\n        if (fakeRand() < 0.01) {\n          swap($lets, $x, $x + 1);\n          continue;\n        }\n        if (fakeRand() < 0.1 && $lets[$x] === ' ') {\n          swap($lets, $x - 1, $x - 2);\n          continue;\n        }\n        if (fakeRand() < 0.01) {\n          const $i = insert_adjacent($lets, $x, $lets[$x]);\n          $strlen += $i;\n          continue;\n        }\n        if (fakeRand() < 0.01) {\n          $lets.splice($x, 1);\n          $strlen--;\n          continue;\n        }\n      }\n      return $lets.join('');\n    })\n    .join('\\n');\n}\n\nmodule.exports = { rasterman };\n","/**\n *\tnewspeak.l, version 1.1.\n *\tLex filter to transform plain English into NewSpeak.\n *\tCopyright (c) 1991 Jamie Zawinski <jwz@jwz.org>.\n *\n *      Permission to use, copy, modify, distribute, and sell this\n *      software and its documentation for any purpose is hereby granted\n *      without fee, provided that the above copyright notice appear in\n *      all copies and that both that copyright notice and this\n *      permission notice appear in supporting documentation.  No\n *      representations are made about the suitability of this software\n *      for any purpose.  It is provided \"as is\" without express or\n *      implied warranty.\n *\n *\tThere are some design notes near the end.  Suggestions and\n *\timprovements to this code are more than welcome.\n *\tHail Big Brother!\n *\n * @copyright 1991 Jamie Zawinski <jwz@jwz.org>\n * @license MIT-like\n * @author Aaron Wells\n */\nconst { sameCapReplacer: CAP, sameCap, simuLex } = require('./lib');\n\n/**\n *\n * @param {string} replacement\n */\nfunction WCAP(replacement) {\n  /**\n   * @param {string} match\n   */\n  function wcap(match) {\n    return match[0] + sameCap(match.slice(1), replacement);\n  }\n\n  return wcap;\n}\n\n/**\n *\n * @param {string} str1\n * @param {string} str2\n */\nfunction COMP(str1, str2) {\n  /**\n   * @param {string} match\n   */\n  function comp(match) {\n    return sameCap(match, str1) + sameCap(match, str2);\n  }\n\n  return comp;\n}\n\n/**\n *\n * @param {string} str1\n * @param {string} str2\n */\nfunction WCOMP(str1, str2) {\n  /**\n   * @param {string} match\n   */\n  function wcomp(match) {\n    return (\n      match[0] + sameCap(match.slice(1), str1) + sameCap(match.slice(1), str2)\n    );\n  }\n\n  return wcomp;\n}\n\n/**\n * @type {[string, string][]}\n */\nconst expansions = [\n  ['YOUNG', /(([Yy]oung|[Ss]mall|[Ll]ittle){W})/.source],\n  ['DEAD', /(([Dd]ead|[Dd]eceased){W})/.source],\n  ['THE', /([Tt]he{W}?)/.source],\n  ['ANDOR', /({W}(([Aa]nd)|([Oo]r)){W}?)/.source],\n  [\n    'COLOR',\n    /(red|green|blue|yellow|cyan|magenta|purple|orange|mauve|pink|turquoise|brown|gr[ae]y)/\n      .source,\n  ],\n  ['EW', /({W}|{ES}|')/.source],\n  ['W', /(([ \t]?\\n[ \t]*)|[ \t]|[\\\"'`])/.source],\n  ['ES', /[.,;:!?/]/.source],\n];\n\n// %%\n\n// %{\n// \t/******************************\n// \t *\t    PLUSwords\t      *\n// \t ******************************/\n// %}\n/**\n * @type {[string, (null | ((...matches: string[]) => any))][]}\n */\nconst rawRules = [\n  [/[Qq]uite{EW}(?=[A-Za-z][A-Za-z])/.source, CAP('plus')],\n  [/[Rr]ather{EW}(?=[A-Za-z][A-Za-z][A-Za-z])/.source, CAP('plus')],\n  [/[Kk]ind{EW}of{EW}(?=[A-Za-z][A-Za-z][A-Za-z])/.source, CAP('plus')],\n  [/[Kk]inda{EW}(?=[A-Za-z][A-Za-z][A-Za-z])/.source, CAP('plus')],\n  [/[Mm]ore{W}than{W}a{W}(little|bit){W}/.source, CAP('plus')],\n  [/[Pp]ro-/.source, CAP('plus')],\n\n  [/[Hh]undreds{W}of{W}[Tt]housands/.source, null],\n  [/[Hh]undreds{ANDOR}[Tt]housands/.source, null],\n  [/[Hh]undreds{W}if{W}not{W}[Tt]housands/.source, null],\n  [/[Tt]housands/.source, null],\n  [/[Mm]illions/.source, CAP('doubleplusmany')],\n\n  [/[Dd]ozens/.source, CAP('many')],\n  [/[Hh]undreds/.source, CAP('plusmany')],\n\n  [/([Bb]right|[Ll]ight|[Ii]ntense){W}(?={COLOR})/.source, CAP('plus')],\n  [/([Dd]im|[Ff]aded|[Dd]ark|[Pp]ale){W}(?={COLOR})/.source, CAP('plusun')],\n  [/([Dd]im|[Ff]aded|[Dd]ark|[Pp]ale)/.source, CAP('unlight')],\n\n  [/[Ee]very/.source, (match) => match],\n  [/[Vv]ery{W}/.source, null],\n  [/[Rr]eally{W}/.source, null],\n  [/[Tt]erribly{W}/.source, null],\n  [/[Aa]wesome({W})?/.source, null],\n  [/[Aa]wfully{W}/.source, CAP('doubleplus')],\n\n  [/[Ww]hopping{EW}/.source, CAP('plusbig')],\n\n  [/O\\.K\\./.source, null],\n  [/[Aa]ll({W})?[Rr]ight/.source, null],\n  [/[Oo][Kk][Aa][Yy]/.source, CAP('plusgood')],\n  [/{W}OK(?={W})/.source, WCAP('plusgood')],\n\n  [/([Tt]oo|[Oo]verly|[Tt]hat){W}[Mm]uch/.source, CAP('plusmuch')],\n\n  [/{W}[Bb]ad(?={EW})/.source, WCAP('ungood')],\n  [/{W}[Pp]oor(?={EW})/.source, WCAP('ungood')],\n  [/{W}[Ll]ame(?={EW})/.source, WCAP('ungood')],\n  [/{W}[Pp]itiful(?={EW})/.source, WCAP('ungood')],\n  [/{W}[Nn]asty(?={EW})/.source, WCAP('plusungood')],\n  [/{W}[Hh]orrid(?={EW})/.source, WCAP('doubleplus ungood')],\n  [/{W}[Hh]orrible(?={EW})/.source, WCAP('doubleplus ungood')],\n  [/{W}[Aa]wful(?={W})/.source, WCAP('doubleplus ungood')],\n  [/{W}[Ee]vil(?={W})/.source, WCAP('doubleplus ungood')],\n\n  // %{\n  // \t/******************************\n  // \t *\t     Titles\t      *\n  // \t ******************************/\n  // %}\n\n  [/{W}[Ss]ir(?={EW})/.source, WCAP('citizen')],\n  [/{W}[Mm]r\\.(?={EW})/.source, WCAP('brother')],\n  [/[Mm]ister(?={EW})/.source, CAP('brother')],\n  [/[Mm]adame?/.source, CAP('sister')],\n  [/{W}[Mm]iss(?={EW})/.source, WCAP('sister')],\n  [/[Mm]a'?am(?={EW})/.source, CAP('sister')],\n  [/{W}[Mm]r?s\\.(?={EW})/.source, WCAP('sister')],\n  [/Mrs(?={EW})/.source, CAP('sister')],\n\n  [/{YOUNG}?[Cc]hildren/.source, CAP('young citizens')],\n  [/{YOUNG}?[Bb]oys{ANDOR}[Gg]irl(?=s)/.source, CAP('young citizens')],\n  [\n    /{YOUNG}?([Kk]id|[Gg]irl|[Bb]oy|[Cc]hild)(?={EW})/.source,\n    CAP('young citizen'),\n  ],\n\n  [/[Ff]ellow/.source, CAP('citizen')],\n\n  [/[Nn]on{W}?-?citizen/.source, CAP('unperson')],\n  [/[Nn]on{W}?-?member/.source, CAP('unperson')],\n  [/[Cc]riminal(?=s?)/.source, CAP('unperson')],\n  [/{DEAD}(man|woman)/.source, CAP('unperson')],\n  [/{DEAD}(men|women)/.source, CAP('unpersons')],\n\n  [/[Ii]n{W}[Pp]erson/.source, (match) => match],\n\n  [/{W}[Uu]ser/.source, WCOMP('party ', 'worker')],\n  [/[Ss]tudent/.source, COMP('party ', 'worker')],\n  [/[Cc]itizen(?=s?{EW})/.source, COMP('party ', 'worker')],\n  [/[Pp]erson(?=s?{EW})/.source, COMP('party ', 'worker')],\n  [/[Pp]eople/.source, COMP('party ', 'workers')],\n\n  [/[Ss]enator/.source, null],\n  [/[Cc]ongressman/.source, null],\n  [/[Ss]upervisor/.source, null],\n  [/[Pp]rofessor/.source, () => 'Inner Party Member'],\n  [/[Pp]rof\\.(?={EW})/.source, () => 'Inner Party Member'],\n  [/[Pp]rof(?={EW})/.source, () => 'Inner Party Member'],\n\n  [/Representative(?=s?)/.source, () => 'Inner Party Member'],\n  [/representatives/.source, () => 'Inner Party Members'],\n\n  [/[Ww]hite{W}[Cc]ollar/.source, null],\n  [/[Uu]pper{W}[Cc]lass/.source, COMP('inner ', 'party')],\n  [/[Mm]iddle{W}[Cc]lass/.source, CAP('party')],\n  [/[Bb]lue{W}[Cc]ollar/.source, null],\n  [/[Ww]orking{W}[Cc]lass/.source, null],\n  [/[Ll]ower{W}[Cc]lass/.source, CAP('prole')],\n  [/([Ff]ool|[Ii]diot)(?=s?{EW})/.source, CAP('prole')],\n  [/[Ss]tupidity/.source, CAP('proleness')],\n\n  // %{\n  // \t/******************************\n  // \t *\t  Organizations       *\n  // \t ******************************/\n  // %}\n\n  [\n    /[Aa]?{W}([Ww]hite{W}[Hh]ouse|[Gg]ovt\\.?|[Gg]overnment){W}([Ss]ource|[Oo]fficial|[Ss]pokes(man|woman|person))/\n      .source,\n    CAP('an Inner Party Member'),\n  ],\n  [/{THE}?[Rr]epublican{W}[Pp]arty/.source, COMP('mini', 'luv')],\n  [/{THE}?[Dd]emocratic{W}[Pp]arty/.source, COMP('mini', 'plenty')],\n\n  [/{THE}?Congress/.source, () => 'MiniPax'],\n  [/{THE}?[Ss]enate/.source, () => 'MiniPax'],\n  [/{THE}?[Hh]ouse{W}[Oo]f{W}[Rr]epresentatives/.source, () => 'MiniPax'],\n  [/{THE}?[Ss]tate{W}[Dd]epartment/.source, () => 'MiniPax'],\n  [/{THE}?[Ss]tate{W}[Dd]ept\\.?/.source, () => 'MiniPax'],\n  [/{THE}?[Dd]efen[cs]e{W}[Dd]epartment/.source, null],\n  [/{THE}?[Dd]efen[cs]e{W}[Dd]ept\\.?/.source, null],\n  [/{THE}?[Ww]ar{W}[Dd]epartment/.source, null],\n  [/{THE}?[Ww]ar{W}[Dd]ept\\.?/.source, null],\n  [/{THE}?[Hh]ouse{W}of{W}[Cc]ommons/.source, null],\n  [/{THE}?Pentagon/.source, null],\n  [/{THE}?[Ff]eds/.source, null],\n  [/{THE}?FCC/.source, null],\n  [/{THE}?D[Oo]D/.source, null],\n  [/{THE}D\\.[Oo]\\.D./.source, null],\n  [/{THE}?[Ss]ecret{W}[Ss]ervice/.source, COMP('mini', 'luv')],\n  [/{THE}?White{W}House/.source, null],\n  [/{THE}?Kremlin/.source, () => 'MiniTrue'],\n  [/{THE}?(CIA|NSA|FBI|MI-?5)(?={EW})/.source, () => 'MiniTrue'],\n  [/{THE}?(C\\.I\\.A\\.|N\\.S\\.A\\.|F\\.B\\.I\\.)(?={EW})/.source, () => 'MiniTrue'],\n  [/{THE}?[Aa]rchive(?=s?)/.source, COMP('mini', 'rec')],\n  [/{THE}?[Ll]ibrary/.source, COMP('mini', 'rec')],\n  [/{THE}?[Ll]ibraries/.source, COMP('mini', 'recs')],\n\n  [/[Tt]hought{W}[Pp]olice|[Nn]azis?/.source, COMP('think', 'pol')],\n  [/[Vv]ice{W}[Ss]quad/.source, COMP('sex', 'pol')],\n  [/PMRC|P\\.M\\.R\\.C\\./.source, COMP('sex', 'pol')],\n\n  [/[Oo]fficer/.source, CAP('minister')],\n\n  [/{THE}?[Dd]epartment{EW}of{EW}./.source, null],\n  [/{THE}?[Dd]ept\\.?{EW}of{EW}./.source, null],\n  [/{THE}?[Uu]niversity{EW}of{EW}./.source, null],\n  [/{THE}?[Uu]niv\\.?{EW}of{EW}./.source, null],\n  [/{THE}?[Dd]ept\\.?{EW}of{EW}./.source, null],\n  [/{THE}?([Ss]ub-?)?[Cc]omm?itt?ee{EW}(of|on){EW}./.source, null],\n  [\n    /{THE}?[Ss]chool{EW}of{EW}(.)/.source,\n    (fullMatch, firstParen) => {\n      if (/[a-zA-Z]/.test(firstParen)) {\n        return 'Mini' + firstParen.toUpperCase();\n      } else {\n        return 'Ministry of ' + firstParen;\n      }\n    },\n  ],\n  [/[Dd]epartment/.source, null],\n  [/[Uu]niversity/.source, CAP('ministry')],\n  [/[Uu]niv\\.?(?={W})/.source, CAP('ministry')],\n  [/[Dd]ept\\.?(?={W})/.source, CAP('ministry')],\n  [/([Ss]ub-?)?[Cc]omm?itt?ee/.source, CAP('ministry')],\n\n  [/{THE}[Pp]roject(?={EW})/.source, CAP('the Three Year Plan')],\n  [/[Oo]ur{W}[Pp]roject(?={EW})/.source, CAP('our Three Year Plan')],\n  [/[Bb]udget/.source, () => 'Three Year Plan'],\n  [/[Pp]roject(?={ES})/.source, () => 'Three Year Plan'],\n\n  [\n    /{W}({THE}|([aa]{W}))[Pp]roject/.source,\n    (match) => match[0] + 'the Three Year Plan',\n  ],\n\n  [\n    /[A-Za-z]+'[Ss](?={W}(law|Law|LAW|book|Book|BOOK|rule|Rule|RULE){EW})/\n      .source,\n    () => \"Goldstein's\",\n  ],\n\n  // %{\n  // \t/******************************\n  // \t *\t     Actions\t      *\n  // \t ******************************/\n  // %}\n\n  [/[Ii]n{W}love{EW}/.source, CAP('SexCriming')],\n  [/[Ll]ove{W}you(?={EW})/.source, CAP('love Big Brother')],\n  [/[Ll]ove{W}me(?={EW})/.source, CAP('love Big Brother')],\n\n  [/[Cc]loning/.source, null],\n  [/[Rr]eproduction/.source, null],\n  [/[Cc]elibacy/.source, null],\n  [/[Pp]rocreation/.source, COMP('good', 'sex')],\n\n  [/[Cc]elibate/.source, null],\n  [/[Pp]rocreate/.source, COMP('good', 'sexwise')],\n\n  [/[Tt]elevisions?/.source, null],\n  [/TVs?/.source, null],\n  [/[Tt]\\.[Vv]\\.s?/.source, null],\n  [/[Rr]adios?/.source, null],\n  [/[Nn]ews{W}?[Pp]apers?/.source, null],\n  [/[Jj]ournalism/.source, null],\n  [/[Mm]ovies?/.source, null],\n  [/[Rr]ock{EW}?-?(and|&|'?n'?){EW}?-?[Rr]oll({W}[Mm]usic)?/.source, null],\n  [\n    /(([Rr]ock|[Cc]lassical|[Ii]ndustrial|[Pp]op|[Dd]ance|[Rr]ap){W})?[Mm]usic/\n      .source,\n    null,\n  ],\n  [/[Tt]unes/.source, null],\n  [/[Mm]oney/.source, null],\n  [/[Cc]ash/.source, null],\n  [/[Cc]omic{W}[Bb]ooks?/.source, null],\n  [/([Ss]tar{W}?)?[Tt]rek/.source, COMP('prole', 'feed')],\n\n  [/[Pp]eace{W}[Mm]ovement/.source, null],\n  [/[Pp]eace{W}[Pp]rotest/.source, null],\n  [/[Aa]nti{EW}[Ww]ar/.source, null],\n  [/([Pp]assive{W})?[Rr]esistance/.source, null],\n  [/[Cc]reativity/.source, null],\n  [/[Tt]reason/.source, null],\n  [/[Rr]esearch/.source, COMP('crime', 'think')],\n  // %{\n  // \t/******************************\n  // \t *\t     Religion\t      *\n  // \t ******************************/\n  // %}\n\n  [/[Jj]esus{W}[Cc]hrist/.source, null],\n  [/[Jj]esus/.source, null],\n  [/{THE}?[Bb]uddh?a/.source, null],\n  [/[Mm]ohamm?ed/.source, null],\n  [/[Mm]artin{W}[Ll]uther{W}[Kk]ing/.source, null],\n  [/J\\.?\\ ?R\\.?\\ \\\"?Bob\\\"?\\ Dobbs/.source, () => 'doubleplus crimethinker'],\n\n  [/([Jj]esse{W})?[Hh]elms/.source, null],\n  [/([RrDd]on(ald)?{W})?[Rr]ea?gan/.source, null],\n  [/[Gg]eorge{W}[Gg]uscoria/.source, () => 'doubleplus goodthinker'],\n\n  [/[Jj]ewish/.source, COMP('crime', 'thinkwise')],\n  [/[Jj]ew/.source, null],\n  [/[Cc]hristian/.source, null],\n  [/[Mm]oslem/.source, null],\n  [/[Bb]uddhist/.source, null],\n  [/[Aa]thiest/.source, null],\n  [/[Aa]gnostic/.source, COMP('crime', 'thinker')],\n\n  [/[Ff]aith/.source, COMP('belly', 'feel')],\n\n  // %{\n  // \t/******************************\n  // \t *\t      Places\t      *\n  // \t ******************************/\n  // %}\n\n  [/[Ee]ngland|{THE}?[Uu]nited{W}[Kk]ingdom/.source, null],\n  [/({THE}?[Uu]nited{W}[Ss]tates{W}[Oo]f{W})?[Aa]merica/.source, null],\n  [/{THE}?[Uu]nited{W}[Ss]tates|USA|U\\.S\\.A\\.|[Cc]anada/.source, null],\n  [/[Gg]ermany|[Ii]srael|[Ee]urope/.source, () => 'Oceania'],\n\n  [/Iranian|Iraqu?i|Libyan|Russian|African|Egyptian/.source, () => 'Eurasian'],\n  [/Iran|Iraq|Libya|Russia|Africa|Egypt/.source, null],\n  [/([Ss]audi{W})?Arabia|{THE}?Soviet{W}Union/.source, () => 'Eurasia'],\n  [/[Ss]oviet/.source, () => 'Eurasian'],\n\n  [/[Cc]hinese|[Jj]apanese|[Tt]aiwanese/.source, null],\n  [/[Pp]hillipino|[Ii]ndian|[Aa]ustralian|[Mm]exican/.source, null],\n  [/[Nn]icaraguan|[Ss]alvadori?an/.source, () => 'Eastasian'],\n  [/China|[Jj]apan|[Tt]aiwan|{THE}?[Pp]hillipines|[Ii]ndia/.source, null],\n  [\n    /[Aa]ustralia|[Mm]exico|[Nn]icaragua|[Ee]l{W}[Ss]alvador/.source,\n    () => 'Eastasia',\n  ],\n\n  [/[Kk]uwaiti/.source, () => 'Eurasian'],\n  [/[Kk]uwait/.source, () => 'The Malabar Front'],\n\n  // %{\n  // \t/******************************\n  // \t * Miscellaneous Translations *\n  // \t ******************************/\n  // %}\n\n  [/{W}[Ff]aster/.source, WCAP('plus speedful')],\n  [/{W}[Ss]lower/.source, WCAP('plus unspeedful')],\n  [/{W}[Ff]ast/.source, WCAP('speedful')],\n  [/{W}[Ss]low/.source, WCAP('unspeedful')],\n\n  [/[Mm]odern/.source, CAP('plusnew')],\n  [/[Aa]ncient/.source, CAP('plusunnew')],\n  [/{W}old(?={W})/.source, WCAP('plusunnew')],\n\n  [/[Hh]appiness/.source, CAP('joyfulness')],\n  [/[Hh]appy/.source, CAP('joyful')],\n  [/[Qq]uick/.source, CAP('speedful')],\n  [/{W}[Ss]peedy/.source, WCAP('speedful')],\n  [/[Hh]eavy/.source, CAP('weightful')],\n  [/[Hh]eavill?y/.source, CAP('weightfully')],\n  [/[Ss]ick(ly)?/.source, CAP('unhealthful')],\n\n  [/[Gg]ross/.source, null],\n  [/[Ss]ickening/.source, null],\n  [/[Ff]oul/.source, null],\n  [/[Pp]utrid/.source, null],\n  [/[Dd]isgusting/.source, COMP('crime', 'thinkful')],\n\n  [/[Ss]mash/.source, null],\n  [/[Cc]rush/.source, null],\n  [/[Oo]bliterate/.source, null],\n  [/[Aa]nnihilate/.source, null],\n  [/[Nn]eutralize/.source, null],\n  [/[Dd]emolish/.source, null],\n  [/[Dd]estroy/.source, CAP('unbuild')],\n\n  [/[Ii]nanimate/.source, CAP('unlifeful')],\n  [/[Ss]ociety|[Cc]ulture/.source, () => 'IngSoc'],\n  [/[A-Za-z]+isi?m(?={EW})/.source, () => 'Goldsteinism'],\n  [/[A-Za-z]+ist(?={EW})/.source, () => 'Goldsteinist'],\n\n  [/{W}[Dd]ead/.source, WCAP('unlifeful')],\n  [/{W}[Dd]eath/.source, WCAP('unlife')],\n  [/{W}[Ll]ie/.source, WCAP('untruth')],\n  [/{W}[Ff]alsehood/.source, WCAP('untruth')],\n  [/{W}[Mm]istake(?={EW})/.source, WCAP('untruth')],\n  [/{W}[Ww]hisper/.source, WCAP('unshout')],\n  [/{W}[Pp]roud/.source, WCAP('prideful')],\n\n  [/[Ff]alse/.source, CAP('untrue')],\n  [/[Dd]ark/.source, CAP('unlight')],\n  [/[Bb]lack/.source, CAP('unwhite')],\n  [/[Ff]orbidden/.source, CAP('unallowed')],\n  [/[Ff]orbid/.source, CAP('unallow')],\n  [/[Ff]ailure/.source, CAP('unsuccess')],\n  [/[Ff]ail(?={EW})/.source, CAP('unwin')],\n\n  [/[Ss]tatistics?(?={EW})/.source, CAP('propaganda')],\n  [/{W}[Aa]n{W}[Aa]nn?ouncement/.source, WCAP('a NewsFlash')],\n  [/[Aa]nn?ouncement/.source, () => 'NewsFlash'],\n  [/[Ii]nstructions?/.source, () => 'B. B. DayOrder'],\n\n  [/[Aa]lmost|[Nn]early/.source, CAP('within measurable distance of')],\n  [/[Ff]unny/.source, CAP('humorful')],\n\n  [/[Dd]oom/.source, CAP('unsave')],\n  [/[Cc]haos/.source, CAP('unorder')],\n  [/[Cc]haotic/.source, CAP('unorderful')],\n  [/[Ee]nslaved/.source, CAP('protected')],\n  [/[Ee]nslave/.source, CAP('protect')],\n  [/[Dd]angerous/.source, CAP('unsafewise')],\n  [/[Dd]anger/.source, CAP('unsafe')],\n  [/([Bb]lind{W})?[Oo]bedience/.source, COMP('ing', 'soc')],\n  [/\\\"?[Nn]ew{W}[Ww]orld{W}[Oo]rder\\\"?/.source, () => 'IngSoc'],\n\n  [/[Pp]rivacy/.source, null],\n  [/[Ii]ndividuality/.source, COMP('own', 'life')],\n\n  [/IMHO/.source, () => 'for the love of Big Brother'],\n\n  [/[Ee]motion(al|s)?/.source, null],\n  [/[Cc]onviction/.source, null],\n  [/[Bb]elie(f|ve)/.source, null],\n  [/[Aa]ccept(ance)?/.source, COMP('belly', 'feel')],\n\n  [/[Dd]emocracy/.source, null],\n  [/[Ll]iberty/.source, null],\n  [/[Ff]reedom/.source, null],\n  [/[Jj]ustice/.source, null],\n  [/{THE}?[Aa]merican{W}[Ww]ay/.source, null],\n  [/[Ss]ubversion/.source, null],\n  [/[Pp]assion/.source, COMP('crime', 'think')],\n\n  [/[Oo]bscenity/.source, null],\n  [/[Pp]ornography/.source, null],\n  [/[Oo]rgasm/.source, null],\n  [/[Ee]rotica/.source, COMP('sex', 'crime')],\n  [/[Ss]exy/.source, null],\n  [/[Oo]bscene/.source, null],\n  [/[Pp]ornographic/.source, null],\n  [/[Ee]rotic/.source, COMP('sex', 'crimeful')],\n\n  [/[Cc]ritic(?=s?{W})/.source, COMP('crime', 'thinker')],\n\n  [/[Ii]nfant{W}[Mm]ortality/.source, COMP('inf', 'mort')],\n\n  [/[Ff]amilies/.source, null],\n  [/[Pp]arents/.source, COMP('family ', 'units')],\n  [/[Mm]other{ANDOR}[Ff]ather/.source, null],\n  [/[Bb]rother{ANDOR}[Ss]ister/.source, COMP('family ', 'unit')],\n  [/{W}[Pp]arent(?=s?{EW})/.source, WCOMP('family ', 'unit')],\n  [/[Ff]amily/.source, COMP('family ', 'unit')],\n\n  [/God(?={EW})/.source, () => 'Big Brother'],\n  [/[Pp]res(ident|\\.)({W}([Bb]ush|[Rr]eagan))?/.source, () => 'Big Brother'],\n  [/[Pp]rime{W}[Mm]inister/.source, () => 'Big Brother'],\n\n  [\n    /([Gg][Nn][Uu]{W}([Ee]macs|EMACS){W})?[Gg]eneral{W}[Pp]ublic{W}[Ll]icense/\n      .source,\n    () => 'NewSpeak Dictionary',\n  ],\n\n  [\n    /(questioning|murder|ass?ass?ination)(?={ES})/.source,\n    () => 'interrogation',\n  ],\n\n  [/[Ss]keptic(?={EW})/.source, CAP('unperson')],\n  [/[Ss]illy/.source, CAP('foolhardy')],\n  [/{W}[A-Za-z][A-Za-z]?illy/.source, (match) => match],\n  [/[Ss]outhern|[Ss]outherly/.source, CAP('southwise')],\n  [/[Nn]orthern|[Nn]ortherly/.source, CAP('northwise')],\n  [/[Ee]astern|[Ee]easterly/.source, CAP('eastwise')],\n  [/[Ww]estern|[Ww]esterly/.source, CAP('westwise')],\n  [/[Pl]leasant/.source, CAP('goodwise')],\n  [/[Vv]iolent/.source, CAP('unpeacewise')],\n  [/[Vv]iolence/.source, CAP('unpeaceness')],\n  [/[Ii]ndifference/.source, CAP('uncarefulness')],\n  [/[Ii]ndifferent/.source, CAP('uncareful')],\n  [/[Bb]elly/.source, CAP('abdomen')],\n  [/[Cc]omic/.source, CAP('humorwise')],\n  [/{W}[Uu]nless/.source, WCAP('lest')],\n  [/usually/.source, () => 'usualwise'],\n\n  [/[Gg]uerillas/.source, COMP('party ', 'workers')],\n\n  [/[Ww]ar(?={EW})/.source, CAP('engagement')],\n  [/[Dd]efen[cs]e(?={EW})/.source, CAP('peace')],\n  [/[Ii]nvasion/.source, CAP('liberation')],\n\n  // %{\n  // \t/******************************\n  // \t *     Syllable Rewriting     *\n  // \t ******************************\n  // \tisn't ___\tis un___\n  // \tnot the ___\tthe un___\n  // \tnot my ___\tmy un___\n  // \tanti___\t\tun___ \t\t(etc...)\n  // \t___cally\t___wise\n  // \t___ally\t\t___wise\n  // \t___lly\t\t___wise\n  // \t___ly\t\t___wise\n  // \t___aic\t\t___wise\n  // \t___lic\t\t___wise\n  // \t___nnic\t\t___wise\n  // \t<VOWEL>tric\t___wise\n  // \t___ic\t\t___wise\n  // \t<VOWEL>ous\t___ful\n  // \t<CONSONANT>ous\t___eful\n  // \t___less\t\tun___ful\n\n  //          */\n  // %}\n\n  [/[Ii]sn't{W}my{W}/.source, CAP('is my un')],\n  [/[Ii]s{W}not{W}my{W}/.source, CAP('is my un')],\n  [/[Ii]sn't{W}[Tt]he{W}/.source, CAP('is the un')],\n  [/[Ii]s{W}not{W}[Tt]he{W}/.source, CAP('is the un')],\n  [/[Ii]sn't{W}[Ii]n{W}[Tt]he{W}/.source, CAP('is in the un')],\n  [/[Ii]s{W}not{W}[Ii]n{W}[Tt]he{W}/.source, CAP('is in the un')],\n  [/[Ii]t'?s{W}not{W}[Tt]he{W}/.source, CAP(\"it's the un\")],\n  [/[Ii]sn't{W}/.source, CAP('is un')],\n  [/[Ii]s{W}not{W}/.source, CAP('is un')],\n  [/[Nn]ot{W}[Tt]he{W}/.source, CAP('the un')],\n  [/[Nn]ot{W}[Mm]y{W}/.source, CAP('my un')],\n  [/[Nn]ot{W}[Aa]{W}/.source, CAP('an un')],\n  [/[Nn]ot{W}have{W}/.source, CAP('has un')],\n  [/[Nn]ot{W}be{W}/.source, CAP('be un')],\n  [/[Nn]ot{W}[Oo]nly(?={W})/.source, CAP('unonly')] /* avoid \"unonwise\" */,\n\n  [/[Aa]{W}[Nn]ot{W}/.source, null],\n  [/[Aa]{W}[Nn]on-?/.source, (match) => match[0] + 'n' + match[1] + 'un'],\n\n  // %{\n  // /*\t{W}[Nn]ot{W}\t|\t*/\n  // %}\n  [/{W}[Ii]l-?(?=[a-z][a-z])/.source, WCAP('un')],\n  [/{W}[Aa]nti-?/.source, null],\n  [/{W}[Nn]on-?/.source, WCAP('un')],\n\n  [/robably|ventually|[Oo]bvious|[Bb]asic|{W}[Oo]nly|otally/.source, null],\n  [\n    /[Aa]rctic|holic|{EW}ally|{EW}[Aa]pply|{W}[Tt]opic/.source,\n    (match) => match,\n  ],\n\n  [/{W}([Tt]raf|[Pp]aci|[Ss]peci)fi(?=c{W})/.source, (match) => match],\n  [/{W}(ma|tra)gi(?=c{W})/.source, (match) => match],\n  [/{W}(pub|cyc|re|fro|gar)li(?=c{W})/.source, (match) => match],\n  [/{W}(eth|cli|to)ni(?=c{W})/.source, (match) => match],\n  [/{W}(E|cle|met|cit)ri(?=c{W})/.source, (match) => match],\n  [/{W}(ch|ep|tr?op|t|mus|stat|att)i(?=c{W})/.source, (match) => match],\n  [/{W}only(?={W})/.source, (match) => match],\n  [/{W}[Aa]tlantic/.source, (match) => match],\n\n  [/[ \\t\\n][drstwDRSTW]ally/.source, (match) => match[0] + match[1] + 'ally'],\n\n  [/[a-z]ically(?={W})/.source, (match) => match[0] + 'wise'],\n  [/[a-z]ally(?={W})/.source, (match) => match[0] + 'wise'],\n  [/[a-z][a-z]lly(?={W})/.source, (match) => match[0] + match[1] + 'wise'],\n  [\n    /[a-z][a-z][a-z]ly(?={W})/.source,\n    (match) => match[0] + match[1] + match[2] + 'wise',\n  ],\n  [/[a-z]ical(?={W})/.source, (match) => match[0] + 'wise'],\n\n  [\n    /[a-km-qs-z]aic(?={EW})/.source,\n    (match) => match[0] + 'wise',\n  ] /* not laic, raic */,\n  [/[a-z]lic(?={EW})/.source, (match) => match[0] + 'lwise'],\n  [/[a-z]nnic(?={EW})/.source, (match) => match[0] + 'nwise'],\n  [/[a-z][aeiou]tric(?={EW})/.source, (match) => match[0] + match[1] + 'twise'],\n  [/[a-z]tric(?={EW})/.source, (match) => match[0] + 'wise'],\n  [/[a-z]ic(?={EW})/.source, (match) => match[0] + 'wise'],\n  [/[a-z]lly(?={EW})/.source, (match) => match[0] + 'wise'],\n  [/[a-z]ly(?={EW})/.source, (match) => match[0] + 'wise'],\n\n  [\n    /[aeiouy][^aeiouy]ous(?={EW})/.source,\n    (match) => match[0] + match[1] + 'ful',\n  ],\n  [/[^aeiouy]ous(?={EW})/.source, (match) => match[0] + 'eful'],\n  [/[^e]ous(?={EW})/.source, (match) => match[0] + 'ful'],\n\n  [\n    /([A-Za-z])+less(?={EW})/.source,\n    (match) => sameCap(match.slice(0, -4), 'Un' + match.slice(0, -4) + 'ful'),\n  ],\n\n  [\n    /.  /.source,\n    (match) => match,\n    // (match) => {\n    //   printf('%s', yytext);\n    //   fcounter &= 15;\n    //   if (14 == fcounter++) printf('(fnord)  ');\n    // },\n  ],\n\n  [\n    /[.,!?]\\\"([^\\n\\\".!]+[.!])?\\n(?=[\\n\\t ])/.source,\n    (match) => match[0] + '  Hail Big Brother!\"' + match.slice(2),\n  ],\n  [\n    /\\\"([.,!?][^\\n\\\".!]+[.!])?\\n(?=[\\n\\t ])/.source,\n    (match) => match[0] + '  Hail Big Brother!\"' + match.slice(2),\n  ],\n\n  [/./.source, (match) => match],\n  [/\\n/.source, () => '\\n'],\n];\n\nconst rules = rawRules.map(([regex, replacer]) => {\n  let expandedRE = regex;\n  expansions.forEach(\n    ([find, replace]) =>\n      (expandedRE = expandedRE.replace(\n        new RegExp('{' + find + '}', 'g'),\n        replace\n      ))\n  );\n  return [new RegExp(`^(?:${expandedRE})`), replacer];\n});\n// Fill in those null rules...\nlet [, lastFn] = rules[rules.length - 1];\nfor (let i = rules.length - 1; i >= 0; i--) {\n  const replacer = rules[i][1];\n  if (replacer === null) {\n    rules[i][1] = lastFn;\n  } else {\n    lastFn = replacer;\n  }\n}\n\n// %{\n// /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//  * Brief description of Orwell's NewSpeak:\n//  * ---------------------------------------\n//  * Each word was made to serve as noun, verb, adjective and adverb.  In\n//  * particular, nouns and verbs were made exactly the same -- hence \"think\"\n//  * replaced \"thought\" as a noun (viz. \"crimethink\" = thought crime, \"thinkpol\"\n//  * = thought police).  Adjectives were formed by adding \"-ful\" to a noun(?=verb;)\n//  * adverbs were formed by adding \"-wise.\"  Hence \"speedful\" = fast,\n//  * \"speedwise\" = quickly, \"unspeedwise\" = slowly.\n//  *\n//  * The decision on which word should be negated was made fairly randomly;\n//  * \"dark\" could be \"unlight,\" or \"light\" could be \"undark\".  But in all cases\n//  * the most important objective (aside from ideological restriction) was\n//  * euphony; the words had to be easily pronounceable.\n//  *\n//  * Most verb inflections were made regular; \"he thinked,\" \"he goed,\" \"he\n//  * eated\"; only the auxiliaries and modals (to be, to have, may, shall, will,\n//  * etc.) were allowed to inflect irregularly.  Plurals were also regularized:\n//  * \"mans,\" \"oxes,\" \"childs.\"  [This isn't implemented here.]\n//  *\n//  * There were three sets of words.  The A vocabulary was for everyday use:\n//  * car, man, red, good, etc.  It was restricted to fairly simple words.\n//  *\n//  * The B vocabulary consisted of political(?=ideological words with very)\n//  * complicated connotations.  All of the B words were compound words --\n//  * bellyfeel (blind emotional acceptance of the ideology), oldthink (the way\n//  * of thought before the Revolution), crimethink, Ingsoc, goodsex (intercourse\n//  * solely for the purpose of making babies and with no physical enjoyment on\n//  * the part of the female), sexcrime (any kind of sex but goodsex, including\n//  * sex for its own sake), goodthink (thinking in accordance with Ingsoc), and\n//  * so on.  These words were also subject to the modifications mentioned\n//  * above--hence \"goodthinker,\" \"goodthinkful,\" \"goodthinkwise.\"\n//  *\n//  * The C vocabulary consisted of scientific and technical words (though there\n//  * was no longer any word for \"science,\" any connotation it might have being\n//  * subsumed into \"Ingsoc\").\n//  *\n//  * Implementing a translator for all of this would be really complicated --\n//  * I'd need rather extensive lists of the \"irregular\" words (so they could be\n//  * regularized), as well as lists of politically meaningful words (so they\n//  * could be excised or translated into either \"goodthink\" or \"crimethink,\" as\n//  * appropriate).  Any kind of sexual topic should become \"sexcrime\" (it being\n//  * unlikely that any talk of sex these days would fit into \"goodsex\").\n//  *\n//  * Basically, the reason it's hard is that NewSpeak was intended to *decrease*\n//  * the vocabulary, and subsume complicated ideas into politically correct\n//  * words so that you wouldn't have to understand the ideas anymore; you'd just\n//  * have to emit the right words.  So to properly \"translate\" anything into\n//  * NewSpeak, you have to cut the vocabulary way down.\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//  */\n// %}\n\n/**\n *\n * @param {string} originalText\n * @returns {string}\n */\nfunction newspeak(originalText) {\n  // @ts-ignore\n  return simuLex(originalText, rules) + '\\nHail Big Brother!\\n';\n}\n\nmodule.exports = { newspeak };\n","/**\n * stUdLy cAPs, after emacs studly.el -- the commented line is just\n * to remind diehards how it *should* be done ;)\n *\n * @copyright (c) Nick Phillips <nwp@lemon-computing.com>\n * @license \"Just for reference, you may do whatever you like with this file.\"\n * @author Aaron Wells\n */\n\nconst isUpperCase = require('./lib').isUpperCase;\n\n/**\n *\n * @param {string} initialString\n */\nfunction studly(initialString) {\n  return initialString\n    .split('')\n    .map((c, offset) => {\n      if (offset % 4 !== 2) {\n        return c;\n      } else {\n        return isUpperCase(c) ? c.toLowerCase() : c.toUpperCase();\n      }\n    })\n    .join('');\n}\n\nmodule.exports = { studly };\n","/**\n * Talk like a spammer.\n *\n * Doesn't always generate proper engrish, but then neither do\n * spammers.\n *\n * Licensed under the GPL.\n *\n * @copyright (c) 2002 Joey Hess <joeyh@debian.org>\n * @license GPL-2+\n * @author Aaron Wells\n */\nconst { getRandFn } = require('./lib');\n\n/**\n *\n * @param {string} originalString\n */\nfunction spammer(originalString) {\n  const prng = getRandFn();\n  const rand = (max) => {\n    const seed = prng();\n    return max === 0 ? 0 : seed % max;\n  };\n\n  function randPct() {\n    return (prng() % 100) / 100;\n  }\n\n  /**\n   *\n   * @param {...string} strings\n   */\n  function oneOf(...strings) {\n    return strings[rand(strings.length)];\n  }\n\n  /**\n   *\n   * @param {string} str\n   */\n  function line_of_yelling(str) {\n    const $lines = str.split('\\n');\n    const $n = rand($lines.length);\n    $lines[$n] = $lines[$n].toUpperCase();\n    return $lines.join('\\n');\n  }\n\n  function for_free() {\n    return (\n      oneOf('100%', 'completely', 'totally', 'absolutely') +\n      ' ' +\n      oneOf('f', 'F') +\n      'ree'\n    );\n  }\n\n  let $hits = 0;\n  let $spam = '';\n\n  if (randPct() > 0.75) {\n    $hits++;\n    $spam += 'Dear Friend, ';\n  } else if (randPct() > 0.9) {\n    $hits++;\n    $spam +=\n      'Below is the result of your feedback form' +\n      oneOf(':', '.', '..') +\n      '\\n';\n  } else if (randPct() > 0.75) {\n    $hits++;\n    $spam += 'This message is not spam!\\n';\n  }\n\n  /**\n   * @type {[RegExp, string|((...match: string[]) => string)][]}\n   */\n  const replacers = [\n    [\n      /^(Subject:\\s+.*)/g,\n      (...match) => match[1] + ' '.repeat(rand(20) + 40) + rand(1000000),\n    ],\n    [/free\\b/gi, for_free],\n    [\n      /(email|message|e-mail|mail)\\b/i,\n      `$1 (sent in compliance with regulations)`,\n    ],\n    [/(join|register|order|apply)/gi, `$1 today`],\n    [/money/i, `big bucks`],\n    [/check\\b/i, `check or money order`],\n    [/(amazing|atonishing|neat|interesting)/gi, `AMAZING`],\n    [/guarantee\\b/gi, `GUARANTEE`],\n    [/(profits|money)/gi, `PROFITS`],\n    [\n      /(no questions asked|quiet|confidential|secret)\\b/gi,\n      `NO QUESTIONS ASKED`,\n    ],\n    [/refund\\b/i, `full refund`],\n    [/free\\b/gi, `FREE`],\n    [/\\b(full|complete|fully)\\b/gi, `100% GUARANTEED`],\n    [/(spam|UCE)\\b/gi, () => oneOf('bulk', 'direct', 'mass') + ' email'],\n    [/spammer/gi, `businessman`],\n    [/(call|phone|contact)\\b/gi, `CALL NOW`],\n    [/business\\b/gi, `online business`],\n    [/online\\b/gi, `online business opportunities`],\n    [/number\\b/gi, `social security number`],\n    [/addresses\\b/gi, `addresses on cd`],\n    [/cdrom\\b/gi, `addresses on cd`],\n    [/click\\b/gi, `click here`],\n    [/viagra/gi, () => oneOf('VIAGRA', 'natural viagra', 'herbal viagra')],\n    [/\\btraffic\\b/gi, () => (randPct() > 0.6 ? 'more web traffic' : 'traffic')],\n    [/targeted/gi, `targeted traffic`],\n    [/limited/gi, `LIMITED TIME OFFER`],\n    [/buy\\b/gi, `buy direct`],\n    [/profit\\b/gi, `PURE PROFIT`],\n    [/opportunity/gi, `once in a lifetime opportunity`],\n    [/stock\\b/gi, `STOCK PICK`],\n    [/access\\b/gi, `INSTANT ACCESS`],\n    [/(diploma|credential)s?/gi, `college diploma$a`],\n    [/(penis|breast)/gi, `larger $1`],\n    [/\\b(work|job)\\b/gi, `home employment`],\n    [/experience\\b/gi, `no experience needed!`],\n    [/printer\\b/gi, `printer (toner cartridge)`],\n    [/(income|money|savings?)\\b/gi, `you income`],\n    [/(amazing|amazed|atonished|interesting)/gi, `be amazed`],\n    [/(\\$\\d+\\.?\\d*)/gi, `for only $1!`],\n    [/natural/gi, `completly natural`],\n    [/obligation/gi, `no obligation`],\n    [/vacation\\b/gi, () => oneOf('dream', 'special', 'free') + ' vacation'],\n    [/sign up\\b/gi, `sign up today`],\n    [/cell (phone)?\\b/gi, `free cell phone`],\n    [\n      /(offer|trial|membership|website|quote|installation|sample|dvd|preview|leads)\\b/gi,\n      `free $1`,\n    ],\n    [/\\bvalue/gi, `outstanding value`],\n    [/shipping/gi, `shopping spree`],\n    [/winning/gi, `WINNING`],\n    [/winner\\b/gi, `WINNER`],\n    [/promotion\\b/gi, `special promotion`],\n    [/password\\b/gi, `free password`],\n    [/\\bcash\\b/gi, `extra cash`],\n    [/cancel\\b/gi, `cancel at any time`],\n    [/\\bearn\\b/gi, `earn up to`],\n    [\n      /(movies|pics|photos|videos)/gi,\n      (match) =>\n        oneOf('hundreds', 'thousands', 'millions', 'tons') + ' of ' + match,\n    ],\n    [/\\bporn\\b/gi, `free porn`],\n    [\n      /\\blegal\\b/gi,\n      () => oneOf('absolutely', 'perfectly', 'totall', '100%') + ' legal',\n    ],\n    [/(drugs|medications|pharmacy)/gi, `online $1`],\n    [/asset/gi, `hidden asset`],\n    [/\\bsave\\b/gi, `save thousands`],\n    [/partner/gi, `marketing partner`],\n    [/unlimited/gi, `UNLIMITED`],\n    [/\\bprice\\b/gi, `low price`],\n    [/galleries\\b/gi, `huge galleries`],\n    // \t\t# Convert phone numbers to 800 numbers.\n    [\n      /(?:(?:1-)?[0-9]{3}-)?([0-9]{3}-[0-9]{4})/g,\n      (...matches) => '1-' + oneOf('800', '888') + '-' + matches[1],\n    ],\n    // \t\t# de-http:// urls\n    [/http:\\/\\//gi, ``],\n  ];\n\n  // An array to keep track of which replacers get used.\n  const results = replacers.map(() => 0);\n  $spam += originalString\n    // Simulate perl's \"while (<>)\"; drop the last empty string if the input\n    // ends with a \"\\n\"\n    .split(/\\n(?!$)/)\n    .map((line) => {\n      let lineSoFar = line;\n      replacers.forEach((replacer, i) => {\n        // @ts-ignore\n        const changedLine = lineSoFar.replace(replacer[0], replacer[1]);\n        if (changedLine !== lineSoFar) {\n          results[i] = 1;\n          lineSoFar = changedLine;\n        }\n      });\n\n      // \t# Cute things that don't cause real hits.\n      lineSoFar = lineSoFar.replace(\n        /\\.(com|org|net|edu)\\b/gi,\n        () => '.' + oneOf('info', 'biz', 'name')\n      );\n      if (randPct() > 0.66) {\n        lineSoFar = lineSoFar.replace(\n          /([Ee])nglish/g,\n          (...matches) => matches[1] + `ngrish`\n        );\n      }\n      return lineSoFar;\n    })\n    .join('\\n');\n\n  $hits += results.filter((x) => x > 0).length;\n\n  if (randPct() > 0.5) {\n    // # random line breaks make spam look\n    // # more professional\n    // # or is it just written in Notepad?\n    $spam = $spam.replace(/ /g, () => (randPct() > 0.95 ? '\\n' : ' '));\n  } else if (randPct() > 0.75) {\n    // # I write my spam in MS WORD!\n    $spam = $spam.replace(/\\n/g, ' ');\n  } else {\n    $spam = line_of_yelling($spam);\n  }\n\n  if (randPct() > 0.8 || $hits < 5) {\n    $spam +=\n      '\\nThis is a ' +\n      oneOf('one', '1') +\n      ' time ' +\n      oneOf('email', 'e-mail', 'offer') +\n      oneOf('!', '.');\n    $hits++;\n  }\n\n  if (randPct() > 0.7 || $hits < 5) {\n    $spam +=\n      '\\n' +\n      oneOf('-'.repeat(78), '~'.repeat(70), '---', '', '', '', '\\n\\n\\n\\n') +\n      '\\n' +\n      oneOf(\n        'To remove your address from ',\n        'To be removed from',\n        'To get off from',\n        'To unsubscribe from',\n        'To receive no further notices on',\n        'If you did not opt in for',\n        'To be removed from future mailings to'\n      ) +\n      ' ' +\n      oneOf('this mailing list', 'these mails') +\n      ' ' +\n      oneOf('please ', '') +\n      oneOf('reply', 'send an email', 'write back') +\n      ' ' +\n      oneOf('with a subject of', 'and put in the subject the word') +\n      ' ' +\n      oneOf('REMOVE', '\"remove\"') +\n      oneOf('!', '.', '.') +\n      '\\n';\n    $hits++;\n  }\n\n  // # Desperate to make it look like a spam now, I insert arbitrary\n  // # junk.\n  while ($hits < 5) {\n    if (randPct() > 0.66) {\n      $spam = line_of_yelling($spam);\n      $hits++;\n    } else if (randPct() > 0.5) {\n      // # Insert a spam phrase after the end of a sentence.\n      const spam_phrases = [\n        'FREE CONSULATATION',\n        'INSTANT ACCESS',\n        'PURE PROFIT',\n        'STOCK PICK',\n        'VIAGRA',\n        'WINNER',\n        'WINNING',\n        'LIMITED TIME OFFER',\n        'extra cash',\n        'CALL NOW',\n        'Once in a lifetime opportunity',\n        'Cancel at any time',\n        'No experience needed',\n        'No obligation',\n        'Save millions',\n        'Be amazed',\n        for_free().replace(/^[a-z]/, (match) => match.toUpperCase()),\n      ];\n      $spam = $spam.replace(/\\.\\s+([A-Z])/s, (...matches) => {\n        $hits++;\n        return '. ' + oneOf(...spam_phrases) + '! ' + matches[1];\n      });\n    } else if (randPct() > 0.75) {\n      // # large hexadecimal block\n      const hex = 'ABCDEF0123456789';\n      const end = rand(9) + 70;\n      for (let i = 1; i <= end; i++) {\n        $spam += hex[rand(16)];\n      }\n      $spam += '\\n';\n      $hits++;\n    } else if (randPct() > 0.75) {\n      $spam += oneOf('SSPLTM ', '{%RAND%} ');\n      $hits++;\n    }\n  }\n\n  $spam = $spam.replace(/\\n/g, '\\r\\n');\n  return `${$spam}\\n`;\n}\n\nmodule.exports = { spammer };\n","/**\n * Elmer Fudd\n *\n * @copyright (c) 2001 Joey Hess\n * @license GPL-2+\n * @author Aaron Wells\n */\n\nfunction fudd(initialString) {\n  return initialString\n    .replace(/[rl]/g, 'w')\n    .replace(/qu/g, 'qw')\n    .replace(/th\\b/g, 'f')\n    .replace(/th\\B/g, 'd')\n    .replace(/n\\./g, 'n, uh-hah-hah-hah.')\n    .replace(/[RL]/g, 'W')\n    .replace(/Qu/g, 'Qw')\n    .replace(/QU/g, 'QW')\n    .replace(/TH\\b/g, 'F')\n    .replace(/TH\\B/g, 'D')\n    .replace(/Th/g, 'D')\n    .replace(/N\\./g, 'N, uh-hah-hah-hah.');\n}\n\nmodule.exports = { fudd };\n","/**\n * jibberish -- run filters in random order\n *\n * @copyright (c) 1999 Joey Hess\n * @license GPL-2+\n * @author Aaron Wells\n */\nconst { getRandFn } = require('./lib');\n\nconst { eleet } = require('./eleet');\nconst { b1ff } = require('./b1ff');\nconst { chef } = require('./chef');\nconst { jethro } = require('./jethro');\nconst { upsidedown } = require('./upsidedown');\nconst { klaus } = require('./klaus');\nconst { cockney } = require('./cockney');\nconst { pirate } = require('./pirate');\nconst { nyc } = require('./nyc');\nconst { ken } = require('./ken');\nconst { ky00te } = require('./ky00te');\nconst { rasterman } = require('./rasterman');\nconst { newspeak } = require('./newspeak');\nconst { studly } = require('./studly');\nconst { censor } = require('./censor');\nconst { spammer } = require('./spammer');\n\n/**\n *\n * @param {string} originalString\n * @returns {string}\n */\nfunction jibberish(originalString) {\n  const rand = getRandFn();\n\n  const all = [\n    eleet,\n    b1ff,\n    chef,\n    jethro,\n    upsidedown,\n    klaus,\n    cockney,\n    pirate,\n    nyc,\n    ken,\n    ky00te,\n    rasterman,\n    newspeak,\n    studly,\n    censor,\n    spammer,\n  ];\n\n  // # shuffle order\n  // #srand;\n  for (let i = 0; i < all.length; i++) {\n    const n = rand() % all.length;\n    const was = all[i];\n    all[i] = all[n];\n    all[n] = was;\n  }\n\n  // # start the pipe...\n  const mutators = all.slice(0, 4 + (rand() % 5));\n\n  return originalString\n    .split(/\\n(?!$)/)\n    .map((line) => mutators.reduce((newLine, fn) => fn(newLine), line))\n    .join('\\n');\n\n  // # This could be optimized: take the last program off the pipeline,\n  // # open the pipeline as standard input, then exec that last program.\n  // #\n  // # But you have to ask yourself: how important is it to optimize\n  // # the generation of jibberish?\n}\nmodule.exports = { jibberish };\n","/**\n * translate from and to KennySpeak\n * Licensed unter the Artistic License:\n * http://www.perl.com/language/misc/Artistic.html\n *\n * @copyright (c) 2001, 2002 Christian Garbs <mitch@cgarbs.de>, http://www.cgarbs.de\n *                  Alan Eldridge <alane@geeksrus.net>\n * @author KennySpeak invented by Kohan Ikin <syneryder@namesuppressed.com>\n *                        http://www.namesuppressed.com/kenny/\n * @license Artistic\n * @author Aaron Wells\n */\nconst { tr } = require('./lib');\n\n// ##### Generate KennySpeak encoding table\nfunction generateKenny() {\n  /** @type {Record<string, string>} */\n  let $kenny = {};\n\n  let $a, $b, $c;\n  $a = $b = $c = 0;\n  'abcdefghijklmnopqrstuvwxyz'.split('').forEach(($char) => {\n    let $foo = tr(`${$a}${$b}${$c}`, '012', 'mpf');\n    // # lower case characters\n    $kenny[$char] = $foo;\n    // # upper case characters\n    $kenny[$char.toUpperCase()] = $foo[0].toUpperCase() + $foo.slice(1);\n    $c++;\n    if ($c == 3) {\n      $c = 0;\n      $b++;\n      if ($b == 3) {\n        $b = 0;\n        $a++;\n      }\n    }\n  });\n\n  return $kenny;\n}\n\nconst kennyTranslationTable = generateKenny();\n\n/**\n *\n * @param {string} originalString\n * @returns {string}\n */\nfunction kenny(originalString) {\n  return originalString.replace(\n    /[a-zA-Z]/g,\n    (match) => kennyTranslationTable[match]\n  );\n}\n\nmodule.exports = { kenny };\n","/**\n * lolcatz filtur\n *\n * As seen in internet gifs everywhere.\n *\n * @copyright (c) 2013 Joey Hess\n * @licens GPL-2+\n * @author Aaron Wells\n */\n\nfunction LOLCAT(initialString) {\n  return (\n    initialString\n      .toLowerCase()\n      // order is important\n      .replace(/can i/g, 'i can')\n      .replace(/\\bi\\'ve/g, 'i')\n      .replace(/\\ba\\s+/g, '') // nuke \"a\"\n      .replace(/cheese/g, 'cheez')\n      .replace(/\\brock\\b/g, 'rawk')\n      .replace(/ese\\b/g, 'ees')\n      .replace(/s\\'s\\b/g, 's')\n      .replace(/\\'s\\b/g, 's')\n      .replace(/er\\b/g, 'r')\n      .replace(/ture\\b/g, 'chur')\n      .replace(/day/g, 'dai')\n      .replace(/\\bok\\b/g, 'k')\n      .replace(/\\boks\\b/g, 'ks')\n      .replace(/boy/g, 'boi')\n      .replace(/tion/g, 'shun')\n      .replace(/ight/g, 'ite')\n      .replace(/innocent/g, 'innozent')\n      .replace(/ph/g, 'f')\n      .replace(/es/g, 'ez')\n      .replace(/ed\\b/g, 'd')\n      .replace(/ns/g, 'nz')\n      .replace(/ks/g, 'kz')\n      .replace(/ds/g, 'dz')\n      .replace(/se/g, 'ze')\n      .replace(/zs/g, 's')\n      .replace(/sz/g, 'z')\n      .replace(/ss/g, 's')\n      .replace(/cc/g, 'cs')\n      .replace(/ck/g, 'k')\n      .replace(/oa/g, 'o')\n      .replace(/\\bcat/g, 'kat')\n      .replace(/ive\\b/g, 'iv')\n      .replace(/ake/g, 'aek')\n      .replace(/ed\\b/g, 'd')\n      .replace(/ing\\b/g, 'in')\n      .replace(/sion/g, 'shun')\n      .replace(/\\bam\\b/g, 'iz')\n      .replace(/\\bhave\\b/g, 'has')\n      .replace(/\\bwho/g, 'hoo')\n      .replace(/\\bwake\\b/g, 'waek')\n      .replace(/\\bone\\b/g, '1')\n      .replace(/\\btwo\\b/g, '2')\n      .replace(/\\bto\\b/g, '2')\n      .replace(/\\btoo\\b/g, '2')\n      .replace(/\\bthree\\b/g, '3')\n      .replace(/\\bfour\\b/g, '4')\n      .replace(/\\bfor\\b/g, '4')\n      .replace(/\\bfore\\b/g, '4')\n      .replace(/\\bfive\\b/g, '5')\n      .replace(/\\bsix\\b/g, '6')\n      .replace(/\\bseven\\b/g, '7')\n      .replace(/\\beight\\b/g, '8')\n      .replace(/\\bnine\\b/g, '9')\n      .replace(/\\bten\\b/g, '10')\n      .replace(/god/g, 'ceilin cat')\n      .replace(/jezus/g, 'jebus')\n      .replace(/kitty/g, 'kitteh')\n      .replace(/saturdai/g, 'katurdai')\n      .replace(/allah/g, 'invisible man')\n      .replace(/delicious/g, 'delishus')\n      .replace(/\\bdoctor\\b/g, 'docta')\n      .replace(/\\bdr\\b/g, 'docta')\n      .replace(/\\bgay\\b/g, 'ghey')\n      .replace(/\\bgood\\b/g, 'gud')\n      .replace(/\\bever/g, 'evr')\n      .replace(/\\bpage\\b/g, 'paeg')\n      .replace(/cheezburgr/g, 'cheezburger') // fix up to canonical form\n      .replace(/es/g, 'ez')\n      .toUpperCase()\n  );\n}\n\nmodule.exports = { LOLCAT };\n","/**\n * Nethackify\n *\n * Makes text look like a partially rubbed out engraving in Nethack.\n *\n * @copyright (c) 2019 Aaron Wells\n * @license GPL-2\n * @author Aaron Wells\n */\nconst getRandFn = require('./lib').getRandFn;\n\nconst erasures = {\n  A: '/\\\\^-',\n  B: 'Pb[3',\n  C: '(',\n  D: '|)[',\n  E: '|FL[_-',\n  F: '|-',\n  G: 'C(-',\n  H: '|-',\n  I: '|',\n  J: '?',\n  K: '|<',\n  L: '|_',\n  M: '|V',\n  N: '|\\\\',\n  O: 'CU()',\n  P: 'F|-',\n  Q: 'C(),',\n  R: 'PF',\n  S: '?',\n  T: '|',\n  U: 'J',\n  V: '/\\\\v',\n  W: 'V/\\\\v',\n  X: '/\\\\',\n  Y: '?',\n  Z: '/7_',\n  a: '?',\n  b: '|L',\n  c: '?',\n  d: 'c|',\n  e: 'c-',\n  f: '-',\n  g: 'c',\n  h: 'n|',\n  i: ':',\n  j: 'i,',\n  k: '|',\n  l: '|',\n  m: 'nr',\n  n: 'r',\n  o: 'c',\n  p: 'o',\n  q: 'o',\n  r: '?',\n  s: '?',\n  t: '?',\n  u: '?',\n  v: '?',\n  w: 'v',\n  x: '?',\n  y: 'v,',\n  z: '_-',\n  0: 'C()',\n  1: '|',\n  2: '_',\n  3: '?',\n  4: '-|+',\n  5: '?',\n  6: 'oC(',\n  7: '/',\n  8: '3o?',\n  9: ')?',\n  ':': '.',\n  ';': ',:',\n  ',': '.',\n  '=': '-',\n  '+': '-|',\n  '*': '+',\n  '\"': \"'\",\n  '@': '0a',\n  '!': ':.',\n  '|': '!:',\n  '#': '/=',\n  '%': '/o',\n  '&': '8o',\n  '?': ' ',\n  '.': ' ',\n  \"'\": ' ',\n  '`': ' ',\n  '-': ' ',\n  _: ' ',\n};\n\n/**\n *\n * @param {string} str\n */\nfunction nethackify(str) {\n  const rand = getRandFn(1);\n  const modStr = str.split('');\n  for (let i = 0; i < Math.floor(str.length / 4); i++) {\n    let n = rand() % str.length;\n    let c = modStr[n];\n    if (c in erasures) {\n      const options = erasures[c];\n      if (options.length === 1) {\n        c = options[0];\n      } else {\n        c = options[rand() % options.length];\n      }\n    } else if (!/\\s/.test(c)) {\n      c = '?';\n    }\n    modStr[n] = c;\n  }\n  return modStr.join('');\n}\n\nmodule.exports = { nethackify };\n","/**\n * Fake scottish (dwarven) accent filter, by Adam Borowski, inspired by the\n * character \"Durkon\" from Order of the Stick by Rich Burlew.  GPL, 2007\n *\n * @copyright (c) 2007 Adam Borowski\n * @license GPL-3+\n * @author Aaron Wells\n */\n\n/**\n * @type {[RegExp, string][]}\n */\nconst repl = [\n  [/\\byes\\b/g, `aye`],\n  [/there/g, `thar`],\n  [/eir\\b/g, `ar`],\n  [/about/g, `aboot`],\n  [/\\bhe\\b/g, `'e`],\n  [/them/g, `'em`],\n  [/\\bhim/g, `'im`],\n  [/out of\\b/g, `outta`],\n  [/of course/g, `'course`],\n  [/\\bof\\b/g, `o'`],\n  [/\\band\\b/g, `an'`],\n  [/to\\b/g, `ta`],\n  [/tog/g, `tag`],\n  [/that/g, `tha`],\n  [/the/g, `tha`],\n  [/wouldn't/g, `wouldn'ta`],\n  [/cannot/g, `cannae`],\n  [/can't/g, `cannae`],\n  [/don't/g, `dinnae`],\n  [/'re\\b/g, `r`],\n  [/for\\b/g, `fer`],\n  [/ver\\b/g, `'er`],\n  [/ber\\b/g, `b'r`],\n  [/every\\b/g, `ev'ry`],\n  [/en\\b/g, `'n`],\n  [/\\bif\\b/g, `if'n`],\n  [/enl/g, `'nl`],\n  [/eng/g, `'ng`],\n  [/ing/g, `in'`],\n  [/ment/g, `mn't`],\n  [/\\bes/g, `'s`],\n  [/\\bex/g, `'s`],\n  [/\\bnot\\b/g, `na`],\n  [/\\bno\\b/g, `nay`],\n  [/n't have/g, `n'tve`],\n  [/\\bis\\b/g, `be`],\n  [/\\bare\\b/g, `be`],\n  [/have/g, `haf`],\n  [/abl/g, `'bl`],\n  [/\\byou\\b/g, `ye`],\n  [/\\byour/g, `yer`],\n  [/\\byou'/g, `yer'`],\n  [/noth/g, `nuth`],\n  [/\\bthis\\b/g, `'tis`],\n  [/\\bhere/g, `'ere`],\n  [/doesn't/g, `don't`],\n  [/at a\\b/g, `atta`],\n  [/ith\\b/g, `it'`],\n  [/ered\\b/g, `'red`],\n  [/into\\b/g, `inta`],\n  [/\\bbefore/g, `'fore`],\n  [/wit' '/g, `wit '`],\n  [/wit' t/g, `wit t`],\n  [/wit' w/g, `wit w`],\n  [/wit' y/g, `wit y`],\n  [/get a/g, `git a`],\n  [/ally\\b/g, `'lly`],\n  [/\\bmy/g, `me`],\n  [/\\bi think\\b/g, `methinks`],\n  [/nay w/g, `na w`],\n  [/\\bone\\b/g, `'un`],\n  [/\\b'un a/g, `one a`],\n  [/at ta\\b/g, `atta`],\n  [/ot ta\\b/g, `otta`],\n  [/\\bisn't\\b/g, `ain't`],\n  [/\\bso th/g, `s'th`],\n  [/ned\\b/g, `n'd`],\n  [/\\bbecause/g, `'cause`],\n].reduce(\n  /**\n   *\n   * @param {[RegExp, string][]} acc\n   * @param {[RegExp, string]} origRegex\n   * @return {[RegExp, string][]}\n   */\n  function makeUpperCaseVariations(acc, origRegex) {\n    const [regex, replaceWith] = origRegex;\n    const variants = [origRegex];\n    const regexText = regex.source;\n\n    /**\n     * @type {[RegExp, string]}\n     */\n    const initialUpper = [\n      new RegExp(\n        // TODO: replace with a lookbehind assertion once there's broader\n        // browser support.\n        regexText.replace(\n          /^(\\\\b)?([a-z])/,\n          (match, boundary, firstLetter) =>\n            (boundary || '') + firstLetter.toUpperCase()\n        ),\n        'g'\n      ),\n      replaceWith.replace(/^.*?[a-z]/, (match) => match.toUpperCase()),\n    ];\n    variants.push(initialUpper);\n\n    /**\n     * @type {[RegExp, string]}\n     */\n    const allUpper = [\n      new RegExp(\n        // TODO: replace with a lookbehind assertion once there's broader\n        // browser support.\n        regexText\n          .replace(/[a-z]/g, (match) => match.toUpperCase())\n          .replace(/\\\\B/g, '\\\\b'),\n        'g'\n      ),\n      replaceWith.replace(/[a-z]/g, (match) => match.toUpperCase()),\n    ];\n    variants.push(allUpper);\n\n    return [...acc, ...variants];\n  },\n  []\n);\n\n/**\n *\n * @param {string} initialString\n */\nfunction scottish(initialString) {\n  return repl.reduce(\n    (modString, [regex, replaceWith]) => modString.replace(regex, replaceWith),\n    initialString\n  );\n}\n\nmodule.exports = { scottish };\n","/**\n * Scramble the \"inner\" letters of each word in the input into a random order,\n * and output the result. Non-word (that is, non-alphabetical) characters, and\n * the first and last letters of each word, are left alone.\n *\n * @copyright (c) 2009-07-11 Andrew J. Buehler.\n * @license GPL-3+\n * @author Aaron Wells\n *\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst getRandFn = require('./lib').getRandFn;\n\nconst all_one_letter = /^(.)\\1*$/;\n\n/**\n * randomly reorders all the letters of a string\n *\n * @param {string} toScramble\n * @param {() => number} rand\n */\nfunction scramble_string(toScramble, rand) {\n  if (all_one_letter.test(toScramble)) {\n    return toScramble; // can't scramble a string which consists entirely of one letter!\n  }\n  let scrambled;\n  do {\n    let tmpstr = toScramble.split('');\n    scrambled = [];\n    while (tmpstr.length) {\n      let i = rand() % tmpstr.length;\n      scrambled.push(tmpstr[i]);\n      tmpstr.splice(i, 1);\n    }\n  } while (toScramble === scrambled.join(''));\n\n  return scrambled.join('');\n}\n\n/**\n *\n * @param {string} originalString\n * @return '';\n */\nfunction scramble(originalString) {\n  const rand = getRandFn();\n  // Scramble the middle letters of words.\n  // TODO: Use a lookbehind assertion here, once there's wider browser support\n  return originalString.replace(\n    /[A-Za-z][A-Za-z]{2,}(?=[A-Za-z])/g,\n    (match) => match[0] + scramble_string(match.slice(1), rand)\n  );\n}\n\nmodule.exports = { scramble };\n","/**\n * Use glorious unicode to the fullest possible extent. As seen previously in\n * many man pages.\n *\n * @copyright (c) 2004 Joey Hess <joeyh@debian.org>\n * @license GPL-2+\n * @author Aaron Wells\n */\n\nconst getRandFn = require('./lib').getRandFn;\n\nconst Δ = {\n  // \"~\": [],\n  // \"!\": [],\n  // \"@\": [],\n  // \"#\": [],\n  // $: [],\n  '%': [8240],\n  // \"^\": [],\n  // \"&\": [],\n  '*': [10033],\n  // \"(\": [],\n  // \")\": [],\n  _: [9418],\n  '-': [8208],\n  // \"+\": [],\n  // \"=\": [],\n  // \"[\": [],\n  // \"]\": [],\n  // \"{\": [],\n  // \"}\": [],\n  // \"\\\\\": [],\n  '|': [9475],\n  '\"': [8223],\n  \"'\": [8217],\n  // \":\": [],\n  // \";\": [],\n  '<': [8249],\n  '>': [8250],\n  // \",\": [],\n  // \".\": [],\n  '/': [8260],\n  // \"?\": [],\n\n  // \"1\": [],\n  // \"2\": [],\n  3: [1047],\n  // \"4\": [],\n  // \"5\": [],\n  // \"6\": [],\n  // \"7\": [],\n  // \"8\": [],\n  // \"9\": [],\n  0: [1365],\n\n  a: [1072],\n  A: [1040],\n  b: [1068],\n  B: [1042],\n  c: [1089, 8573, 1010],\n  C: [663, 1057, 8557],\n  d: [1281, 8574],\n  D: [8558],\n  e: [1077],\n  E: [917, 1045],\n  // f: [],\n  F: [988],\n  // g: [],\n  G: [1292],\n  h: [1210],\n  H: [919, 1053],\n  i: [1110, 8560],\n  I: [921, 1030],\n  j: [1011, 1112],\n  J: [1032],\n  // k: [],\n  K: [922, 1050],\n  l: [8572],\n  L: [8556],\n  m: [8575],\n  M: [924, 1052, 8559],\n  n: [951, 627],\n  N: [925],\n  o: [1086, 1413],\n  O: [927, 1054],\n  p: [961, 1088],\n  P: [929, 1056],\n  // q: [],\n  // Q: [],\n  // r: [],\n  // R: [],\n  s: [1109],\n  S: [1359],\n  // t: [],\n  T: [932, 1058],\n  u: [965],\n  // U: [],\n  v: [957, 8910, 8964, 9013],\n  V: [947, 8548],\n  // w: [],\n  // W: [],\n  x: [1093, 8569, 215],\n  X: [935, 1061, 8553],\n  y: [1059, 1091],\n  Y: [933],\n  // z: [],\n  Z: [918],\n};\n\n/**\n *\n * @param {string} initialString\n */\nfunction uniencode(initialString) {\n  const rand = getRandFn();\n\n  return initialString\n    .split('')\n    .map((ם) => {\n      if (ם in Δ) {\n        return String.fromCharCode(Δ[ם][rand() % Δ[ם].length]);\n      } else {\n        return ם;\n      }\n    })\n    .join('');\n}\n\nmodule.exports = { uniencode };\n","import React from 'react';\n// import \"./App.css\";\n// import { b1ff } from \"talk-like-a/src/b1ff\";\n// import { LOLCAT } from \"talk-like-a/src/LOLCAT\";\n// import { censor } from \"talk-like-a/src/censor\";\n// import \"talk-like-a/src/chef\";\n// import \"talk-like-a/src/cockney\";\n// import \"talk-like-a/src/eleet\";\n// import \"talk-like-a/src/fudd\";\n// import \"talk-like-a/src/jethro\";\n// import \"talk-like-a/src/lib\";\n// import { newspeak } from \"talk-like-a/src/newspeak\";\nimport * as talkLike from 'talk-like-a';\n\nconst filters = Object.keys(talkLike);\n\nfunction App() {\n  const [filterName, setFilterName] = React.useState(filters[0]);\n  const [plainText, setPlainText] = React.useState(\n    `I am the very model of a modern Major-General,\nI've information vegetable, animal, and mineral,\nI know the kings of England, and I quote the fights historical\nFrom Marathon to Waterloo, in order categorical;\nI'm very well acquainted, too, with matters mathematical,\nI understand equations, both the simple and quadratical,\nAbout binomial theorem I'm teeming with a lot o' news,\nWith many cheerful facts about the square of the hypotenuse.`\n  );\n  const filter = talkLike[filterName];\n\n  return (\n    <div className=\"App\" style={{ margin: '5vh' }}>\n      <header className=\"App-header\">\n        <h1>talk-like-a</h1>\n        <p>{filter('Transform plain English text in various comedic ways.')}</p>\n        <ul>\n          <li>\n            Github:{' '}\n            <a href=\"https://github.com/agwells/talk-like-a\">\n              https://github.com/agwells/talk-like-a\n            </a>\n          </li>\n          <li>\n            NPM:{' '}\n            <a href=\"https://www.npmjs.com/package/talk-like-a\">\n              https://www.npmjs.com/package/talk-like-a\n            </a>\n          </li>\n        </ul>\n      </header>\n      <main>\n        <p>\n          <select\n            autoFocus={true}\n            value={filterName}\n            onChange={(e) => setFilterName(e.target.value)}\n          >\n            {filters.map((filterOption) => (\n              <option key={filterOption} value={filterOption}>\n                {filterOption}\n              </option>\n            ))}\n          </select>\n        </p>\n        <p>\n          <textarea\n            rows={4}\n            cols={60}\n            value={plainText}\n            onChange={(e) => setPlainText(e.target.value)}\n          />\n        </p>\n        <pre>{filter(plainText)}</pre>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nconsole.log('loading?');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}